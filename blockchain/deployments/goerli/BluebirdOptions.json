{
  "address": "0x71231BBda865651A86699D53FEF1A39B60bF0bf8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_nftFeed",
          "type": "address"
        },
        {
          "internalType": "contract IBB20",
          "name": "_nftToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bluebirdManager",
          "type": "address"
        },
        {
          "internalType": "contract IOptionPricing",
          "name": "_optionsPricing",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXPIRY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bluebirdManager",
      "outputs": [
        {
          "internalType": "contract IBluebirdManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositNftToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochToStrikePrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "exercise",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exercised",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHistoricalPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNftPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isPut",
          "type": "bool"
        }
      ],
      "name": "getStrikes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityProvidingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBuyCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBuyPut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftOpts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionPricing",
      "outputs": [
        {
          "internalType": "contract IOptionPricing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        }
      ],
      "name": "setExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityProvidingTime",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityProvidingTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimeBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimeEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userToOptionIdToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "writeOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe73e5342e925447b6e09682d7a1bcfea3fb08e5a2ab2dd446330fc2bf39e6939",
  "receipt": {
    "to": null,
    "from": "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "contractAddress": "0x71231BBda865651A86699D53FEF1A39B60bF0bf8",
    "transactionIndex": 131,
    "gasUsed": "2202245",
    "logsBloom": "0x
    "blockHash": "0x4c57e733a3698d2697212337318a302362a1a572d1a1fe454f0d1f133fcbc821",
    "transactionHash": "0xe73e5342e925447b6e09682d7a1bcfea3fb08e5a2ab2dd446330fc2bf39e6939",
    "logs": [
      {
        "transactionIndex": 131,
        "blockNumber": 8593753,
        "transactionHash": "0xe73e5342e925447b6e09682d7a1bcfea3fb08e5a2ab2dd446330fc2bf39e6939",
        "address": "0x71231BBda865651A86699D53FEF1A39B60bF0bf8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e"
        ],
        "data": "0x",
        "logIndex": 193,
        "blockHash": "0x4c57e733a3698d2697212337318a302362a1a572d1a1fe454f0d1f133fcbc821"
      },
      {
        "transactionIndex": 131,
        "blockNumber": 8593753,
        "transactionHash": "0xe73e5342e925447b6e09682d7a1bcfea3fb08e5a2ab2dd446330fc2bf39e6939",
        "address": "0x71231BBda865651A86699D53FEF1A39B60bF0bf8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e"
        ],
        "data": "0x",
        "logIndex": 194,
        "blockHash": "0x4c57e733a3698d2697212337318a302362a1a572d1a1fe454f0d1f133fcbc821"
      }
    ],
    "blockNumber": 8593753,
    "cumulativeGasUsed": "17888343",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e"
  ],
  "numDeployments": 1,
  "solcInputHash": "19607e9e93c43b09707f9d37f6824513",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_nftFeed\",\"type\":\"address\"},{\"internalType\":\"contract IBB20\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bluebirdManager\",\"type\":\"address\"},{\"internalType\":\"contract IOptionPricing\",\"name\":\"_optionsPricing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXPIRY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bluebirdManager\",\"outputs\":[{\"internalType\":\"contract IBluebirdManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"calculateAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositNftToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochToStrikePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exercised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHistoricalPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"}],\"name\":\"getStrikes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityProvidingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyPut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOpts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionPricing\",\"outputs\":[{\"internalType\":\"contract IOptionPricing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"setExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityProvidingTime\",\"type\":\"uint256\"}],\"name\":\"setLiquidityProvidingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimeEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToOptionIdToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"writeOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of options to buy\",\"_id\":\"Index of the option\"}},\"calculateAmountETH(uint256)\":{\"params\":{\"_id\":\"Index of the option\"},\"returns\":{\"_0\":\"Amount of ETH to be received\"}},\"depositNftToken(uint256)\":{\"params\":{\"amount\":\"Amount of NFT tokens to deposit\"}},\"exercise(uint256)\":{\"params\":{\"_id\":\"Id of option to exercise\"}},\"getHistoricalPrices()\":{\"returns\":{\"_0\":\"historical prices of NFT\"}},\"getNftPrice()\":{\"returns\":{\"_0\":\"Price of NFT\"}},\"getPremium(uint256)\":{\"params\":{\"_id\":\"Id of contract\"}},\"getStrikes(uint256,bool)\":{\"returns\":{\"_0\":\"uint256[] memory Array of strike prices\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setExpiry(uint256)\":{\"params\":{\"_expiry\":\"Expiry of options\"}},\"setLiquidityProvidingTime(uint256)\":{\"params\":{\"_liquidityProvidingTime\":\"Time to provide liquidity\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"writeOption()\":{\"details\":\"Only owner/controller should be able to trigger this\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buy(uint256,uint256)\":{\"notice\":\"Buy an option based on `_id`\"},\"calculateAmountETH(uint256)\":{\"notice\":\"Calculate amount of ETH to be received when exercising an option\"},\"depositETH()\":{\"notice\":\"Provide liquidity by depositing ETH\"},\"depositNftToken(uint256)\":{\"notice\":\"Provide liquidity by depositing NFT tokens\"},\"exercise(uint256)\":{\"notice\":\"Exercise an option based on `_id`\"},\"getHistoricalPrices()\":{\"notice\":\"Returns the historical prices of NFT\"},\"getNftPrice()\":{\"notice\":\"Returns the price of NFT from oracle\"},\"getPremium(uint256)\":{\"notice\":\"Get premium of an option\"},\"getStrikes(uint256,bool)\":{\"notice\":\"Returns the strike prices of an epoch\"},\"setExpiry(uint256)\":{\"notice\":\"Set expiry\"},\"setLiquidityProvidingTime(uint256)\":{\"notice\":\"Set liquidity providing time\"},\"writeOption()\":{\"notice\":\"Writes options\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BluebirdOptions.sol\":\"BluebirdOptions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BluebirdOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// Import LinkTokenInterface and AggregatorV3Interface\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOptionPricing } from \\\"./interfaces/IOptionPricing.sol\\\";\\nimport { IBluebirdOptions } from \\\"./interfaces/IBluebirdOptions.sol\\\";\\nimport { IBB20 } from \\\"./interfaces/IBB20.sol\\\";\\nimport { BluebirdMath } from \\\"./libraries/BluebirdMath.sol\\\";\\nimport { IBluebirdManager } from \\\"./interfaces/IBluebirdManager.sol\\\";\\n\\ncontract BluebirdOptions is IBluebirdOptions, Ownable, ReentrancyGuard {\\n    // Price feed interface\\n    AggregatorV3Interface internal nftFeed;\\n\\n    // Fractionalized NFT token\\n    IERC20 public nftToken;\\n\\n    // Bluebird Manager\\n    IBluebirdManager public bluebirdManager;\\n\\n    // Option Pricing\\n    IOptionPricing public optionPricing;\\n\\n    // Options expiry\\n    uint256 public EXPIRY = 5 minutes;\\n\\n    // Start time of buying options\\n    uint256 public startTimeBuy;\\n\\n    // Start time of epoch\\n    uint256 public startTimeEpoch;\\n\\n    // Current epoch\\n    uint256 public epoch;\\n\\n    // Time to provide liquidity\\n    uint256 public liquidityProvidingTime = 2 minutes;\\n\\n    // Id tracker for each strike price of options\\n    uint256 public currentId;\\n\\n    // Max amount of call options that can be bought currently\\n    uint256 public maxBuyCall;\\n\\n    // Max amount of put options that can be bought currently\\n    uint256 public maxBuyPut;\\n\\n    // Mapping to track liquidity providers' deposits\\n    mapping(address => mapping(uint256 => uint256)) public userDeposits;\\n\\n    // Mapping to track each strike price of options\\n    mapping(uint256 => Option) public nftOpts;\\n\\n    // Mapping of user to option id to amount bought\\n    mapping(address => mapping(uint256 => uint256)) public userToOptionIdToAmount;\\n\\n    // Mapping which checks if current id has been exercised\\n    mapping(address => mapping(uint256 => bool)) public exercised;\\n    // Mapping of epoch to isPut to strike prices\\n    mapping(uint256 => mapping(bool => uint256[])) public epochToStrikePrices;\\n\\n    constructor(\\n        AggregatorV3Interface _nftFeed,\\n        IBB20 _nftToken,\\n        address _bluebirdManager,\\n        IOptionPricing _optionsPricing,\\n        address _owner\\n    ) {\\n        // Price feed of NFT\\n        nftFeed = _nftFeed;\\n        nftToken = IERC20(_nftToken);\\n        bluebirdManager = IBluebirdManager(_bluebirdManager);\\n        optionPricing = IOptionPricing(_optionsPricing);\\n\\n        startTimeEpoch = block.timestamp;\\n        // Transfer ownership to owner\\n        transferOwnership(_owner);\\n    }\\n\\n    // Admin Functions\\n\\n    /**\\n     * @notice Set liquidity providing time\\n     * @param _liquidityProvidingTime Time to provide liquidity\\n     */\\n    function setLiquidityProvidingTime(uint256 _liquidityProvidingTime) external onlyOwner {\\n        liquidityProvidingTime = _liquidityProvidingTime;\\n    }\\n\\n    /**\\n     * @notice Set expiry\\n     * @param _expiry Expiry of options\\n     */\\n    function setExpiry(uint256 _expiry) external onlyOwner {\\n        EXPIRY = _expiry;\\n    }\\n\\n    // Internal functions\\n    /**\\n     * @notice Function to calculate strike prices\\n     * @param _floorPrice Floor price of NFT\\n     * @param _isPut Whether option is put or call\\n     */\\n    function _calculateStrikePrices(uint256 _floorPrice, bool _isPut) internal pure returns (uint256[] memory) {\\n        uint256[] memory strikePrices = new uint256[](3);\\n        if (_isPut) {\\n            // Calculate from floor price 10% lower, 20% lower, 30% lower\\n            strikePrices[0] = _floorPrice - (_floorPrice / 10);\\n            strikePrices[1] = _floorPrice - (_floorPrice / 5);\\n            strikePrices[2] = _floorPrice - (_floorPrice / 3);\\n            return strikePrices;\\n        } else {\\n            // Calculate from floor price 10% higher, 20% higher, 30% higher\\n            strikePrices[0] = _floorPrice + (_floorPrice / 10);\\n            strikePrices[1] = _floorPrice + (_floorPrice / 5);\\n            strikePrices[2] = _floorPrice + (_floorPrice / 3);\\n        }\\n        return strikePrices;\\n    }\\n\\n    /**\\n     * @notice Function to start epoch\\n     */\\n    function _startEpoch() internal {\\n        require(block.timestamp > (startTimeEpoch + liquidityProvidingTime), \\\"Liquidity providing time has ended\\\");\\n        startTimeEpoch = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Writes options\\n     * @dev Only owner/controller should be able to trigger this\\n     */\\n    function writeOption() public onlyOwner {\\n        // Initialise start time of buying options\\n        startTimeBuy = block.timestamp;\\n\\n        // Get floor price of NFT\\n        uint256 nftPrice = getNftPrice();\\n        // Get token price of fractionalised NFT\\n        uint256 nftTokenPrice = nftPrice / 1000000;\\n\\n        // Get strike prices of call and put options\\n        uint256[] memory _strikePricesCall = _calculateStrikePrices(nftTokenPrice, false);\\n        uint256[] memory _strikePricesPut = _calculateStrikePrices(nftTokenPrice, true);\\n\\n        uint256 _start = block.timestamp;\\n\\n        // Determine amount to write based on amount of NFT tokens to write call options\\n        uint256 amountToWriteCall = maxBuyCall / 3; // For simplicity's sake, we will write same amount of options for each strike price\\n        // Determine amount to write based on amount of ETH to write put options\\n        uint256 amountToWritePut = maxBuyPut / 3;\\n        // Loop through strike prices and write options\\n        for (uint i = 0; i < _strikePricesCall.length; i++) {\\n            // Write call options\\n            nftOpts[currentId] = Option(_strikePricesCall[i], _start + EXPIRY, amountToWriteCall, false);\\n\\n            // Write put options\\n            nftOpts[currentId + 1] = Option(_strikePricesPut[i], _start + EXPIRY, amountToWritePut, true);\\n\\n            // Emit events for individual strike prices\\n            bluebirdManager.emitCallOptionCreatedEvent(\\n                address(this),\\n                currentId,\\n                epoch,\\n                address(nftToken),\\n                _strikePricesCall[i],\\n                _start,\\n                _start + EXPIRY\\n            );\\n            bluebirdManager.emitPutOptionCreatedEvent(\\n                address(this),\\n                currentId + 1,\\n                epoch,\\n                address(nftToken),\\n                _strikePricesCall[i],\\n                _start,\\n                _start + EXPIRY\\n            );\\n\\n            // Increment current id\\n            currentId += 2;\\n        }\\n        // Increment epoch\\n        epoch += 1;\\n        // Save strike prices\\n        epochToStrikePrices[epoch][false] = _strikePricesCall;\\n        epochToStrikePrices[epoch][true] = _strikePricesPut;\\n        _startEpoch();\\n    }\\n\\n    // View functions\\n\\n    /**\\n     * @notice Get premium of an option\\n     * @param _id Id of contract\\n     */\\n    function getPremium(uint256 _id) public view returns (uint256) {\\n        // Get price of NFT\\n        uint256 _nftPrice = getNftPrice();\\n        // Get price of NFT token\\n        uint256 _nftTokenPrice = _nftPrice / 1000000;\\n        // Get historical prices of NFT\\n        uint[] memory _prices = getHistoricalPrices();\\n        // Get standard deviation of NFT price\\n        uint256 _baseIv = BluebirdMath.computeStandardDeviation(_prices);\\n        return\\n            optionPricing.getOptionPrice(\\n                nftOpts[_id].isPut,\\n                nftOpts[_id].expiry,\\n                nftOpts[_id].strike,\\n                _nftTokenPrice,\\n                _baseIv\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the price of NFT from oracle\\n     * @return Price of NFT\\n     */\\n    function getNftPrice() public view returns (uint) {\\n        (, int price, , , ) = nftFeed.latestRoundData();\\n        //Price should never be negative thus cast int to unit is ok\\n        //Price is 8 decimal places and will require 1e10 correction later to 18 places\\n        return uint(price);\\n    }\\n\\n    /**\\n     * @notice Returns the historical prices of NFT\\n     * @return historical prices of NFT\\n     */\\n\\n    function getHistoricalPrices() public view returns (uint[] memory) {\\n        // Create new price array of 7 prices\\n        uint[] memory prices = new uint[](7);\\n        // Get latest round data\\n        (uint80 _roundId, int price, , , ) = nftFeed.latestRoundData();\\n        prices[0]= uint(price);\\n        // 1 day has 24 rounds, so get past 7 days worth of prices\\n        for (uint i = 1; i < 7; i++) {\\n            (, int _price, , , ) = nftFeed.getRoundData(uint80(_roundId - (24 * i)));\\n            prices[i] = uint(_price);\\n        }\\n        return prices;\\n    }\\n    /**\\n     * @notice Returns the strike prices of an epoch\\n     * @return uint256[] memory Array of strike prices\\n     */\\n    function getStrikes(uint256 _epoch, bool _isPut) external view returns (uint256[] memory) {\\n        return epochToStrikePrices[_epoch][_isPut];\\n    }\\n\\n    // Liquidity providing functions\\n\\n    /**\\n     * @notice Provide liquidity by depositing NFT tokens\\n     * @param amount Amount of NFT tokens to deposit\\n     */\\n    function depositNftToken(uint amount) public nonReentrant {\\n        // Require that it is only during liquidity providing time\\n        require(block.timestamp < (startTimeEpoch + liquidityProvidingTime), \\\"Liquidity providing time has ended\\\");\\n        // Take NFT tokens\\n        require(nftToken.transferFrom(msg.sender, address(this), amount), \\\"Incorrect amount of NFT Token sent\\\");\\n\\n        // Increase max buy amount\\n        maxBuyCall += amount;\\n        userDeposits[msg.sender][0] += amount;\\n    }\\n\\n    /**\\n     * @notice Provide liquidity by depositing ETH\\n     */\\n    function depositETH() public payable nonReentrant {\\n        require(block.timestamp < (startTimeEpoch + liquidityProvidingTime), \\\"Liquidity providing time has ended\\\");\\n        // Take ETH from user\\n        require(msg.value > 0, \\\"Incorrect amount of ETH sent\\\");\\n\\n        // Increase max buy amount\\n        maxBuyPut += msg.value;\\n        userDeposits[msg.sender][1] += msg.value;\\n    }\\n\\n    /**\\n     * @notice Buy an option based on `_id`\\n     * @param _id Index of the option\\n     * @param _amount Amount of options to buy\\n     */\\n    function buy(uint256 _id, uint256 _amount) external payable nonReentrant {\\n        require(nftOpts[_id].expiry > block.timestamp, \\\"Option is expired and cannot be bought\\\");\\n        // Get isPut\\n        bool _isPut = nftOpts[_id].isPut;\\n\\n        // Set max buy\\n        if (_isPut) {\\n            require(_amount <= maxBuyPut, \\\"Amount exceeds max buy\\\");\\n            // Reduce max buy\\n            maxBuyPut -= _amount;\\n        } else {\\n            require(_amount <= maxBuyCall, \\\"Amount exceeds max buy\\\");\\n            // Reduce max buy\\n            maxBuyCall -= _amount;\\n        }\\n        // Get price of NFT\\n        uint256 nftTokenPrice = getNftPrice() / 1000000;\\n        // Get expiry of option\\n        uint256 _expiry = nftOpts[_id].expiry;\\n        // Initialise premium\\n        uint256 _premium;\\n        // Get historical prices\\n        uint[] memory _prices = getHistoricalPrices();\\n        // Get base IV\\n        uint256 _baseIv = BluebirdMath.computeStandardDeviation(_prices);\\n        // Get isPut\\n\\n        // Get strike\\n        uint256 _strike = nftOpts[_id].strike;\\n        // Get premium based on option type\\n        if (_isPut) {\\n            _premium = optionPricing.getOptionPrice(true, _expiry, _strike, nftTokenPrice, _baseIv);\\n        } else {\\n            _premium = optionPricing.getOptionPrice(false, _expiry, _strike, nftTokenPrice, _baseIv);\\n        }\\n\\n        // Record amount of options bought by user\\n        userToOptionIdToAmount[msg.sender][_id] += _amount / 1 ether;\\n        //Transfer premium payment from buyer to protocol\\n        uint256 _amountTokens = _premium / nftTokenPrice;\\n        require(nftToken.transferFrom(msg.sender, address(this), _amountTokens), \\\"Premium payment failed\\\");\\n        // Calculate extra amount of ETH to send to buyer\\n        uint256 _extraAmount = msg.value - _premium;\\n        // Send extra amount of ETH to buyer\\n        if (_extraAmount > 0) {\\n            (bool success, ) = payable(msg.sender).call{ value: _extraAmount }(\\\"\\\");\\n            require(success, \\\"Insufficient amount of ETH sent to user\\\");\\n        }\\n\\n        // Emit event\\n        bluebirdManager.emitBoughtEvent(address(this), msg.sender, _id, _amount, _premium, block.timestamp, epoch);\\n    }\\n\\n    /**\\n     * @notice Calculate amount of ETH to be received when exercising an option\\n     * @param _id Index of the option\\n     * @return Amount of ETH to be received\\n     */\\n    function calculateAmountETH(uint256 _id) public view returns (uint256) {\\n        return nftOpts[_id].strike * userToOptionIdToAmount[msg.sender][_id];\\n    }\\n\\n    /**\\n     * @notice Exercise an option based on `_id`\\n     * @param _id Id of option to exercise\\n     */\\n    function exercise(uint256 _id) external payable {\\n        require(userToOptionIdToAmount[msg.sender][_id] > 0, \\\"You do not own this option\\\");\\n        require(!exercised[msg.sender][_id], \\\"Option has already been exercised\\\");\\n        require(nftOpts[_id].expiry < block.timestamp, \\\"Option is not expired\\\");\\n        // Get price of NFT token\\n        uint256 nftTokenPrice = getNftPrice() / 1000000;\\n        // Initialise amount of ETH to send to protocol or send to user\\n        uint256 _amountETH;\\n        // Initialise profit boolean to determine if user has profit\\n        bool _profit;\\n        // Calculate pnl\\n        if (!nftOpts[_id].isPut) {\\n            if (nftTokenPrice > nftOpts[_id].strike) {\\n                _profit = true;\\n                // Call buyers pay strike price * amount to protocol\\n                _amountETH = calculateAmountETH(_id);\\n                require(msg.value == _amountETH, \\\"Incorrect amount of ETH sent to buy NFT Token\\\");\\n                // Transfer from protocol to user NFT token\\n                require(\\n                    nftToken.transfer(msg.sender, userToOptionIdToAmount[msg.sender][_id] * 1 ether),\\n                    \\\"Insufficient amount of NFT Token sent to user\\\"\\n                );\\n            }\\n        } else {\\n            if (nftTokenPrice < nftOpts[_id].strike) {\\n                _profit = true;\\n                // Put buyers pay strike price * amount to protocol\\n                _amountETH = calculateAmountETH(_id);\\n                // Transfer from user to protocol amount of token\\n                require(\\n                    nftToken.transferFrom(msg.sender, address(this), userToOptionIdToAmount[msg.sender][_id] * 1 ether),\\n                    \\\"Insufficient amount of NFT Token sent to protocol\\\"\\n                );\\n                // Transfer from protocol to user eth\\n                (bool success, ) = payable(msg.sender).call{ value: _amountETH }(\\\"\\\");\\n                require(success, \\\"Insufficient amount of ETH sent to user\\\");\\n            }\\n        }\\n        exercised[msg.sender][_id] = true;\\n        // Emit event\\n        bluebirdManager.emitExerciseEvent(address(this), msg.sender, _id, _amountETH, _profit);\\n    }\\n}\\n\",\"keccak256\":\"0x2b4b4457209765c113fb78c656531acdd2faa77cfc369af1879a390374a819df\",\"license\":\"MIT\"},\"contracts/interfaces/IBB20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title BB20 - Fractionalized NFT Token\\n/// @dev Only can be issued by the BluebirdGrinder\\ninterface IBB20 is IERC20 {\\n    event Minted(address to, uint256 amount);\\n\\n    /**\\n     * @dev Mint BB20 Tokens\\n     */\\n    function mint(address _receipient, uint256 _amount) external;\\n\\n    /**\\n     * @notice  Burn `amount` tokens and decreasing the total supply.\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1edd0a9434cd58937be4f26963d41af6bfb37ec9575d1637b026797f5c4b5a42\",\"license\":\"MIT\"},\"contracts/interfaces/IBluebirdManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n/// @title IBluebird Manager\\n/// @notice The Bluebird Options Manager\\ninterface IBluebirdManager {\\n    /**\\n     * @notice Emit when Call Option Contract is Created\\n     * @param _contractAddress Address of the contract created\\n     * @param _optionId Option Id\\n     * @param _epoch Epoch of the option\\n     * @param _nftToken Address of the bb20 token\\n     * @param _strikePrice Strike Price\\n     * @param _start Start time of epoch\\n     * @param _expiry End time of epoch\\n     */\\n    event CallOptionCreated(\\n        address indexed _contractAddress,\\n        uint256 indexed _optionId,\\n        uint256 _epoch,\\n        address _nftToken,\\n        uint256 _strikePrice,\\n        uint256 _start,\\n        uint256 _expiry\\n    );\\n\\n    /**\\n     * @notice Emit when Put option contract is Created\\n     * @param _contractAddress Address of the contract created\\n     * @param _optionId Option Id\\n     * @param _epoch Epoch of the option\\n     * @param _nftToken Address of the bb20 token\\n     * @param _strikePrice Strike Price\\n     * @param _start Start time of epoch\\n     * @param _expiry End time of epoch\\n     */\\n    event PutOptionCreated(\\n        address indexed _contractAddress,\\n        uint256 indexed _optionId,\\n        uint256 _epoch,\\n        address _nftToken,\\n        uint256 _strikePrice,\\n        uint256 _start,\\n        uint256 _expiry\\n    );\\n\\n    /**\\n     * @notice Emitted when an option is bought\\n     * @param _contractAddress Address of the contract\\n     * @param _user User's address\\n     * @param _optionId Option Index\\n     * @param _amount Lots purchased\\n     * @param _premium Premium paid\\n     * @param _timestamp Timestamp of purchase\\n     * @param _epoch Epoch of the option\\n     */\\n    event Bought(\\n        address indexed _contractAddress,\\n        address indexed _user,\\n        uint256 indexed _optionId,\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _timestamp,\\n        uint256 _epoch\\n    );\\n    /**\\n     * @notice Emitted when a user claims profits\\n     * @param _contractAddress Address of the contract\\n     * @param _user User's address\\n     * @param _id id of option\\n     * @param _profits profit or loss number\\n     * @param _profit true for profit and false for loss -> this indicates _pnl is positive or negative\\n     */\\n    event Exercised(\\n        address indexed _contractAddress,\\n        address indexed _user,\\n        uint256 indexed _id,\\n        uint256 _profits,\\n        bool _profit\\n    );\\n\\n    /**\\n     * @notice Create a New Call and Put Options for the epoch\\n     * @param _collectionAddress Address of the NFT Collection\\n     * @param _nftFeedAddress Address of the NFT Oracle Feed from Chainlink\\n     * @dev Can only create when previous epoch has expired\\n     * @dev Increment epoch\\n     * @dev Must be whitelisted NFT collection\\n     */\\n    function createOptions(address _collectionAddress, address _nftFeedAddress) external;\\n\\n    function emitCallOptionCreatedEvent(\\n        address _contractAddress,\\n        uint256 _optionId,\\n        uint256 _epoch,\\n        address _nftToken,\\n        uint256 _strikePrice,\\n        uint256 _start,\\n        uint256 _expiry\\n    ) external;\\n\\n    function emitPutOptionCreatedEvent(\\n        address _contractAddress,\\n        uint256 _optionId,\\n        uint256 _epoch,\\n        address _nftToken,\\n        uint256 _strikePrice,\\n        uint256 _start,\\n        uint256 _expiry\\n    ) external;\\n\\n    function emitBoughtEvent(\\n        address _contractAddress,\\n        address _user,\\n        uint256 _order,\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _timestamp,\\n        uint256 _epoch\\n    ) external;\\n\\n    function emitExerciseEvent(\\n        address _contractAddress,\\n        address _user,\\n        uint256 _id,\\n        uint256 _pnl,\\n        bool _profit\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa21cf1441f24887cc029dc4628ad77a229f296aae9410accd5d7e68d713574aa\",\"license\":\"MIT\"},\"contracts/interfaces/IBluebirdOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n/// @title IBluebirdOptions\\n/// @notice The Bluebird Options contract will represent a options belonging to an epoch.\\n/// @notice The contract will contain the strike prices for the epoch\\n/// @notice The contract will only encapsulate puts or calls only\\n/// @notice The contract shall be named as {NFT_SYMBOL}-{EPOCH}-{PUT/CALL}\\ninterface IBluebirdOptions {\\n    // Options stored in arrays of structs\\n    struct Option {\\n        uint strike; // Price in USD (18 decimal places) option allows buyer to purchase tokens at\\n        uint expiry; // Unix timestamp of expiration time\\n        uint amount; // Amount of tokens option allows buyer to purchase\\n        bool isPut; // True if option is a put, false if call\\n    }\\n\\n    /**\\n     * @notice Buy an option\\n     * @param _id ID of the option\\n     * @param _amount Amount of lots to buy\\n     * @dev Option must have started\\n     * @dev Option must not have expired\\n     * @dev `_amount` must be less than or equal to the amount of lots available\\n     */\\n    function buy(uint256 _id, uint256 _amount) external payable;\\n\\n    /**\\n     * @notice Claim profits, if any\\n     * @param _id Order Index\\n     * @dev Must be owner of order\\n     */\\n    function exercise(uint256 _id) external payable;\\n\\n    /**\\n     * @notice Get strike prices of the current contract\\n     * @param _epoch Epoch of the option\\n     * @param _isPut Is the option a put option\\n     */\\n    function getStrikes(uint256 _epoch, bool _isPut) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Get premium based on option id\\n     */\\n    function getPremium(uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbc0d6b73ebbce3e0649dd22ab44643244b525c74fa6c1694aa9618378a951abe\",\"license\":\"MIT\"},\"contracts/interfaces/IOptionPricing.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOptionPricing {\\n    function getOptionPrice(\\n        bool isPut,\\n        uint256 expiry,\\n        uint256 strike,\\n        uint256 lastPrice,\\n        uint256 baseIv\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ce39291a92d1843653907520ab883c653e5e75e1d25a27e5bbf68e8aad767f4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BluebirdMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary BluebirdMath {\\n    /**\\n     * Compute standard deviation of an array of values\\n     * @param _values Array of values\\n     * @return Standard deviation of `_values`\\n     */\\n    function computeStandardDeviation(uint256[] memory _values) internal pure returns (uint256) {\\n        uint256 n = _values.length;\\n        uint256 mean = 0;\\n\\n        // Compute mean\\n        for (uint256 i = 0; i < n; i++) {\\n            mean += _values[i];\\n        }\\n        mean = mean / n;\\n        // Compute sum of squared differences\\n        uint256 sumSquaredDifferences = 0;\\n        for (uint256 i = 0; i < n; i++) {\\n            uint256 difference;\\n            if (_values[i] > mean) {\\n                difference = _values[i] - mean;\\n            } else {\\n                difference = mean - _values[i];\\n            }\\n\\n            sumSquaredDifferences += difference * difference;\\n        }\\n\\n        // Compute variance and standard deviation\\n        uint256 variance = sumSquaredDifferences / n;\\n        uint256 standardDeviation = sqrt(variance);\\n\\n        return standardDeviation;\\n    }\\n\\n    /**\\n     * Square root function\\n     * @param x Input x\\n     * @return Square root of `x`\\n     */\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        uint256 z = (x + 1) / 2;\\n        uint256 y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n        return y;\\n    }\\n}\\n\",\"keccak256\":\"0x12a0f9a3e346d6692e0367755a0448815e1155d1ea5b9fd5ddd4f932c380a00a\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405261012c6006556078600a553480156200001c57600080fd5b5060405162002588380380620025888339810160408190526200003f91620001f9565b6200004a33620000b2565b60018055600280546001600160a01b038088166001600160a01b0319928316179092556003805487841690831617905560048054868416908316179055600580549285169290911691909117905542600855620000a78162000102565b505050505062000279565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200010c62000185565b6001600160a01b038116620001775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200018281620000b2565b50565b6000546001600160a01b03163314620001e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200016e565b565b6001600160a01b03811681146200018257600080fd5b600080600080600060a086880312156200021257600080fd5b85516200021f81620001e3565b60208701519095506200023281620001e3565b60408701519094506200024581620001e3565b60608701519093506200025881620001e3565b60808701519092506200026b81620001e3565b809150509295509295909350565b6122ff80620002896000396000f3fe6080604052600436106101d85760003560e01c80636053937b11610102578063c0c2e53a11610095578063d6febde811610064578063d6febde814610598578063e00dd161146105ab578063f2fde38b146105c1578063f6326fb3146105e157600080fd5b8063c0c2e53a146104e0578063c49127741461052b578063cfbdfc5f14610540578063d06fcba81461057857600080fd5b8063b07f0a41116100d1578063b07f0a4114610477578063b28d916a1461048a578063b49631e9146104a0578063bdf82a22146104c057600080fd5b80636053937b14610418578063715018a61461042e5780638da5cb5b14610443578063900cf0cf1461046157600080fd5b80631e3394fb1161017a5780634530a2d7116101495780634530a2d7146103b75780634c61670d146103cd5780634cfe6f93146103ed5780635e4db5fd1461040257600080fd5b80631e3394fb146102d55780631f93d1b31461030d57806333b521a6146103235780633d1682941461038a57600080fd5b806308f43333116101b657806308f433331461024857806310a64fc414610280578063110bd49b146102955780631bf1fffb146102b557600080fd5b806301cceb38146101dd578063039ea00a146101ff5780630899b14114610228575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611f4f565b6105e9565b005b34801561020b57600080fd5b5061021560075481565b6040519081526020015b60405180910390f35b34801561023457600080fd5b506101fd610243366004611f4f565b6105f6565b34801561025457600080fd5b50610215610263366004611f84565b600e60209081526000928352604080842090915290825290205481565b34801561028c57600080fd5b506101fd610603565b3480156102a157600080fd5b506102156102b0366004611fbc565b6109b1565b3480156102c157600080fd5b506102156102d0366004611f4f565b6109ef565b3480156102e157600080fd5b506005546102f5906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b34801561031957600080fd5b5061021560085481565b34801561032f57600080fd5b5061036861033e366004611f4f565b600f6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b604080519485526020850193909352918301521515606082015260800161021f565b34801561039657600080fd5b506103aa6103a5366004611ff4565b610ada565b60405161021f9190612024565b3480156103c357600080fd5b5061021560065481565b3480156103d957600080fd5b506101fd6103e8366004611f4f565b610b48565b3480156103f957600080fd5b506103aa610ca9565b34801561040e57600080fd5b50610215600d5481565b34801561042457600080fd5b50610215600c5481565b34801561043a57600080fd5b506101fd610e5d565b34801561044f57600080fd5b506000546001600160a01b03166102f5565b34801561046d57600080fd5b5061021560095481565b6101fd610485366004611f4f565b610e71565b34801561049657600080fd5b50610215600a5481565b3480156104ac57600080fd5b506004546102f5906001600160a01b031681565b3480156104cc57600080fd5b506102156104db366004611f4f565b6113d8565b3480156104ec57600080fd5b5061051b6104fb366004611f84565b601160209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161021f565b34801561053757600080fd5b50610215611405565b34801561054c57600080fd5b5061021561055b366004611f84565b601060209081526000928352604080842090915290825290205481565b34801561058457600080fd5b506003546102f5906001600160a01b031681565b6101fd6105a6366004612068565b61148a565b3480156105b757600080fd5b50610215600b5481565b3480156105cd57600080fd5b506101fd6105dc36600461208a565b611988565b6101fd6119fe565b6105f1611ad1565b600655565b6105fe611ad1565b600a55565b61060b611ad1565b426007556000610619611405565b9050600061062a620f4240836120bb565b90506000610639826000611b2b565b90506000610648836001611b2b565b9050600042905060006003600c5461066091906120bb565b905060006003600d5461067391906120bb565b905060005b855181101561093057604051806080016040528087838151811061069e5761069e6120dd565b60200260200101518152602001600654866106b991906120f3565b8152602080820186905260006040928301819052600b548152600f8252829020835181559083015160018201558282015160028201556060909201516003909201805460ff19169215159290921790915580516080810190915285518190879084908110610729576107296120dd565b602002602001015181526020016006548661074491906120f3565b815260200183815260200160011515815250600f6000600b54600161076991906120f3565b815260208082019290925260409081016000208351815591830151600183015582015160028201556060909101516003918201805460ff1916911515919091179055600454600b54600954925489516001600160a01b0393841694631646879f9430949391929116908c90889081106107e4576107e46120dd565b60200260200101518a6006548c6107fb91906120f3565b6040518863ffffffff1660e01b815260040161081d979695949392919061210b565b600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b5050600454600b546001600160a01b0390911692506358c41cc3915030906108749060016120f3565b6009546003548b516001600160a01b03909116908c908890811061089a5761089a6120dd565b60200260200101518a6006548c6108b191906120f3565b6040518863ffffffff1660e01b81526004016108d3979695949392919061210b565b600060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505050506002600b600082825461091891906120f3565b909155508190506109288161214f565b915050610678565b5060016009600082825461094491906120f3565b909155505060095460009081526012602090815260408083208380528252909120865161097392880190611eef565b506009546000908152601260209081526040808320600184528252909120855161099f92870190611eef565b506109a8611c99565b50505050505050565b601260205282600052604060002060205281600052604060002081815481106109d957600080fd5b9060005260206000200160009250925050505481565b6000806109fa611405565b90506000610a0b620f4240836120bb565b90506000610a17610ca9565b90506000610a2482611ccd565b6005546000888152600f6020526040908190206003810154600182015491549251630b6f6db160e31b815260ff909116151560048201526024810191909152604481019190915260648101869052608481018390529192506001600160a01b031690635b7b6d889060a401602060405180830381865afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad0919061216a565b9695505050505050565b60008281526012602090815260408083208415158452825291829020805483518184028101840190945280845260609392830182828015610b3a57602002820191906000526020600020905b815481526020019060010190808311610b26575b505050505090505b92915050565b610b50611df5565b600a54600854610b6091906120f3565b4210610b875760405162461bcd60e51b8152600401610b7e90612183565b60405180910390fd5b6003546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0291906121c5565b610c595760405162461bcd60e51b815260206004820152602260248201527f496e636f727265637420616d6f756e74206f66204e465420546f6b656e2073656044820152611b9d60f21b6064820152608401610b7e565b80600c6000828254610c6b91906120f3565b9091555050336000908152600e6020908152604080832083805290915281208054839290610c9a9084906120f3565b90915550506001805550565b50565b6040805160078082526101008201909252606091600091906020820160e080368337019050509050600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b91906121fc565b505050915091508083600081518110610d6657610d666120dd565b602090810291909101015260015b6007811015610e54576002546000906001600160a01b0316639a6fc8f5610d9c84601861224c565b610db29069ffffffffffffffffffff881661226b565b6040516001600160e01b031960e084901b16815269ffffffffffffffffffff909116600482015260240160a060405180830381865afa158015610df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d91906121fc565b50505091505080858381518110610e3657610e366120dd565b60209081029190910101525080610e4c8161214f565b915050610d74565b50919392505050565b610e65611ad1565b610e6f6000611e4f565b565b336000908152601060209081526040808320848452909152902054610ed85760405162461bcd60e51b815260206004820152601a60248201527f596f7520646f206e6f74206f776e2074686973206f7074696f6e0000000000006044820152606401610b7e565b33600090815260116020908152604080832084845290915290205460ff1615610f4d5760405162461bcd60e51b815260206004820152602160248201527f4f7074696f6e2068617320616c7265616479206265656e2065786572636973656044820152601960fa1b6064820152608401610b7e565b6000818152600f60205260409020600101544211610fa55760405162461bcd60e51b815260206004820152601560248201527413dc1d1a5bdb881a5cc81b9bdd08195e1c1a5c9959605a1b6044820152606401610b7e565b6000620f4240610fb3611405565b610fbd91906120bb565b6000838152600f602052604081206003015491925090819060ff1661117e576000848152600f602052604090205483111561117957506001610ffe846113d8565b91508134146110655760405162461bcd60e51b815260206004820152602d60248201527f496e636f727265637420616d6f756e74206f66204554482073656e7420746f2060448201526c313abc9027232a102a37b5b2b760991b6064820152608401610b7e565b6003543360008181526010602090815260408083208984529091529020546001600160a01b039092169163a9059cbb91906110a890670de0b6b3a764000061224c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156110f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111791906121c5565b6111795760405162461bcd60e51b815260206004820152602d60248201527f496e73756666696369656e7420616d6f756e74206f66204e465420546f6b656e60448201526c1039b2b73a103a37903ab9b2b960991b6064820152608401610b7e565b611330565b6000848152600f6020526040902054831015611330575060016111a0846113d8565b6003543360008181526010602090815260408083208a84529091529020549294506001600160a01b03909116916323b872dd919030906111e890670de0b6b3a764000061224c565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126091906121c5565b6112c65760405162461bcd60e51b815260206004820152603160248201527f496e73756666696369656e7420616d6f756e74206f66204e465420546f6b656e604482015270081cd95b9d081d1bc81c1c9bdd1bd8dbdb607a1b6064820152608401610b7e565b604051600090339084908381818185875af1925050503d8060008114611308576040519150601f19603f3d011682016040523d82523d6000602084013e61130d565b606091505b505090508061132e5760405162461bcd60e51b8152600401610b7e90612282565b505b33600081815260116020908152604080832088845290915290819020805460ff1916600117905560048054915163c690579760e01b815230918101919091526024810192909252604482018690526064820184905282151560848301526001600160a01b03169063c69057979060a401600060405180830381600087803b1580156113ba57600080fd5b505af11580156113ce573d6000803e3d6000fd5b5050505050505050565b336000908152601060209081526040808320848452825280832054600f909252822054610b42919061224c565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f91906121fc565b509195945050505050565b611492611df5565b6000828152600f602052604090206001015442106115015760405162461bcd60e51b815260206004820152602660248201527f4f7074696f6e206973206578706972656420616e642063616e6e6f7420626520604482015265189bdd59da1d60d21b6064820152608401610b7e565b6000828152600f602052604090206003015460ff16801561158457600d548211156115675760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742065786365656473206d61782062757960501b6044820152606401610b7e565b81600d6000828254611579919061226b565b909155506115e79050565b600c548211156115cf5760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742065786365656473206d61782062757960501b6044820152606401610b7e565b81600c60008282546115e1919061226b565b90915550505b6000620f42406115f5611405565b6115ff91906120bb565b6000858152600f60205260408120600101549192508061161d610ca9565b9050600061162a82611ccd565b6000898152600f602052604090205490915086156116d257600554604051630b6f6db160e31b815260016004820152602481018790526044810183905260648101889052608481018490526001600160a01b0390911690635b7b6d889060a401602060405180830381865afa1580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb919061216a565b935061175e565b600554604051630b6f6db160e31b815260006004820152602481018790526044810183905260648101889052608481018490526001600160a01b0390911690635b7b6d889060a401602060405180830381865afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b919061216a565b93505b611770670de0b6b3a7640000896120bb565b3360009081526010602090815260408083208d84529091528120805490919061179a9084906120f3565b90915550600090506117ac87866120bb565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611804573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182891906121c5565b61186d5760405162461bcd60e51b8152602060048201526016602482015275141c995b5a5d5b481c185e5b595b9d0819985a5b195960521b6044820152606401610b7e565b6000611879863461226b565b905080156118eb57604051600090339083908381818185875af1925050503d80600081146118c3576040519150601f19603f3d011682016040523d82523d6000602084013e6118c8565b606091505b50509050806118e95760405162461bcd60e51b8152600401610b7e90612282565b505b600480546009546040516307f7059560e51b81523093810193909352336024840152604483018e9052606483018d9052608483018990524260a484015260c48301526001600160a01b03169063fee0b2a09060e401600060405180830381600087803b15801561195a57600080fd5b505af115801561196e573d6000803e3d6000fd5b5050505050505050505050505061198460018055565b5050565b611990611ad1565b6001600160a01b0381166119f55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b7e565b610ca681611e4f565b611a06611df5565b600a54600854611a1691906120f3565b4210611a345760405162461bcd60e51b8152600401610b7e90612183565b60003411611a845760405162461bcd60e51b815260206004820152601c60248201527f496e636f727265637420616d6f756e74206f66204554482073656e74000000006044820152606401610b7e565b34600d6000828254611a9691906120f3565b9091555050336000908152600e602090815260408083206001845290915281208054349290611ac69084906120f3565b909155505060018055565b6000546001600160a01b03163314610e6f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b7e565b60408051600380825260808201909252606091600091906020820184803683370190505090508215611bf757611b62600a856120bb565b611b6c908561226b565b81600081518110611b7f57611b7f6120dd565b6020908102919091010152611b956005856120bb565b611b9f908561226b565b81600181518110611bb257611bb26120dd565b6020908102919091010152611bc86003856120bb565b611bd2908561226b565b81600281518110611be557611be56120dd565b60209081029190910101529050610b42565b611c02600a856120bb565b611c0c90856120f3565b81600081518110611c1f57611c1f6120dd565b6020908102919091010152611c356005856120bb565b611c3f90856120f3565b81600181518110611c5257611c526120dd565b6020908102919091010152611c686003856120bb565b611c7290856120f3565b81600281518110611c8557611c856120dd565b6020026020010181815250505b9392505050565b600a54600854611ca991906120f3565b4211611cc75760405162461bcd60e51b8152600401610b7e90612183565b42600855565b805160009081805b82811015611d1657848181518110611cef57611cef6120dd565b602002602001015182611d0291906120f3565b915080611d0e8161214f565b915050611cd5565b50611d2182826120bb565b90506000805b83811015611dd057600083878381518110611d4457611d446120dd565b60200260200101511115611d7e5783878381518110611d6557611d656120dd565b6020026020010151611d77919061226b565b9050611da6565b868281518110611d9057611d906120dd565b602002602001015184611da3919061226b565b90505b611db0818061224c565b611dba90846120f3565b9250508080611dc89061214f565b915050611d27565b506000611ddd84836120bb565b90506000611dea82611e9f565b979650505050505050565b60026001541415611e485760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b7e565b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806002611eaf8460016120f3565b611eb991906120bb565b9050825b80821015611c92575080600281611ed481876120bb565b611ede91906120f3565b611ee891906120bb565b9150611ebd565b828054828255906000526020600020908101928215611f2a579160200282015b82811115611f2a578251825591602001919060010190611f0f565b50611f36929150611f3a565b5090565b5b80821115611f365760008155600101611f3b565b600060208284031215611f6157600080fd5b5035919050565b80356001600160a01b0381168114611f7f57600080fd5b919050565b60008060408385031215611f9757600080fd5b611fa083611f68565b946020939093013593505050565b8015158114610ca657600080fd5b600080600060608486031215611fd157600080fd5b833592506020840135611fe381611fae565b929592945050506040919091013590565b6000806040838503121561200757600080fd5b82359150602083013561201981611fae565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561205c57835183529284019291840191600101612040565b50909695505050505050565b6000806040838503121561207b57600080fd5b50508035926020909101359150565b60006020828403121561209c57600080fd5b611c9282611f68565b634e487b7160e01b600052601160045260246000fd5b6000826120d857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115612106576121066120a5565b500190565b6001600160a01b03978816815260208101969096526040860194909452919094166060840152608083019390935260a082019290925260c081019190915260e00190565b6000600019821415612163576121636120a5565b5060010190565b60006020828403121561217c57600080fd5b5051919050565b60208082526022908201527f4c69717569646974792070726f766964696e672074696d652068617320656e64604082015261195960f21b606082015260800190565b6000602082840312156121d757600080fd5b8151611c9281611fae565b805169ffffffffffffffffffff81168114611f7f57600080fd5b600080600080600060a0868803121561221457600080fd5b61221d866121e2565b9450602086015193506040860151925060608601519150612240608087016121e2565b90509295509295909350565b6000816000190483118215151615612266576122666120a5565b500290565b60008282101561227d5761227d6120a5565b500390565b60208082526027908201527f496e73756666696369656e7420616d6f756e74206f66204554482073656e74206040820152663a37903ab9b2b960c91b60608201526080019056fea2646970667358221220f7d0333185d68b9fec0f91d8040d02107738580a8dfed643a4a365fb548dec6c64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80636053937b11610102578063c0c2e53a11610095578063d6febde811610064578063d6febde814610598578063e00dd161146105ab578063f2fde38b146105c1578063f6326fb3146105e157600080fd5b8063c0c2e53a146104e0578063c49127741461052b578063cfbdfc5f14610540578063d06fcba81461057857600080fd5b8063b07f0a41116100d1578063b07f0a4114610477578063b28d916a1461048a578063b49631e9146104a0578063bdf82a22146104c057600080fd5b80636053937b14610418578063715018a61461042e5780638da5cb5b14610443578063900cf0cf1461046157600080fd5b80631e3394fb1161017a5780634530a2d7116101495780634530a2d7146103b75780634c61670d146103cd5780634cfe6f93146103ed5780635e4db5fd1461040257600080fd5b80631e3394fb146102d55780631f93d1b31461030d57806333b521a6146103235780633d1682941461038a57600080fd5b806308f43333116101b657806308f433331461024857806310a64fc414610280578063110bd49b146102955780631bf1fffb146102b557600080fd5b806301cceb38146101dd578063039ea00a146101ff5780630899b14114610228575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611f4f565b6105e9565b005b34801561020b57600080fd5b5061021560075481565b6040519081526020015b60405180910390f35b34801561023457600080fd5b506101fd610243366004611f4f565b6105f6565b34801561025457600080fd5b50610215610263366004611f84565b600e60209081526000928352604080842090915290825290205481565b34801561028c57600080fd5b506101fd610603565b3480156102a157600080fd5b506102156102b0366004611fbc565b6109b1565b3480156102c157600080fd5b506102156102d0366004611f4f565b6109ef565b3480156102e157600080fd5b506005546102f5906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b34801561031957600080fd5b5061021560085481565b34801561032f57600080fd5b5061036861033e366004611f4f565b600f6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b604080519485526020850193909352918301521515606082015260800161021f565b34801561039657600080fd5b506103aa6103a5366004611ff4565b610ada565b60405161021f9190612024565b3480156103c357600080fd5b5061021560065481565b3480156103d957600080fd5b506101fd6103e8366004611f4f565b610b48565b3480156103f957600080fd5b506103aa610ca9565b34801561040e57600080fd5b50610215600d5481565b34801561042457600080fd5b50610215600c5481565b34801561043a57600080fd5b506101fd610e5d565b34801561044f57600080fd5b506000546001600160a01b03166102f5565b34801561046d57600080fd5b5061021560095481565b6101fd610485366004611f4f565b610e71565b34801561049657600080fd5b50610215600a5481565b3480156104ac57600080fd5b506004546102f5906001600160a01b031681565b3480156104cc57600080fd5b506102156104db366004611f4f565b6113d8565b3480156104ec57600080fd5b5061051b6104fb366004611f84565b601160209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161021f565b34801561053757600080fd5b50610215611405565b34801561054c57600080fd5b5061021561055b366004611f84565b601060209081526000928352604080842090915290825290205481565b34801561058457600080fd5b506003546102f5906001600160a01b031681565b6101fd6105a6366004612068565b61148a565b3480156105b757600080fd5b50610215600b5481565b3480156105cd57600080fd5b506101fd6105dc36600461208a565b611988565b6101fd6119fe565b6105f1611ad1565b600655565b6105fe611ad1565b600a55565b61060b611ad1565b426007556000610619611405565b9050600061062a620f4240836120bb565b90506000610639826000611b2b565b90506000610648836001611b2b565b9050600042905060006003600c5461066091906120bb565b905060006003600d5461067391906120bb565b905060005b855181101561093057604051806080016040528087838151811061069e5761069e6120dd565b60200260200101518152602001600654866106b991906120f3565b8152602080820186905260006040928301819052600b548152600f8252829020835181559083015160018201558282015160028201556060909201516003909201805460ff19169215159290921790915580516080810190915285518190879084908110610729576107296120dd565b602002602001015181526020016006548661074491906120f3565b815260200183815260200160011515815250600f6000600b54600161076991906120f3565b815260208082019290925260409081016000208351815591830151600183015582015160028201556060909101516003918201805460ff1916911515919091179055600454600b54600954925489516001600160a01b0393841694631646879f9430949391929116908c90889081106107e4576107e46120dd565b60200260200101518a6006548c6107fb91906120f3565b6040518863ffffffff1660e01b815260040161081d979695949392919061210b565b600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b5050600454600b546001600160a01b0390911692506358c41cc3915030906108749060016120f3565b6009546003548b516001600160a01b03909116908c908890811061089a5761089a6120dd565b60200260200101518a6006548c6108b191906120f3565b6040518863ffffffff1660e01b81526004016108d3979695949392919061210b565b600060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505050506002600b600082825461091891906120f3565b909155508190506109288161214f565b915050610678565b5060016009600082825461094491906120f3565b909155505060095460009081526012602090815260408083208380528252909120865161097392880190611eef565b506009546000908152601260209081526040808320600184528252909120855161099f92870190611eef565b506109a8611c99565b50505050505050565b601260205282600052604060002060205281600052604060002081815481106109d957600080fd5b9060005260206000200160009250925050505481565b6000806109fa611405565b90506000610a0b620f4240836120bb565b90506000610a17610ca9565b90506000610a2482611ccd565b6005546000888152600f6020526040908190206003810154600182015491549251630b6f6db160e31b815260ff909116151560048201526024810191909152604481019190915260648101869052608481018390529192506001600160a01b031690635b7b6d889060a401602060405180830381865afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad0919061216a565b9695505050505050565b60008281526012602090815260408083208415158452825291829020805483518184028101840190945280845260609392830182828015610b3a57602002820191906000526020600020905b815481526020019060010190808311610b26575b505050505090505b92915050565b610b50611df5565b600a54600854610b6091906120f3565b4210610b875760405162461bcd60e51b8152600401610b7e90612183565b60405180910390fd5b6003546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0291906121c5565b610c595760405162461bcd60e51b815260206004820152602260248201527f496e636f727265637420616d6f756e74206f66204e465420546f6b656e2073656044820152611b9d60f21b6064820152608401610b7e565b80600c6000828254610c6b91906120f3565b9091555050336000908152600e6020908152604080832083805290915281208054839290610c9a9084906120f3565b90915550506001805550565b50565b6040805160078082526101008201909252606091600091906020820160e080368337019050509050600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b91906121fc565b505050915091508083600081518110610d6657610d666120dd565b602090810291909101015260015b6007811015610e54576002546000906001600160a01b0316639a6fc8f5610d9c84601861224c565b610db29069ffffffffffffffffffff881661226b565b6040516001600160e01b031960e084901b16815269ffffffffffffffffffff909116600482015260240160a060405180830381865afa158015610df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d91906121fc565b50505091505080858381518110610e3657610e366120dd565b60209081029190910101525080610e4c8161214f565b915050610d74565b50919392505050565b610e65611ad1565b610e6f6000611e4f565b565b336000908152601060209081526040808320848452909152902054610ed85760405162461bcd60e51b815260206004820152601a60248201527f596f7520646f206e6f74206f776e2074686973206f7074696f6e0000000000006044820152606401610b7e565b33600090815260116020908152604080832084845290915290205460ff1615610f4d5760405162461bcd60e51b815260206004820152602160248201527f4f7074696f6e2068617320616c7265616479206265656e2065786572636973656044820152601960fa1b6064820152608401610b7e565b6000818152600f60205260409020600101544211610fa55760405162461bcd60e51b815260206004820152601560248201527413dc1d1a5bdb881a5cc81b9bdd08195e1c1a5c9959605a1b6044820152606401610b7e565b6000620f4240610fb3611405565b610fbd91906120bb565b6000838152600f602052604081206003015491925090819060ff1661117e576000848152600f602052604090205483111561117957506001610ffe846113d8565b91508134146110655760405162461bcd60e51b815260206004820152602d60248201527f496e636f727265637420616d6f756e74206f66204554482073656e7420746f2060448201526c313abc9027232a102a37b5b2b760991b6064820152608401610b7e565b6003543360008181526010602090815260408083208984529091529020546001600160a01b039092169163a9059cbb91906110a890670de0b6b3a764000061224c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156110f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111791906121c5565b6111795760405162461bcd60e51b815260206004820152602d60248201527f496e73756666696369656e7420616d6f756e74206f66204e465420546f6b656e60448201526c1039b2b73a103a37903ab9b2b960991b6064820152608401610b7e565b611330565b6000848152600f6020526040902054831015611330575060016111a0846113d8565b6003543360008181526010602090815260408083208a84529091529020549294506001600160a01b03909116916323b872dd919030906111e890670de0b6b3a764000061224c565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126091906121c5565b6112c65760405162461bcd60e51b815260206004820152603160248201527f496e73756666696369656e7420616d6f756e74206f66204e465420546f6b656e604482015270081cd95b9d081d1bc81c1c9bdd1bd8dbdb607a1b6064820152608401610b7e565b604051600090339084908381818185875af1925050503d8060008114611308576040519150601f19603f3d011682016040523d82523d6000602084013e61130d565b606091505b505090508061132e5760405162461bcd60e51b8152600401610b7e90612282565b505b33600081815260116020908152604080832088845290915290819020805460ff1916600117905560048054915163c690579760e01b815230918101919091526024810192909252604482018690526064820184905282151560848301526001600160a01b03169063c69057979060a401600060405180830381600087803b1580156113ba57600080fd5b505af11580156113ce573d6000803e3d6000fd5b5050505050505050565b336000908152601060209081526040808320848452825280832054600f909252822054610b42919061224c565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f91906121fc565b509195945050505050565b611492611df5565b6000828152600f602052604090206001015442106115015760405162461bcd60e51b815260206004820152602660248201527f4f7074696f6e206973206578706972656420616e642063616e6e6f7420626520604482015265189bdd59da1d60d21b6064820152608401610b7e565b6000828152600f602052604090206003015460ff16801561158457600d548211156115675760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742065786365656473206d61782062757960501b6044820152606401610b7e565b81600d6000828254611579919061226b565b909155506115e79050565b600c548211156115cf5760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742065786365656473206d61782062757960501b6044820152606401610b7e565b81600c60008282546115e1919061226b565b90915550505b6000620f42406115f5611405565b6115ff91906120bb565b6000858152600f60205260408120600101549192508061161d610ca9565b9050600061162a82611ccd565b6000898152600f602052604090205490915086156116d257600554604051630b6f6db160e31b815260016004820152602481018790526044810183905260648101889052608481018490526001600160a01b0390911690635b7b6d889060a401602060405180830381865afa1580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb919061216a565b935061175e565b600554604051630b6f6db160e31b815260006004820152602481018790526044810183905260648101889052608481018490526001600160a01b0390911690635b7b6d889060a401602060405180830381865afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b919061216a565b93505b611770670de0b6b3a7640000896120bb565b3360009081526010602090815260408083208d84529091528120805490919061179a9084906120f3565b90915550600090506117ac87866120bb565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611804573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182891906121c5565b61186d5760405162461bcd60e51b8152602060048201526016602482015275141c995b5a5d5b481c185e5b595b9d0819985a5b195960521b6044820152606401610b7e565b6000611879863461226b565b905080156118eb57604051600090339083908381818185875af1925050503d80600081146118c3576040519150601f19603f3d011682016040523d82523d6000602084013e6118c8565b606091505b50509050806118e95760405162461bcd60e51b8152600401610b7e90612282565b505b600480546009546040516307f7059560e51b81523093810193909352336024840152604483018e9052606483018d9052608483018990524260a484015260c48301526001600160a01b03169063fee0b2a09060e401600060405180830381600087803b15801561195a57600080fd5b505af115801561196e573d6000803e3d6000fd5b5050505050505050505050505061198460018055565b5050565b611990611ad1565b6001600160a01b0381166119f55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b7e565b610ca681611e4f565b611a06611df5565b600a54600854611a1691906120f3565b4210611a345760405162461bcd60e51b8152600401610b7e90612183565b60003411611a845760405162461bcd60e51b815260206004820152601c60248201527f496e636f727265637420616d6f756e74206f66204554482073656e74000000006044820152606401610b7e565b34600d6000828254611a9691906120f3565b9091555050336000908152600e602090815260408083206001845290915281208054349290611ac69084906120f3565b909155505060018055565b6000546001600160a01b03163314610e6f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b7e565b60408051600380825260808201909252606091600091906020820184803683370190505090508215611bf757611b62600a856120bb565b611b6c908561226b565b81600081518110611b7f57611b7f6120dd565b6020908102919091010152611b956005856120bb565b611b9f908561226b565b81600181518110611bb257611bb26120dd565b6020908102919091010152611bc86003856120bb565b611bd2908561226b565b81600281518110611be557611be56120dd565b60209081029190910101529050610b42565b611c02600a856120bb565b611c0c90856120f3565b81600081518110611c1f57611c1f6120dd565b6020908102919091010152611c356005856120bb565b611c3f90856120f3565b81600181518110611c5257611c526120dd565b6020908102919091010152611c686003856120bb565b611c7290856120f3565b81600281518110611c8557611c856120dd565b6020026020010181815250505b9392505050565b600a54600854611ca991906120f3565b4211611cc75760405162461bcd60e51b8152600401610b7e90612183565b42600855565b805160009081805b82811015611d1657848181518110611cef57611cef6120dd565b602002602001015182611d0291906120f3565b915080611d0e8161214f565b915050611cd5565b50611d2182826120bb565b90506000805b83811015611dd057600083878381518110611d4457611d446120dd565b60200260200101511115611d7e5783878381518110611d6557611d656120dd565b6020026020010151611d77919061226b565b9050611da6565b868281518110611d9057611d906120dd565b602002602001015184611da3919061226b565b90505b611db0818061224c565b611dba90846120f3565b9250508080611dc89061214f565b915050611d27565b506000611ddd84836120bb565b90506000611dea82611e9f565b979650505050505050565b60026001541415611e485760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b7e565b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806002611eaf8460016120f3565b611eb991906120bb565b9050825b80821015611c92575080600281611ed481876120bb565b611ede91906120f3565b611ee891906120bb565b9150611ebd565b828054828255906000526020600020908101928215611f2a579160200282015b82811115611f2a578251825591602001919060010190611f0f565b50611f36929150611f3a565b5090565b5b80821115611f365760008155600101611f3b565b600060208284031215611f6157600080fd5b5035919050565b80356001600160a01b0381168114611f7f57600080fd5b919050565b60008060408385031215611f9757600080fd5b611fa083611f68565b946020939093013593505050565b8015158114610ca657600080fd5b600080600060608486031215611fd157600080fd5b833592506020840135611fe381611fae565b929592945050506040919091013590565b6000806040838503121561200757600080fd5b82359150602083013561201981611fae565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561205c57835183529284019291840191600101612040565b50909695505050505050565b6000806040838503121561207b57600080fd5b50508035926020909101359150565b60006020828403121561209c57600080fd5b611c9282611f68565b634e487b7160e01b600052601160045260246000fd5b6000826120d857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115612106576121066120a5565b500190565b6001600160a01b03978816815260208101969096526040860194909452919094166060840152608083019390935260a082019290925260c081019190915260e00190565b6000600019821415612163576121636120a5565b5060010190565b60006020828403121561217c57600080fd5b5051919050565b60208082526022908201527f4c69717569646974792070726f766964696e672074696d652068617320656e64604082015261195960f21b606082015260800190565b6000602082840312156121d757600080fd5b8151611c9281611fae565b805169ffffffffffffffffffff81168114611f7f57600080fd5b600080600080600060a0868803121561221457600080fd5b61221d866121e2565b9450602086015193506040860151925060608601519150612240608087016121e2565b90509295509295909350565b6000816000190483118215151615612266576122666120a5565b500290565b60008282101561227d5761227d6120a5565b500390565b60208082526027908201527f496e73756666696369656e7420616d6f756e74206f66204554482073656e74206040820152663a37903ab9b2b960c91b60608201526080019056fea2646970667358221220f7d0333185d68b9fec0f91d8040d02107738580a8dfed643a4a365fb548dec6c64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(uint256,uint256)": {
        "params": {
          "_amount": "Amount of options to buy",
          "_id": "Index of the option"
        }
      },
      "calculateAmountETH(uint256)": {
        "params": {
          "_id": "Index of the option"
        },
        "returns": {
          "_0": "Amount of ETH to be received"
        }
      },
      "depositNftToken(uint256)": {
        "params": {
          "amount": "Amount of NFT tokens to deposit"
        }
      },
      "exercise(uint256)": {
        "params": {
          "_id": "Id of option to exercise"
        }
      },
      "getHistoricalPrices()": {
        "returns": {
          "_0": "historical prices of NFT"
        }
      },
      "getNftPrice()": {
        "returns": {
          "_0": "Price of NFT"
        }
      },
      "getPremium(uint256)": {
        "params": {
          "_id": "Id of contract"
        }
      },
      "getStrikes(uint256,bool)": {
        "returns": {
          "_0": "uint256[] memory Array of strike prices"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setExpiry(uint256)": {
        "params": {
          "_expiry": "Expiry of options"
        }
      },
      "setLiquidityProvidingTime(uint256)": {
        "params": {
          "_liquidityProvidingTime": "Time to provide liquidity"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "writeOption()": {
        "details": "Only owner/controller should be able to trigger this"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buy(uint256,uint256)": {
        "notice": "Buy an option based on `_id`"
      },
      "calculateAmountETH(uint256)": {
        "notice": "Calculate amount of ETH to be received when exercising an option"
      },
      "depositETH()": {
        "notice": "Provide liquidity by depositing ETH"
      },
      "depositNftToken(uint256)": {
        "notice": "Provide liquidity by depositing NFT tokens"
      },
      "exercise(uint256)": {
        "notice": "Exercise an option based on `_id`"
      },
      "getHistoricalPrices()": {
        "notice": "Returns the historical prices of NFT"
      },
      "getNftPrice()": {
        "notice": "Returns the price of NFT from oracle"
      },
      "getPremium(uint256)": {
        "notice": "Get premium of an option"
      },
      "getStrikes(uint256,bool)": {
        "notice": "Returns the strike prices of an epoch"
      },
      "setExpiry(uint256)": {
        "notice": "Set expiry"
      },
      "setLiquidityProvidingTime(uint256)": {
        "notice": "Set liquidity providing time"
      },
      "writeOption()": {
        "notice": "Writes options"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 148,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 264,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2139,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "nftFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2142,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "nftToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)972"
      },
      {
        "astId": 2145,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "bluebirdManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBluebirdManager)3446"
      },
      {
        "astId": 2148,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "optionPricing",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IOptionPricing)3510"
      },
      {
        "astId": 2151,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "EXPIRY",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2153,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "startTimeBuy",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2155,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "startTimeEpoch",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2157,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "epoch",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2160,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "liquidityProvidingTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2162,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "currentId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2164,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "maxBuyCall",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2166,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "maxBuyPut",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2172,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "userDeposits",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2177,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "nftOpts",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Option)3458_storage)"
      },
      {
        "astId": 2183,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "userToOptionIdToAmount",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2189,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "exercised",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2196,
        "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
        "label": "epochToStrikePrices",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_mapping(t_bool,t_array(t_uint256)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IBluebirdManager)3446": {
        "encoding": "inplace",
        "label": "contract IBluebirdManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)972": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOptionPricing)3510": {
        "encoding": "inplace",
        "label": "contract IOptionPricing",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bool,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_bool,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bool => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_struct(Option)3458_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBluebirdOptions.Option)",
        "numberOfBytes": "32",
        "value": "t_struct(Option)3458_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Option)3458_storage": {
        "encoding": "inplace",
        "label": "struct IBluebirdOptions.Option",
        "members": [
          {
            "astId": 3451,
            "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
            "label": "strike",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3453,
            "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
            "label": "expiry",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3455,
            "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3457,
            "contract": "contracts/BluebirdOptions.sol:BluebirdOptions",
            "label": "isPut",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}