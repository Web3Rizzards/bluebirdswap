{
  "address": "0x4aB59d8D18298261560aFcAf780E17Dc69B877d0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_nftTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "Fractionalised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FRACTIONALISED_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "fractionalizeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        }
      ],
      "name": "getIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        }
      ],
      "name": "getTokenFromCollection",
      "outputs": [
        {
          "internalType": "contract IBB20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftAddressToTokenAddress",
      "outputs": [
        {
          "internalType": "contract BB20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reconstructNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        }
      ],
      "name": "whitelistNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3a52139041a9e2d93b86f5fd20b5b992fa238d49bbc8bc882bb70707e9b7ffe",
  "receipt": {
    "to": null,
    "from": "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "contractAddress": "0x4aB59d8D18298261560aFcAf780E17Dc69B877d0",
    "transactionIndex": 0,
    "gasUsed": "1707755",
    "logsBloom": "0x
    "blockHash": "0x500c10e1055bffb75f123447c5e097947a74b9e8fff233d522510a0b540b0b86",
    "transactionHash": "0xb3a52139041a9e2d93b86f5fd20b5b992fa238d49bbc8bc882bb70707e9b7ffe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 760497,
        "transactionHash": "0xb3a52139041a9e2d93b86f5fd20b5b992fa238d49bbc8bc882bb70707e9b7ffe",
        "address": "0x4aB59d8D18298261560aFcAf780E17Dc69B877d0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x500c10e1055bffb75f123447c5e097947a74b9e8fff233d522510a0b540b0b86"
      }
    ],
    "blockNumber": 760497,
    "cumulativeGasUsed": "1707755",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bb9fe4e66b0d4e4d84c249d167520feb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Fractionalised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FRACTIONALISED_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"fractionalizeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"getIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"getTokenFromCollection\",\"outputs\":[{\"internalType\":\"contract IBB20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftAddressToTokenAddress\",\"outputs\":[{\"internalType\":\"contract BB20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reconstructNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"whitelistNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fractionalizeNFT(address,uint256)\":{\"params\":{\"_collectionAddress\":\"Address of NFT collection\",\"_tokenId\":\"Token Id of NFT to fractionalize\"}},\"getIds(address)\":{\"params\":{\"_collectionAddress\":\"Address of NFT collection\"}},\"getTokenFromCollection(address)\":{\"params\":{\"_collectionAddress\":\"Address of NFT collection\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reconstructNFT(address,uint256)\":{\"params\":{\"_collectionAddress\":\"Address of NFT collection\",\"_tokenId\":\"Token Id of NFT to reconstruct\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelistNFT(address)\":{\"params\":{\"_collectionAddress\":\"Address of NFT collection\"}}},\"stateVariables\":{\"FRACTIONALISED_AMOUNT\":{\"details\":\"1 NFT = 1 million BB20 tokens\"}},\"title\":\"BluebirdGrinder - Contract to fractionalize NFTs into BB20 tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FRACTIONALISED_AMOUNT()\":{\"notice\":\"Amount of BB20 tokens to mint per NFT\"},\"fractionalizeNFT(address,uint256)\":{\"notice\":\"Function to fractionalize NFTs into BB20 tokens\"},\"getIds(address)\":{\"notice\":\"Function to get all token ids from collection address that are in the contract\"},\"getTokenFromCollection(address)\":{\"notice\":\"Function to get token address from collection address\"},\"nftAddressToTokenAddress(address)\":{\"notice\":\"Mapping of NFT collection address to BB20 token address\"},\"reconstructNFT(address,uint256)\":{\"notice\":\"Function to reconstruct NFTs from BB20 tokens\"},\"whitelistNFT(address)\":{\"notice\":\"Function to whitelist NFT collection\"},\"whitelisted(address)\":{\"notice\":\"Mapping of collection address to boolean to check if collection is whitelisted\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BluebirdGrinder.sol\":\"BluebirdGrinder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/BB20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interfaces/IBB20.sol\\\";\\r\\n\\r\\n/// @title BB20 - Fractionalized NFT Token\\r\\n/// @dev Only can be issued by the BluebirdGrinder\\r\\ncontract BB20 is IBB20, ERC20 {\\r\\n    /**\\r\\n     * @notice Address of the BluebirdGrinder contract\\r\\n     */\\r\\n    address public grinder;\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to check if is called by the BluebirdGrinder\\r\\n     */\\r\\n    modifier onlyGrinder() {\\r\\n        _isFactory();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor of the BB20 contract\\r\\n     * @param _name Name of the token\\r\\n     * @param _symbol Symbol of the token\\r\\n     * @param _grinder Address of the BluebirdGrinder contract\\r\\n     */\\r\\n    constructor(string memory _name, string memory _symbol, address _grinder) ERC20(_name, _symbol) {\\r\\n        grinder = _grinder;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint BB20 Tokens\\r\\n     * @param _receipient Address of the receipient\\r\\n     * @param _amount Amount of tokens to mint\\r\\n     * @dev Only can be called by the BluebirdGrinder\\r\\n     */\\r\\n    function mint(address _receipient, uint256 _amount) external onlyGrinder {\\r\\n        _mint(_receipient, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Burn `amount` tokens and decreasing the total supply.\\r\\n     * @param amount Amount of tokens to burn\\r\\n     * @dev Only can be called by the BluebirdGrinder\\r\\n     */\\r\\n    function burn(uint256 amount) external override onlyGrinder returns (bool) {\\r\\n        _burn(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used in modifier to check if is called by the BluebirdGrinder\\r\\n     */\\r\\n    function _isFactory() internal view {\\r\\n        require(msg.sender == grinder, \\\"BB20: Only grinder allowed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x341d8568732097b9242c3ea9e90a9ef2c7415992e966acab3515e476b37398a4\",\"license\":\"MIT\"},\"contracts/BluebirdGrinder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"./utils/SetUtils.sol\\\";\\r\\nimport \\\"./interfaces/IBluebirdGrinder.sol\\\";\\r\\nimport { BB20 } from \\\"./BB20.sol\\\";\\r\\n\\r\\n/// @title BluebirdGrinder - Contract to fractionalize NFTs into BB20 tokens\\r\\n\\r\\ncontract BluebirdGrinder is IBluebirdGrinder, Ownable {\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using SetUtils for EnumerableSet.UintSet;\\r\\n    /**\\r\\n     * @notice Amount of BB20 tokens to mint per NFT\\r\\n     * @dev 1 NFT = 1 million BB20 tokens\\r\\n     */\\r\\n    uint256 public constant FRACTIONALISED_AMOUNT = 1000000 ether;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of collection address to enumerable token Ids\\r\\n     */\\r\\n    mapping(address => EnumerableSet.UintSet) internal collectionToTokenIds;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of NFT collection address to BB20 token address\\r\\n     */\\r\\n    mapping(address => BB20) public nftAddressToTokenAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of collection address to boolean to check if collection is whitelisted\\r\\n     */\\r\\n    mapping(address => bool) public whitelisted;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Function to fractionalize NFTs into BB20 tokens\\r\\n     * @param _collectionAddress Address of NFT collection\\r\\n     * @param _tokenId Token Id of NFT to fractionalize\\r\\n     */\\r\\n    function fractionalizeNFT(address _collectionAddress, uint256 _tokenId) external override {\\r\\n        require(_collectionAddress != address(0), \\\"Invalid collection address\\\");\\r\\n        require(whitelisted[_collectionAddress], \\\"Collection not whitelisted\\\");\\r\\n        // Require transfer of NFT to this contract\\r\\n        IERC721Metadata(_collectionAddress).transferFrom(msg.sender, address(this), _tokenId);\\r\\n\\r\\n        // Add token id to enumerable set\\r\\n        EnumerableSet.add(collectionToTokenIds[_collectionAddress], _tokenId);\\r\\n        BB20 nftToken;\\r\\n        if (nftAddressToTokenAddress[_collectionAddress] == BB20(address(0))) {\\r\\n            string memory _name = concatenate(\\\"BB Fractionalized \\\", IERC721Metadata(_collectionAddress).name());\\r\\n            string memory _symbol = concatenate(\\\"bb\\\", IERC721Metadata(_collectionAddress).symbol());\\r\\n            // Create new BB20 contract\\r\\n            nftToken = new BB20(_name, _symbol, address(this));\\r\\n            nftAddressToTokenAddress[_collectionAddress] = nftToken;\\r\\n        } else {\\r\\n            nftToken = nftAddressToTokenAddress[_collectionAddress];\\r\\n        }\\r\\n\\r\\n        // Mint 1 million tokens to msg.sender\\r\\n        nftToken.mint(msg.sender, FRACTIONALISED_AMOUNT);\\r\\n        // Emit event\\r\\n        emit Fractionalised(_collectionAddress, address(nftToken), _tokenId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to reconstruct NFTs from BB20 tokens\\r\\n     * @param _collectionAddress Address of NFT collection\\r\\n     * @param _tokenId Token Id of NFT to reconstruct\\r\\n     */\\r\\n    function reconstructNFT(address _collectionAddress, uint256 _tokenId) external override {\\r\\n        require(_collectionAddress != address(0), \\\"Invalid collection address\\\");\\r\\n        // Require tokenId exists in enumerable set\\r\\n        require(EnumerableSet.contains(collectionToTokenIds[_collectionAddress], _tokenId), \\\"Token id does not exist\\\");\\r\\n        // Require transfer of 1 million equivalent tokens to this contract\\r\\n        require(\\r\\n            IERC20(nftAddressToTokenAddress[_collectionAddress]).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                FRACTIONALISED_AMOUNT\\r\\n            ),\\r\\n            \\\"Transfer failed\\\"\\r\\n        );\\r\\n        // Burn all the tokens\\r\\n        nftAddressToTokenAddress[_collectionAddress].burn(FRACTIONALISED_AMOUNT);\\r\\n        // Remove token id from enumerable set\\r\\n        EnumerableSet.contains(collectionToTokenIds[_collectionAddress], _tokenId);\\r\\n        // Transfer NFT to msg.sender\\r\\n        IERC721(_collectionAddress).transferFrom(address(this), msg.sender, _tokenId);\\r\\n        // Emit event\\r\\n        emit Redeemed(_collectionAddress, _tokenId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to whitelist NFT collection\\r\\n     * @param _collectionAddress Address of NFT collection\\r\\n     */\\r\\n    function whitelistNFT(address _collectionAddress) external override onlyOwner {\\r\\n        whitelisted[_collectionAddress] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to get token address from collection address\\r\\n     * @param _collectionAddress Address of NFT collection\\r\\n     */\\r\\n    function getTokenFromCollection(address _collectionAddress) external view override returns (IBB20) {\\r\\n        return nftAddressToTokenAddress[_collectionAddress];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to get all token ids from collection address that are in the contract\\r\\n     * @param _collectionAddress Address of NFT collection\\r\\n     */\\r\\n    function getIds(address _collectionAddress) external view returns (uint256[] memory) {\\r\\n        return collectionToTokenIds[_collectionAddress].toArray();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a concatenated string of a and b\\r\\n     * @param _a string a\\r\\n     * @param _b string b\\r\\n     */\\r\\n    function concatenate(string memory _a, string memory _b) internal pure returns (string memory) {\\r\\n        return string(abi.encodePacked(_a, _b));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b717b327f1337fb51a143bdb6e9ee40a61ef2ec3ef5d7c959e76e0951390823\",\"license\":\"MIT\"},\"contracts/interfaces/IBB20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title BB20 - Fractionalized NFT Token\\r\\n/// @dev Only can be issued by the BluebirdGrinder\\r\\ninterface IBB20 is IERC20 {\\r\\n    event Minted(address to, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Mint BB20 Tokens\\r\\n     */\\r\\n    function mint(address _receipient, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice  Burn `amount` tokens and decreasing the total supply.\\r\\n     * @param amount Amount of tokens to burn\\r\\n     */\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x5e5bfdd85212cc48b8e8be8d882c043349a7968b0981b08c9ddf4c33a7fbf73e\",\"license\":\"MIT\"},\"contracts/interfaces/IBluebirdGrinder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { IBB20 } from \\\"./IBB20.sol\\\";\\r\\n\\r\\n/// @title IBluebird Grinder\\r\\n/// @notice The Bluebird Grinder will break down an NFT into shards\\r\\ninterface IBluebirdGrinder {\\r\\n    event Redeemed(address indexed _collectionAddress, uint256 _tokenId, address _to);\\r\\n\\r\\n    event Fractionalised(\\r\\n        address indexed _collectionAddress,\\r\\n        address indexed _nftTokenAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _to\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Convert 1 ERC721 Token into X amount of BB20 Tokens\\r\\n     * @param _collectionAddress Collection Address\\r\\n     * @param _tokenId Token Id of collection address\\r\\n     */\\r\\n    function fractionalizeNFT(address _collectionAddress, uint256 _tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Convert X amount of BB20 Tokens into 1 ERC721 Token\\r\\n     * @param _collectionAddress Collection address of the fractionalized NFT\\r\\n     * @param _tokenId Token ID of choice in the vaule\\r\\n     */\\r\\n    function reconstructNFT(address _collectionAddress, uint256 _tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Whitelist NFT Collection\\r\\n     * @param _collectionAddress Address of the NFT collection to be whitelisted\\r\\n     */\\r\\n    function whitelistNFT(address _collectionAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Check if BB20 token exists given collection address\\r\\n     * @param _collectionAddress Address of the NFT collection\\r\\n     */\\r\\n    function getTokenFromCollection(address _collectionAddress) external view returns (IBB20);\\r\\n}\\r\\n\",\"keccak256\":\"0x5298011f0d8ac9a0e7bd532edf8ff27ed2e49bfc8f1c2f5c2c1e5ae6cec3fb8c\",\"license\":\"MIT\"},\"contracts/utils/SetUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary SetUtils {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /// @dev Converst an iterable set of addresses to a corresponding array\\n    function toArray(EnumerableSet.AddressSet storage _set) internal view returns (address[] memory) {\\n        uint256 numElements = _set.length();\\n        address[] memory elements = new address[](numElements);\\n        for (uint256 i = 0; i < numElements; ++i) {\\n            elements[i] = _set.at(i);\\n        }\\n        return elements;\\n    }\\n\\n    /// @dev Converst an iterable set of uint to a corresponding array\\n    function toArray(EnumerableSet.UintSet storage _set) internal view returns (uint256[] memory) {\\n        uint256 numElements = _set.length();\\n        uint256[] memory elements = new uint256[](numElements);\\n        for (uint256 i = 0; i < numElements; ++i) {\\n            elements[i] = _set.at(i);\\n        }\\n        return elements;\\n    }\\n}\\n\",\"keccak256\":\"0x1f86730e1bfcbc7879fefba28ac74b4a7afd1bbb0dfe501af624de922e2b5a36\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611d898061007e6000396000f3fe60806040523480156200001157600080fd5b5060043610620000b75760003560e01c80638da5cb5b116200007a5780638da5cb5b1462000177578063b14dcafa1462000189578063bcdbfe6814620001b5578063d936547e14620001cc578063eb617ea01462000203578063f2fde38b146200021a57600080fd5b80632671b0d814620000bc5780633200bddf14620000eb5780633d4705b21462000133578063715018a6146200014c5780637613e63a1462000156575b600080fd5b620000d3620000cd36600462000c5e565b62000231565b604051620000e2919062000c7c565b60405180910390f35b6200011a620000fc36600462000c5e565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b039091168152602001620000e2565b6200014a6200014436600462000cc2565b6200025d565b005b6200014a62000620565b6200016869d3c21bcecceda100000081565b604051908152602001620000e2565b6000546001600160a01b03166200011a565b6200011a6200019a36600462000c5e565b6002602052600090815260409020546001600160a01b031681565b6200014a620001c636600462000c5e565b62000638565b620001f2620001dd36600462000c5e565b60036020526000908152604090205460ff1681565b6040519015158152602001620000e2565b6200014a6200021436600462000cc2565b62000666565b6200014a6200022b36600462000c5e565b62000965565b6001600160a01b03811660009081526001602052604090206060906200025790620009e4565b92915050565b6001600160a01b038216620002b95760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420636f6c6c656374696f6e206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b03821660009081526003602052604090205460ff16620003235760405162461bcd60e51b815260206004820152601a60248201527f436f6c6c656374696f6e206e6f742077686974656c69737465640000000000006044820152606401620002b0565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd90606401600060405180830381600087803b1580156200037257600080fd5b505af115801562000387573d6000803e3d6000fd5b5050506001600160a01b0383166000908152600160205260409020620003af91508262000a93565b506001600160a01b038281166000908152600260205260408120549091166200054c57600062000472604051806040016040528060128152602001710212110233930b1ba34b7b730b634bd32b2160751b815250856001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000442573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200046c919081019062000d38565b62000aa8565b90506000620004d460405180604001604052806002815260200161313160f11b815250866001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000442573d6000803e3d6000fd5b9050818130604051620004e79062000c33565b620004f59392919062000e1f565b604051809103906000f08015801562000512573d6000803e3d6000fd5b506001600160a01b03868116600090815260026020526040902080546001600160a01b031916918316919091179055925062000569915050565b506001600160a01b03808316600090815260026020526040902054165b6040516340c10f1960e01b815233600482015269d3c21bcecceda100000060248201526001600160a01b038216906340c10f1990604401600060405180830381600087803b158015620005bb57600080fd5b505af1158015620005d0573d6000803e3d6000fd5b5050604080518581523360208201526001600160a01b038086169450871692507f2690901cb58205ffdd1f99ca905241dce4edf085af5b52d2c064bf1b673a1130910160405180910390a3505050565b6200062a62000ad6565b62000636600062000b32565b565b6200064262000ad6565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b6001600160a01b038216620006be5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420636f6c6c656374696f6e20616464726573730000000000006044820152606401620002b0565b6001600160a01b0382166000908152600160205260409020620006e2908262000b82565b620007305760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20696420646f6573206e6f742065786973740000000000000000006044820152606401620002b0565b6001600160a01b03828116600090815260026020526040908190205490516323b872dd60e01b815233600482015230602482015269d3c21bcecceda100000060448201529116906323b872dd906064016020604051808303816000875af1158015620007a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007c6919062000e61565b620008065760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401620002b0565b6001600160a01b0382811660009081526002602052604090819020549051630852cd8d60e31b815269d3c21bcecceda100000060048201529116906342966c68906024016020604051808303816000875af11580156200086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000890919062000e61565b506001600160a01b0382166000908152600160205260409020620008b5908262000b82565b506040516323b872dd60e01b8152306004820152336024820152604481018290526001600160a01b038316906323b872dd90606401600060405180830381600087803b1580156200090557600080fd5b505af11580156200091a573d6000803e3d6000fd5b5050604080518481523360208201526001600160a01b03861693507f753fa485a7db01b79a5bf240795c914378b8fb5fcb2a848f2acd51aa6804adbf92500160405180910390a25050565b6200096f62000ad6565b6001600160a01b038116620009d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620002b0565b620009e18162000b32565b50565b60606000620009f38362000b9b565b905060008167ffffffffffffffff81111562000a135762000a1362000cef565b60405190808252806020026020018201604052801562000a3d578160200160208202803683370190505b50905060005b8281101562000a8b5762000a58858262000ba6565b82828151811062000a6d5762000a6d62000e85565b602090810291909101015262000a838162000e9b565b905062000a43565b509392505050565b600062000aa1838362000bb4565b9392505050565b6060828260405160200162000abf92919062000ec5565b604051602081830303815290604052905092915050565b6000546001600160a01b03163314620006365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600183016020526040812054151562000aa1565b600062000257825490565b600062000aa1838362000c06565b600081815260018301602052604081205462000bfd5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000257565b50600062000257565b600082600001828154811062000c205762000c2062000e85565b9060005260206000200154905092915050565b610e5b8062000ef983390190565b80356001600160a01b038116811462000c5957600080fd5b919050565b60006020828403121562000c7157600080fd5b62000aa18262000c41565b6020808252825182820181905260009190848201906040850190845b8181101562000cb65783518352928401929184019160010162000c98565b50909695505050505050565b6000806040838503121562000cd657600080fd5b62000ce18362000c41565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000d2257818101518382015260200162000d08565b8381111562000d32576000848401525b50505050565b60006020828403121562000d4b57600080fd5b815167ffffffffffffffff8082111562000d6457600080fd5b818401915084601f83011262000d7957600080fd5b81518181111562000d8e5762000d8e62000cef565b604051601f8201601f19908116603f0116810190838211818310171562000db95762000db962000cef565b8160405282815287602084870101111562000dd357600080fd5b62000de683602083016020880162000d05565b979650505050505050565b6000815180845262000e0b81602086016020860162000d05565b601f01601f19169290920160200192915050565b60608152600062000e34606083018662000df1565b828103602084015262000e48818662000df1565b91505060018060a01b0383166040830152949350505050565b60006020828403121562000e7457600080fd5b8151801515811462000aa157600080fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141562000ebe57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000835162000ed981846020880162000d05565b83519083019062000eef81836020880162000d05565b0194935050505056fe60806040523480156200001157600080fd5b5060405162000e5b38038062000e5b833981016040819052620000349162000203565b8251839083906200004d90600390602085019062000090565b5080516200006390600490602084019062000090565b5050600580546001600160a01b0319166001600160a01b03939093169290921790915550620002cd915050565b8280546200009e9062000290565b90600052602060002090601f016020900481019282620000c257600085556200010d565b82601f10620000dd57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010d578251825591602001919060010190620000f0565b506200011b9291506200011f565b5090565b5b808211156200011b576000815560010162000120565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015e57600080fd5b81516001600160401b03808211156200017b576200017b62000136565b604051601f8301601f19908116603f01168101908282118183101715620001a657620001a662000136565b81604052838152602092508683858801011115620001c357600080fd5b600091505b83821015620001e75785820183015181830184015290820190620001c8565b83821115620001f95760008385830101525b9695505050505050565b6000806000606084860312156200021957600080fd5b83516001600160401b03808211156200023157600080fd5b6200023f878388016200014c565b945060208601519150808211156200025657600080fd5b5062000265868287016200014c565b604086015190935090506001600160a01b03811681146200028557600080fd5b809150509250925092565b600181811c90821680620002a557607f821691505b60208210811415620002c757634e487b7160e01b600052602260045260246000fd5b50919050565b610b7e80620002dd6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806342966c681161008c578063a457c2d711610066578063a457c2d7146101d0578063a9059cbb146101e3578063dd62ed3e146101f6578063e29e49fb1461020957600080fd5b806342966c681461018c57806370a082311461019f57806395d89b41146101c857600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016457806340c10f191461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610234565b60405161010491906109a7565b60405180910390f35b61012061011b366004610a13565b6102c6565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610a3d565b6102de565b60405160128152602001610104565b610120610172366004610a13565b610302565b61018a610185366004610a13565b610324565b005b61012061019a366004610a79565b61033a565b6101346101ad366004610a92565b6001600160a01b031660009081526020819052604090205490565b6100f7610357565b6101206101de366004610a13565b610366565b6101206101f1366004610a13565b6103e6565b610134610204366004610ab4565b6103f4565b60055461021c906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b60606003805461024390610ae7565b80601f016020809104026020016040519081016040528092919081815260200182805461026f90610ae7565b80156102bc5780601f10610291576101008083540402835291602001916102bc565b820191906000526020600020905b81548152906001019060200180831161029f57829003601f168201915b5050505050905090565b6000336102d481858561041f565b5060019392505050565b6000336102ec858285610544565b6102f78585856105be565b506001949350505050565b6000336102d481858561031583836103f4565b61031f9190610b22565b61041f565b61032c610762565b61033682826107be565b5050565b6000610344610762565b61034e338361087d565b5060015b919050565b60606004805461024390610ae7565b6000338161037482866103f4565b9050838110156103d95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102f7828686840361041f565b6000336102d48185856105be565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104815760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d0565b6001600160a01b0382166104e25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061055084846103f4565b905060001981146105b857818110156105ab5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103d0565b6105b8848484840361041f565b50505050565b6001600160a01b0383166106225760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d0565b6001600160a01b0382166106845760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d0565b6001600160a01b038316600090815260208190526040902054818110156106fc5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d0565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36105b8565b6005546001600160a01b031633146107bc5760405162461bcd60e51b815260206004820152601a60248201527f424232303a204f6e6c79206772696e64657220616c6c6f77656400000000000060448201526064016103d0565b565b6001600160a01b0382166108145760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103d0565b80600260008282546108269190610b22565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166108dd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d0565b6001600160a01b038216600090815260208190526040902054818110156109515760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d0565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610537565b600060208083528351808285015260005b818110156109d4578581018301518582016040015282016109b8565b818111156109e6576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461035257600080fd5b60008060408385031215610a2657600080fd5b610a2f836109fc565b946020939093013593505050565b600080600060608486031215610a5257600080fd5b610a5b846109fc565b9250610a69602085016109fc565b9150604084013590509250925092565b600060208284031215610a8b57600080fd5b5035919050565b600060208284031215610aa457600080fd5b610aad826109fc565b9392505050565b60008060408385031215610ac757600080fd5b610ad0836109fc565b9150610ade602084016109fc565b90509250929050565b600181811c90821680610afb57607f821691505b60208210811415610b1c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610b4357634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f3a9feb8cb65bd08b82ed48a27e96c918b872df180318746a183aec9f1b99f2d64736f6c634300080b0033a2646970667358221220b2312808ed7688ecb283e23d9ba1f9ec5d269543755bd93d40e1c7b1e421ac3f64736f6c634300080b0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b75760003560e01c80638da5cb5b116200007a5780638da5cb5b1462000177578063b14dcafa1462000189578063bcdbfe6814620001b5578063d936547e14620001cc578063eb617ea01462000203578063f2fde38b146200021a57600080fd5b80632671b0d814620000bc5780633200bddf14620000eb5780633d4705b21462000133578063715018a6146200014c5780637613e63a1462000156575b600080fd5b620000d3620000cd36600462000c5e565b62000231565b604051620000e2919062000c7c565b60405180910390f35b6200011a620000fc36600462000c5e565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b039091168152602001620000e2565b6200014a6200014436600462000cc2565b6200025d565b005b6200014a62000620565b6200016869d3c21bcecceda100000081565b604051908152602001620000e2565b6000546001600160a01b03166200011a565b6200011a6200019a36600462000c5e565b6002602052600090815260409020546001600160a01b031681565b6200014a620001c636600462000c5e565b62000638565b620001f2620001dd36600462000c5e565b60036020526000908152604090205460ff1681565b6040519015158152602001620000e2565b6200014a6200021436600462000cc2565b62000666565b6200014a6200022b36600462000c5e565b62000965565b6001600160a01b03811660009081526001602052604090206060906200025790620009e4565b92915050565b6001600160a01b038216620002b95760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420636f6c6c656374696f6e206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b03821660009081526003602052604090205460ff16620003235760405162461bcd60e51b815260206004820152601a60248201527f436f6c6c656374696f6e206e6f742077686974656c69737465640000000000006044820152606401620002b0565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd90606401600060405180830381600087803b1580156200037257600080fd5b505af115801562000387573d6000803e3d6000fd5b5050506001600160a01b0383166000908152600160205260409020620003af91508262000a93565b506001600160a01b038281166000908152600260205260408120549091166200054c57600062000472604051806040016040528060128152602001710212110233930b1ba34b7b730b634bd32b2160751b815250856001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000442573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200046c919081019062000d38565b62000aa8565b90506000620004d460405180604001604052806002815260200161313160f11b815250866001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000442573d6000803e3d6000fd5b9050818130604051620004e79062000c33565b620004f59392919062000e1f565b604051809103906000f08015801562000512573d6000803e3d6000fd5b506001600160a01b03868116600090815260026020526040902080546001600160a01b031916918316919091179055925062000569915050565b506001600160a01b03808316600090815260026020526040902054165b6040516340c10f1960e01b815233600482015269d3c21bcecceda100000060248201526001600160a01b038216906340c10f1990604401600060405180830381600087803b158015620005bb57600080fd5b505af1158015620005d0573d6000803e3d6000fd5b5050604080518581523360208201526001600160a01b038086169450871692507f2690901cb58205ffdd1f99ca905241dce4edf085af5b52d2c064bf1b673a1130910160405180910390a3505050565b6200062a62000ad6565b62000636600062000b32565b565b6200064262000ad6565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b6001600160a01b038216620006be5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420636f6c6c656374696f6e20616464726573730000000000006044820152606401620002b0565b6001600160a01b0382166000908152600160205260409020620006e2908262000b82565b620007305760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20696420646f6573206e6f742065786973740000000000000000006044820152606401620002b0565b6001600160a01b03828116600090815260026020526040908190205490516323b872dd60e01b815233600482015230602482015269d3c21bcecceda100000060448201529116906323b872dd906064016020604051808303816000875af1158015620007a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007c6919062000e61565b620008065760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401620002b0565b6001600160a01b0382811660009081526002602052604090819020549051630852cd8d60e31b815269d3c21bcecceda100000060048201529116906342966c68906024016020604051808303816000875af11580156200086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000890919062000e61565b506001600160a01b0382166000908152600160205260409020620008b5908262000b82565b506040516323b872dd60e01b8152306004820152336024820152604481018290526001600160a01b038316906323b872dd90606401600060405180830381600087803b1580156200090557600080fd5b505af11580156200091a573d6000803e3d6000fd5b5050604080518481523360208201526001600160a01b03861693507f753fa485a7db01b79a5bf240795c914378b8fb5fcb2a848f2acd51aa6804adbf92500160405180910390a25050565b6200096f62000ad6565b6001600160a01b038116620009d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620002b0565b620009e18162000b32565b50565b60606000620009f38362000b9b565b905060008167ffffffffffffffff81111562000a135762000a1362000cef565b60405190808252806020026020018201604052801562000a3d578160200160208202803683370190505b50905060005b8281101562000a8b5762000a58858262000ba6565b82828151811062000a6d5762000a6d62000e85565b602090810291909101015262000a838162000e9b565b905062000a43565b509392505050565b600062000aa1838362000bb4565b9392505050565b6060828260405160200162000abf92919062000ec5565b604051602081830303815290604052905092915050565b6000546001600160a01b03163314620006365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600183016020526040812054151562000aa1565b600062000257825490565b600062000aa1838362000c06565b600081815260018301602052604081205462000bfd5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000257565b50600062000257565b600082600001828154811062000c205762000c2062000e85565b9060005260206000200154905092915050565b610e5b8062000ef983390190565b80356001600160a01b038116811462000c5957600080fd5b919050565b60006020828403121562000c7157600080fd5b62000aa18262000c41565b6020808252825182820181905260009190848201906040850190845b8181101562000cb65783518352928401929184019160010162000c98565b50909695505050505050565b6000806040838503121562000cd657600080fd5b62000ce18362000c41565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000d2257818101518382015260200162000d08565b8381111562000d32576000848401525b50505050565b60006020828403121562000d4b57600080fd5b815167ffffffffffffffff8082111562000d6457600080fd5b818401915084601f83011262000d7957600080fd5b81518181111562000d8e5762000d8e62000cef565b604051601f8201601f19908116603f0116810190838211818310171562000db95762000db962000cef565b8160405282815287602084870101111562000dd357600080fd5b62000de683602083016020880162000d05565b979650505050505050565b6000815180845262000e0b81602086016020860162000d05565b601f01601f19169290920160200192915050565b60608152600062000e34606083018662000df1565b828103602084015262000e48818662000df1565b91505060018060a01b0383166040830152949350505050565b60006020828403121562000e7457600080fd5b8151801515811462000aa157600080fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141562000ebe57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000835162000ed981846020880162000d05565b83519083019062000eef81836020880162000d05565b0194935050505056fe60806040523480156200001157600080fd5b5060405162000e5b38038062000e5b833981016040819052620000349162000203565b8251839083906200004d90600390602085019062000090565b5080516200006390600490602084019062000090565b5050600580546001600160a01b0319166001600160a01b03939093169290921790915550620002cd915050565b8280546200009e9062000290565b90600052602060002090601f016020900481019282620000c257600085556200010d565b82601f10620000dd57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010d578251825591602001919060010190620000f0565b506200011b9291506200011f565b5090565b5b808211156200011b576000815560010162000120565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015e57600080fd5b81516001600160401b03808211156200017b576200017b62000136565b604051601f8301601f19908116603f01168101908282118183101715620001a657620001a662000136565b81604052838152602092508683858801011115620001c357600080fd5b600091505b83821015620001e75785820183015181830184015290820190620001c8565b83821115620001f95760008385830101525b9695505050505050565b6000806000606084860312156200021957600080fd5b83516001600160401b03808211156200023157600080fd5b6200023f878388016200014c565b945060208601519150808211156200025657600080fd5b5062000265868287016200014c565b604086015190935090506001600160a01b03811681146200028557600080fd5b809150509250925092565b600181811c90821680620002a557607f821691505b60208210811415620002c757634e487b7160e01b600052602260045260246000fd5b50919050565b610b7e80620002dd6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806342966c681161008c578063a457c2d711610066578063a457c2d7146101d0578063a9059cbb146101e3578063dd62ed3e146101f6578063e29e49fb1461020957600080fd5b806342966c681461018c57806370a082311461019f57806395d89b41146101c857600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016457806340c10f191461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610234565b60405161010491906109a7565b60405180910390f35b61012061011b366004610a13565b6102c6565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610a3d565b6102de565b60405160128152602001610104565b610120610172366004610a13565b610302565b61018a610185366004610a13565b610324565b005b61012061019a366004610a79565b61033a565b6101346101ad366004610a92565b6001600160a01b031660009081526020819052604090205490565b6100f7610357565b6101206101de366004610a13565b610366565b6101206101f1366004610a13565b6103e6565b610134610204366004610ab4565b6103f4565b60055461021c906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b60606003805461024390610ae7565b80601f016020809104026020016040519081016040528092919081815260200182805461026f90610ae7565b80156102bc5780601f10610291576101008083540402835291602001916102bc565b820191906000526020600020905b81548152906001019060200180831161029f57829003601f168201915b5050505050905090565b6000336102d481858561041f565b5060019392505050565b6000336102ec858285610544565b6102f78585856105be565b506001949350505050565b6000336102d481858561031583836103f4565b61031f9190610b22565b61041f565b61032c610762565b61033682826107be565b5050565b6000610344610762565b61034e338361087d565b5060015b919050565b60606004805461024390610ae7565b6000338161037482866103f4565b9050838110156103d95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102f7828686840361041f565b6000336102d48185856105be565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104815760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d0565b6001600160a01b0382166104e25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061055084846103f4565b905060001981146105b857818110156105ab5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103d0565b6105b8848484840361041f565b50505050565b6001600160a01b0383166106225760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d0565b6001600160a01b0382166106845760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d0565b6001600160a01b038316600090815260208190526040902054818110156106fc5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d0565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36105b8565b6005546001600160a01b031633146107bc5760405162461bcd60e51b815260206004820152601a60248201527f424232303a204f6e6c79206772696e64657220616c6c6f77656400000000000060448201526064016103d0565b565b6001600160a01b0382166108145760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103d0565b80600260008282546108269190610b22565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166108dd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d0565b6001600160a01b038216600090815260208190526040902054818110156109515760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d0565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610537565b600060208083528351808285015260005b818110156109d4578581018301518582016040015282016109b8565b818111156109e6576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461035257600080fd5b60008060408385031215610a2657600080fd5b610a2f836109fc565b946020939093013593505050565b600080600060608486031215610a5257600080fd5b610a5b846109fc565b9250610a69602085016109fc565b9150604084013590509250925092565b600060208284031215610a8b57600080fd5b5035919050565b600060208284031215610aa457600080fd5b610aad826109fc565b9392505050565b60008060408385031215610ac757600080fd5b610ad0836109fc565b9150610ade602084016109fc565b90509250929050565b600181811c90821680610afb57607f821691505b60208210811415610b1c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610b4357634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f3a9feb8cb65bd08b82ed48a27e96c918b872df180318746a183aec9f1b99f2d64736f6c634300080b0033a2646970667358221220b2312808ed7688ecb283e23d9ba1f9ec5d269543755bd93d40e1c7b1e421ac3f64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fractionalizeNFT(address,uint256)": {
        "params": {
          "_collectionAddress": "Address of NFT collection",
          "_tokenId": "Token Id of NFT to fractionalize"
        }
      },
      "getIds(address)": {
        "params": {
          "_collectionAddress": "Address of NFT collection"
        }
      },
      "getTokenFromCollection(address)": {
        "params": {
          "_collectionAddress": "Address of NFT collection"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reconstructNFT(address,uint256)": {
        "params": {
          "_collectionAddress": "Address of NFT collection",
          "_tokenId": "Token Id of NFT to reconstruct"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelistNFT(address)": {
        "params": {
          "_collectionAddress": "Address of NFT collection"
        }
      }
    },
    "stateVariables": {
      "FRACTIONALISED_AMOUNT": {
        "details": "1 NFT = 1 million BB20 tokens"
      }
    },
    "title": "BluebirdGrinder - Contract to fractionalize NFTs into BB20 tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FRACTIONALISED_AMOUNT()": {
        "notice": "Amount of BB20 tokens to mint per NFT"
      },
      "fractionalizeNFT(address,uint256)": {
        "notice": "Function to fractionalize NFTs into BB20 tokens"
      },
      "getIds(address)": {
        "notice": "Function to get all token ids from collection address that are in the contract"
      },
      "getTokenFromCollection(address)": {
        "notice": "Function to get token address from collection address"
      },
      "nftAddressToTokenAddress(address)": {
        "notice": "Mapping of NFT collection address to BB20 token address"
      },
      "reconstructNFT(address,uint256)": {
        "notice": "Function to reconstruct NFTs from BB20 tokens"
      },
      "whitelistNFT(address)": {
        "notice": "Function to whitelist NFT collection"
      },
      "whitelisted(address)": {
        "notice": "Mapping of collection address to boolean to check if collection is whitelisted"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 148,
        "contract": "contracts/BluebirdGrinder.sol:BluebirdGrinder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1909,
        "contract": "contracts/BluebirdGrinder.sol:BluebirdGrinder",
        "label": "collectionToTokenIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)1657_storage)"
      },
      {
        "astId": 1915,
        "contract": "contracts/BluebirdGrinder.sol:BluebirdGrinder",
        "label": "nftAddressToTokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_contract(BB20)1876)"
      },
      {
        "astId": 1920,
        "contract": "contracts/BluebirdGrinder.sol:BluebirdGrinder",
        "label": "whitelisted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BB20)1876": {
        "encoding": "inplace",
        "label": "contract BB20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(BB20)1876)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract BB20)",
        "numberOfBytes": "32",
        "value": "t_contract(BB20)1876"
      },
      "t_mapping(t_address,t_struct(UintSet)1657_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1657_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)1185_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1180,
            "contract": "contracts/BluebirdGrinder.sol:BluebirdGrinder",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1184,
            "contract": "contracts/BluebirdGrinder.sol:BluebirdGrinder",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)1657_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 1656,
            "contract": "contracts/BluebirdGrinder.sol:BluebirdGrinder",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1185_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}