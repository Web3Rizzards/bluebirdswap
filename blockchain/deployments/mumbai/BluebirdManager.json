{
  "address": "0xbF0f6C964656D9493B831E72606E4b192AE82cA2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOptionPricing",
          "name": "_optionPricing",
          "type": "address"
        },
        {
          "internalType": "contract IBluebirdGrinder",
          "name": "_grinder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "Bought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_nftToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        }
      ],
      "name": "CallOptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_profits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_profit",
          "type": "bool"
        }
      ],
      "name": "Exercised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_opt",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_nftToken",
          "type": "address"
        }
      ],
      "name": "OptionContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_nftToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        }
      ],
      "name": "PutOptionCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftFeedAddress",
          "type": "address"
        }
      ],
      "name": "createOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "emitBoughtEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        }
      ],
      "name": "emitCallOptionCreatedEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pnl",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_profit",
          "type": "bool"
        }
      ],
      "name": "emitExerciseEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        }
      ],
      "name": "emitPutOptionCreatedEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOptArray",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grinder",
      "outputs": [
        {
          "internalType": "contract IBluebirdGrinder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "optionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionPricing",
      "outputs": [
        {
          "internalType": "contract IOptionPricing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x988a0307aa3a868121e892439d1be14145d8c94f6961684ef100352a4ef02671",
  "receipt": {
    "to": null,
    "from": "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "contractAddress": "0xbF0f6C964656D9493B831E72606E4b192AE82cA2",
    "transactionIndex": 6,
    "gasUsed": "3080413",
    "logsBloom": "0x
    "blockHash": "0x4c810452e0c04ad2037913b2352f018bef3a58dceae1e29803aceab1e5822ced",
    "transactionHash": "0x988a0307aa3a868121e892439d1be14145d8c94f6961684ef100352a4ef02671",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 32720065,
        "transactionHash": "0x988a0307aa3a868121e892439d1be14145d8c94f6961684ef100352a4ef02671",
        "address": "0xbF0f6C964656D9493B831E72606E4b192AE82cA2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x4c810452e0c04ad2037913b2352f018bef3a58dceae1e29803aceab1e5822ced"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 32720065,
        "transactionHash": "0x988a0307aa3a868121e892439d1be14145d8c94f6961684ef100352a4ef02671",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000106a6dcff093000000000000000000000000000000000000000000000000000a6697f2cf2b6bb7000000000000000000000000000000000000000000002e455829d7e3a1cc0be40000000000000000000000000000000000000000000000000a562d84ff3ad8b7000000000000000000000000000000000000000000002e45583a425171bc9ee4",
        "logIndex": 56,
        "blockHash": "0x4c810452e0c04ad2037913b2352f018bef3a58dceae1e29803aceab1e5822ced"
      }
    ],
    "blockNumber": 32720065,
    "cumulativeGasUsed": "9993093",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd79EEB728Fe4Fb7229Fa30D0e15A5C91a1D63C63",
    "0x7A5A68f723000b6F99863464d1C3483a4A1A549c"
  ],
  "numDeployments": 1,
  "solcInputHash": "bb9fe4e66b0d4e4d84c249d167520feb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOptionPricing\",\"name\":\"_optionPricing\",\"type\":\"address\"},{\"internalType\":\"contract IBluebirdGrinder\",\"name\":\"_grinder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"CallOptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_profits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_profit\",\"type\":\"bool\"}],\"name\":\"Exercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_opt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"}],\"name\":\"OptionContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"PutOptionCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftFeedAddress\",\"type\":\"address\"}],\"name\":\"createOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"emitBoughtEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"emitCallOptionCreatedEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pnl\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_profit\",\"type\":\"bool\"}],\"name\":\"emitExerciseEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"emitPutOptionCreatedEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grinder\",\"outputs\":[{\"internalType\":\"contract IBluebirdGrinder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"optionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionPricing\",\"outputs\":[{\"internalType\":\"contract IOptionPricing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_grinder\":\"Bluebird Grinder Contract\",\"_optionPricing\":\"Option Pricing Contract\"}},\"createOptions(address,address)\":{\"params\":{\"_collectionAddress\":\"Collection Address\",\"_nftFeedAddress\":\"Chainlink Feed Address\"}},\"emitBoughtEvent(address,address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount\",\"_contractAddress\":\"Address of options contract\",\"_epoch\":\"Epoch\",\"_order\":\"Order ID\",\"_premium\":\"Premium\",\"_timestamp\":\"Timestamp\",\"_user\":\"User Address\"}},\"emitCallOptionCreatedEvent(address,uint256,uint256,address,uint256,uint256,uint256)\":{\"params\":{\"_contractAddress\":\"Address of options contract\",\"_epoch\":\"Epoch\",\"_expiry\":\"Expiry Time\",\"_nftToken\":\"NFT Token Address\",\"_optionId\":\"Option ID\",\"_start\":\"Start Time\",\"_strikePrice\":\"Strike Price\"}},\"emitExerciseEvent(address,address,uint256,uint256,bool)\":{\"params\":{\"_contractAddress\":\"Address of options contract\",\"_id\":\"Order ID\",\"_pnl\":\"PnL\",\"_profit\":\"Profit\",\"_user\":\"User Address\"}},\"emitPutOptionCreatedEvent(address,uint256,uint256,address,uint256,uint256,uint256)\":{\"params\":{\"_contractAddress\":\"Address of options contract\",\"_epoch\":\"Epoch\",\"_expiry\":\"Expiry Time\",\"_nftToken\":\"NFT Token Address\",\"_optionId\":\"Option ID\",\"_start\":\"Start Time\",\"_strikePrice\":\"Strike Price\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BluebirdManager - Manager contracts for Bluebird Options individual contracts\",\"version\":1},\"userdoc\":{\"events\":{\"Bought(address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when an option is bought\"},\"CallOptionCreated(address,uint256,uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Emit when Call Option Contract is Created\"},\"Exercised(address,address,uint256,uint256,bool)\":{\"notice\":\"Emitted when a user claims profits\"},\"OptionContractCreated(address,address,address)\":{\"notice\":\"Emitted when new option contract is created\"},\"PutOptionCreated(address,uint256,uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Emit when Put option contract is Created\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor for Bluebird Manager\"},\"createOptions(address,address)\":{\"notice\":\"Create a Put and Call Options for a specified collection for the current epoch\"},\"emitBoughtEvent(address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Proxy function to emit event from options contract\"},\"emitCallOptionCreatedEvent(address,uint256,uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Proxy function to emit event from options contract\"},\"emitExerciseEvent(address,address,uint256,uint256,bool)\":{\"notice\":\"Proxy function to emit event from options contract\"},\"emitPutOptionCreatedEvent(address,uint256,uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Proxy function to emit event from options contract\"},\"getOptArray()\":{\"notice\":\"Function to retrieve options array\"},\"grinder()\":{\"notice\":\"Bluebird Grinder Contract\"},\"optionExists(address)\":{\"notice\":\"Mapping of NFT token address to boolean to check if options have been created\"},\"optionPricing()\":{\"notice\":\"Option Pricing Contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BluebirdManager.sol\":\"BluebirdManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/BB20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interfaces/IBB20.sol\\\";\\r\\n\\r\\n/// @title BB20 - Fractionalized NFT Token\\r\\n/// @dev Only can be issued by the BluebirdGrinder\\r\\ncontract BB20 is IBB20, ERC20 {\\r\\n    /**\\r\\n     * @notice Address of the BluebirdGrinder contract\\r\\n     */\\r\\n    address public grinder;\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to check if is called by the BluebirdGrinder\\r\\n     */\\r\\n    modifier onlyGrinder() {\\r\\n        _isFactory();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor of the BB20 contract\\r\\n     * @param _name Name of the token\\r\\n     * @param _symbol Symbol of the token\\r\\n     * @param _grinder Address of the BluebirdGrinder contract\\r\\n     */\\r\\n    constructor(string memory _name, string memory _symbol, address _grinder) ERC20(_name, _symbol) {\\r\\n        grinder = _grinder;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint BB20 Tokens\\r\\n     * @param _receipient Address of the receipient\\r\\n     * @param _amount Amount of tokens to mint\\r\\n     * @dev Only can be called by the BluebirdGrinder\\r\\n     */\\r\\n    function mint(address _receipient, uint256 _amount) external onlyGrinder {\\r\\n        _mint(_receipient, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Burn `amount` tokens and decreasing the total supply.\\r\\n     * @param amount Amount of tokens to burn\\r\\n     * @dev Only can be called by the BluebirdGrinder\\r\\n     */\\r\\n    function burn(uint256 amount) external override onlyGrinder returns (bool) {\\r\\n        _burn(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used in modifier to check if is called by the BluebirdGrinder\\r\\n     */\\r\\n    function _isFactory() internal view {\\r\\n        require(msg.sender == grinder, \\\"BB20: Only grinder allowed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x341d8568732097b9242c3ea9e90a9ef2c7415992e966acab3515e476b37398a4\",\"license\":\"MIT\"},\"contracts/BluebirdManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./interfaces/IBluebirdManager.sol\\\";\\r\\nimport \\\"./BluebirdOptions.sol\\\";\\r\\nimport \\\"./BB20.sol\\\";\\r\\nimport \\\"./interfaces/IBluebirdGrinder.sol\\\";\\r\\nimport \\\"./utils/SetUtils.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n/// @title BluebirdManager - Manager contracts for Bluebird Options individual contracts\\r\\n\\r\\ncontract BluebirdManager is IBluebirdManager, Ownable {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using SetUtils for EnumerableSet.AddressSet;\\r\\n    /**\\r\\n     * @notice Array of all options contract addresses\\r\\n     */\\r\\n    EnumerableSet.AddressSet internal optArray;\\r\\n\\r\\n    /**\\r\\n     * @notice Option Pricing Contract\\r\\n     */\\r\\n    IOptionPricing public optionPricing;\\r\\n\\r\\n    /**\\r\\n     * @notice Bluebird Grinder Contract\\r\\n     */\\r\\n    IBluebirdGrinder public grinder;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of NFT token address to boolean to check if options have been created\\r\\n     */\\r\\n    mapping(address => bool) public optionExists;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor for Bluebird Manager\\r\\n     * @param _optionPricing Option Pricing Contract\\r\\n     * @param _grinder Bluebird Grinder Contract\\r\\n     */\\r\\n    constructor(IOptionPricing _optionPricing, IBluebirdGrinder _grinder) {\\r\\n        optionPricing = _optionPricing;\\r\\n        grinder = _grinder;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to check if msg.sender is an Options Contract\\r\\n     */\\r\\n    modifier onlyOptions() {\\r\\n        require(\\r\\n            optArray.contains(msg.sender) || msg.sender == address(this),\\r\\n            \\\"Only Options Contract can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create a Put and Call Options for a specified collection for the current epoch\\r\\n     * @param _collectionAddress Collection Address\\r\\n     * @param _nftFeedAddress Chainlink Feed Address\\r\\n     */\\r\\n    function createOptions(address _collectionAddress, address _nftFeedAddress) public onlyOwner {\\r\\n        // Check if BB20 token was created\\r\\n        IBB20 _nftToken = grinder.getTokenFromCollection(_collectionAddress);\\r\\n\\r\\n        // If BB20 token was not created, create it\\r\\n        require(address(_nftToken) != address(0), \\\"NFT Token not created\\\");\\r\\n        require(optionExists[address(_nftToken)] == false, \\\"Options already created for this NFT\\\");\\r\\n\\r\\n        // Get current floor price of NFT from Chainlink\\r\\n        AggregatorV3Interface _nftFeed = AggregatorV3Interface(_nftFeedAddress);\\r\\n\\r\\n        // Create new Options\\r\\n        BluebirdOptions opt = new BluebirdOptions(_nftFeed, _nftToken, address(this), optionPricing, msg.sender);\\r\\n\\r\\n        // Add nft collection options contract to array\\r\\n        optArray.add(address(opt));\\r\\n\\r\\n        // Set optionExists to true\\r\\n        optionExists[address(_nftToken)] = true;\\r\\n\\r\\n        // Emit event\\r\\n        emit OptionContractCreated(address(opt), address(_collectionAddress), address(_nftToken));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to retrieve options array\\r\\n     */\\r\\n    function getOptArray() external view returns (address[] memory) {\\r\\n        return optArray.toArray();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proxy function to emit event from options contract\\r\\n     * @param _contractAddress Address of options contract\\r\\n     * @param _optionId Option ID\\r\\n     * @param _epoch Epoch\\r\\n     * @param _nftToken NFT Token Address\\r\\n     * @param _strikePrice Strike Price\\r\\n     * @param _start Start Time\\r\\n     * @param _expiry Expiry Time\\r\\n     */\\r\\n    function emitCallOptionCreatedEvent(\\r\\n        address _contractAddress,\\r\\n        uint256 _optionId,\\r\\n        uint256 _epoch,\\r\\n        address _nftToken,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _start,\\r\\n        uint256 _expiry\\r\\n    ) external onlyOptions {\\r\\n        emit CallOptionCreated(_contractAddress, _optionId, _epoch, _nftToken, _strikePrice, _start, _expiry);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proxy function to emit event from options contract\\r\\n     * @param _contractAddress Address of options contract\\r\\n     * @param _optionId Option ID\\r\\n     * @param _epoch Epoch\\r\\n     * @param _nftToken NFT Token Address\\r\\n     * @param _strikePrice Strike Price\\r\\n     * @param _start Start Time\\r\\n     * @param _expiry Expiry Time\\r\\n     */\\r\\n    function emitPutOptionCreatedEvent(\\r\\n        address _contractAddress,\\r\\n        uint256 _optionId,\\r\\n        uint256 _epoch,\\r\\n        address _nftToken,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _start,\\r\\n        uint256 _expiry\\r\\n    ) external onlyOptions {\\r\\n        emit PutOptionCreated(_contractAddress, _optionId, _epoch, _nftToken, _strikePrice, _start, _expiry);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proxy function to emit event from options contract\\r\\n     * @param _contractAddress Address of options contract\\r\\n     * @param _user User Address\\r\\n     * @param _order Order ID\\r\\n     * @param _amount Amount\\r\\n     * @param _premium Premium\\r\\n     * @param _timestamp Timestamp\\r\\n     * @param _epoch Epoch\\r\\n     */\\r\\n    function emitBoughtEvent(\\r\\n        address _contractAddress,\\r\\n        address _user,\\r\\n        uint256 _order,\\r\\n        uint256 _amount,\\r\\n        uint256 _premium,\\r\\n        uint256 _timestamp,\\r\\n        uint256 _epoch\\r\\n    ) external onlyOptions {\\r\\n        emit Bought(_contractAddress, _user, _order, _amount, _premium, _timestamp, _epoch);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proxy function to emit event from options contract\\r\\n     * @param _contractAddress Address of options contract\\r\\n     * @param _user User Address\\r\\n     * @param _id Order ID\\r\\n     * @param _pnl PnL\\r\\n     * @param _profit Profit\\r\\n     */\\r\\n    function emitExerciseEvent(\\r\\n        address _contractAddress,\\r\\n        address _user,\\r\\n        uint256 _id,\\r\\n        uint256 _pnl,\\r\\n        bool _profit\\r\\n    ) external onlyOptions {\\r\\n        emit Exercised(_contractAddress, _user, _id, _pnl, _profit);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x830c4c3f79543d8968d7afc836cf57a51c71f7b434004898648b82c949c1ed36\",\"license\":\"MIT\"},\"contracts/BluebirdOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { IOptionPricing } from \\\"./interfaces/IOptionPricing.sol\\\";\\r\\nimport { IBluebirdOptions } from \\\"./interfaces/IBluebirdOptions.sol\\\";\\r\\nimport { IBB20 } from \\\"./interfaces/IBB20.sol\\\";\\r\\nimport { BluebirdMath } from \\\"./libraries/BluebirdMath.sol\\\";\\r\\nimport { IBluebirdManager } from \\\"./interfaces/IBluebirdManager.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @title BluebirdOptions - Individual options contract for each NFT collection\\r\\n/// @dev Only can be issued by the BluebirdManager\\r\\ncontract BluebirdOptions is IBluebirdOptions, Ownable, ReentrancyGuard {\\r\\n    /**\\r\\n     * @notice Price feed interface used for getting the latest price\\r\\n     */\\r\\n    AggregatorV3Interface internal nftFeed;\\r\\n\\r\\n    /**\\r\\n     * @notice Fractionalised NFT Token\\r\\n     */\\r\\n    IERC20 public nftToken;\\r\\n\\r\\n    /**\\r\\n     * @notice Bluebird Manager contract\\r\\n     */\\r\\n    IBluebirdManager public bluebirdManager;\\r\\n\\r\\n    /**\\r\\n     * @notice Option pricing contract\\r\\n     */\\r\\n    IOptionPricing public optionPricing;\\r\\n\\r\\n    /**\\r\\n     * @notice Expiry time of options in seconds\\r\\n     */\\r\\n    uint256 public EXPIRY = 300;\\r\\n\\r\\n    /**\\r\\n     * @notice Start time of epoch in seconds\\r\\n     */\\r\\n    uint256 public startTimeEpoch;\\r\\n\\r\\n    /**\\r\\n     * @notice Interval of chainlink round update\\r\\n     */\\r\\n    uint256 public interval = 24;\\r\\n\\r\\n    /**\\r\\n     * @notice Current epoch number\\r\\n     */\\r\\n    uint256 public epoch;\\r\\n\\r\\n    /**\\r\\n     * @notice Amount of time in which market makers can provide liquidity\\r\\n     */\\r\\n    uint256 public liquidityProvidingTime = 2 minutes;\\r\\n\\r\\n    /**\\r\\n     * @notice Current Id of options\\r\\n     */\\r\\n    uint256 public currentId;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial round id for chainlink price feed\\r\\n     */\\r\\n    uint80 public initialId;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum amount of options that a user can buy for calls\\r\\n     */\\r\\n    uint256 public maxBuyCall;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum amount of options that a user can buy for puts\\r\\n     */\\r\\n    uint256 public maxBuyPut;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of user to amount of NFT tokens or ETH deposited to providing liquidity\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => uint256)) public userDeposits;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping to track each option\\r\\n     */\\r\\n    mapping(uint256 => Option) public nftOpts;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of user to option id to amount of options bought\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => uint256)) public userToOptionIdToAmount;\\r\\n    /**\\r\\n     *@notice Mapping which checks if current id has been exercised\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => bool)) public exercised;\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of epoch to isPut to strike prices\\r\\n     */\\r\\n    mapping(uint256 => mapping(bool => uint256[])) public epochToStrikePrices;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor of Bluebird Options\\r\\n     * @param _nftFeed Price feed of NFT\\r\\n     * @param _nftToken Fractionalised NFT Token\\r\\n     * @param _bluebirdManager Bluebird Manager contract\\r\\n     * @param _optionsPricing Option pricing contract\\r\\n     * @param _owner Owner of contract\\r\\n     */\\r\\n    constructor(\\r\\n        AggregatorV3Interface _nftFeed,\\r\\n        IBB20 _nftToken,\\r\\n        address _bluebirdManager,\\r\\n        IOptionPricing _optionsPricing,\\r\\n        address _owner\\r\\n    ) {\\r\\n        // Price feed of NFT\\r\\n        nftFeed = _nftFeed;\\r\\n        nftToken = IERC20(_nftToken);\\r\\n        bluebirdManager = IBluebirdManager(_bluebirdManager);\\r\\n        optionPricing = IOptionPricing(_optionsPricing);\\r\\n\\r\\n        // Transfer ownership to owner\\r\\n        transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    // Admin Functions\\r\\n\\r\\n    /**\\r\\n     * @notice Set liquidity providing time\\r\\n     * @param _liquidityProvidingTime Time to provide liquidity\\r\\n     */\\r\\n    function setLiquidityProvidingTime(uint256 _liquidityProvidingTime) external onlyOwner {\\r\\n        liquidityProvidingTime = _liquidityProvidingTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set expiry\\r\\n     * @param _expiry Expiry of options\\r\\n     */\\r\\n    function setExpiry(uint256 _expiry) external onlyOwner {\\r\\n        EXPIRY = _expiry;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set interval\\r\\n     * @param _interval interval of chainlink round update\\r\\n     */\\r\\n    function setInterval(uint256 _interval) external onlyOwner {\\r\\n        interval = _interval;\\r\\n    }\\r\\n\\r\\n    // Internal functions\\r\\n    /**\\r\\n     * @notice Function to calculate strike prices\\r\\n     * @param _floorPrice Floor price of NFT\\r\\n     * @param _isPut Whether option is put or call\\r\\n     */\\r\\n    function _calculateStrikePrices(uint256 _floorPrice, bool _isPut) internal pure returns (uint256[] memory) {\\r\\n        uint256[] memory strikePrices = new uint256[](3);\\r\\n        if (_isPut) {\\r\\n            // Calculate from floor price 10% lower, 20% lower, 30% lower\\r\\n            strikePrices[0] = _floorPrice - (_floorPrice / 10);\\r\\n            strikePrices[1] = _floorPrice - (_floorPrice / 5);\\r\\n            strikePrices[2] = _floorPrice - (_floorPrice / 3);\\r\\n            return strikePrices;\\r\\n        } else {\\r\\n            // Calculate from floor price 10% higher, 20% higher, 30% higher\\r\\n            strikePrices[0] = _floorPrice + (_floorPrice / 10);\\r\\n            strikePrices[1] = _floorPrice + (_floorPrice / 5);\\r\\n            strikePrices[2] = _floorPrice + (_floorPrice / 3);\\r\\n        }\\r\\n        return strikePrices;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to start epoch\\r\\n     */\\r\\n    function startEpoch() public {\\r\\n        require(getStage() == 2, \\\"Epoch has not ended yet\\\");\\r\\n        startTimeEpoch = block.timestamp;\\r\\n        // Increment epoch\\r\\n        epoch += 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Writes options\\r\\n     * @dev Only owner/controller should be able to trigger this\\r\\n     */\\r\\n    function writeOption() public onlyOwner {\\r\\n        require(getStage() == 1, \\\"Liquidity providing time not over yet\\\");\\r\\n\\r\\n        // Get floor price of NFT\\r\\n        uint256 nftPrice = getNftPrice();\\r\\n        (uint80 roundId, , , , ) = nftFeed.latestRoundData();\\r\\n\\r\\n        // Get token price of fractionalised NFT\\r\\n        uint256 nftTokenPrice = nftPrice / 1000000;\\r\\n\\r\\n        // Get strike prices of call and put options\\r\\n        uint256[] memory _strikePricesCall = _calculateStrikePrices(nftTokenPrice, false);\\r\\n        uint256[] memory _strikePricesPut = _calculateStrikePrices(nftTokenPrice, true);\\r\\n\\r\\n        uint256 _start = block.timestamp;\\r\\n\\r\\n        // Determine amount to write based on amount of NFT tokens to write call options\\r\\n        uint256 amountToWriteCall = maxBuyCall / 3; // For simplicity's sake, we will write same amount of options for each strike price\\r\\n        // Determine amount to write based on amount of ETH to write put options\\r\\n        uint256 amountToWritePut = maxBuyPut / 3;\\r\\n        // Loop through strike prices and write options\\r\\n        for (uint i = 0; i < _strikePricesCall.length; i++) {\\r\\n            // Write call options\\r\\n            nftOpts[currentId] = Option(_strikePricesCall[i], _start + EXPIRY, amountToWriteCall, false, roundId);\\r\\n\\r\\n            // Write put options\\r\\n            nftOpts[currentId + 1] = Option(_strikePricesPut[i], _start + EXPIRY, amountToWritePut, true, roundId);\\r\\n\\r\\n            // Emit events for individual strike prices\\r\\n            bluebirdManager.emitCallOptionCreatedEvent(\\r\\n                address(this),\\r\\n                currentId,\\r\\n                epoch,\\r\\n                address(nftToken),\\r\\n                _strikePricesCall[i],\\r\\n                _start,\\r\\n                _start + EXPIRY\\r\\n            );\\r\\n            bluebirdManager.emitPutOptionCreatedEvent(\\r\\n                address(this),\\r\\n                currentId + 1,\\r\\n                epoch,\\r\\n                address(nftToken),\\r\\n                _strikePricesPut[i],\\r\\n                _start,\\r\\n                _start + EXPIRY\\r\\n            );\\r\\n\\r\\n            // Increment current id\\r\\n            currentId += 2;\\r\\n        }\\r\\n\\r\\n        // Save strike prices\\r\\n        epochToStrikePrices[epoch][false] = _strikePricesCall;\\r\\n        epochToStrikePrices[epoch][true] = _strikePricesPut;\\r\\n    }\\r\\n\\r\\n    // View functions\\r\\n\\r\\n    /**\\r\\n     * @notice Get premium of an option\\r\\n     * @param _id Id of contract\\r\\n     */\\r\\n    function getPremium(uint256 _id, uint256 _amount) public view returns (uint256) {\\r\\n        // Get price of NFT\\r\\n        uint256 _nftPrice = getNftPrice();\\r\\n        // Get price of NFT token\\r\\n        uint256 _nftTokenPrice = _nftPrice / 1000000;\\r\\n        // Get historical prices of NFT\\r\\n        uint[] memory _prices = getHistoricalPrices();\\r\\n        // Get standard deviation of NFT price\\r\\n        uint256 _baseIv = BluebirdMath.computeStandardDeviation(_prices);\\r\\n\\r\\n        return\\r\\n            (_amount / 1 ether) *\\r\\n            optionPricing.getOptionPrice(\\r\\n                nftOpts[_id].isPut,\\r\\n                nftOpts[_id].expiry,\\r\\n                nftOpts[_id].strike,\\r\\n                _nftTokenPrice,\\r\\n                _baseIv\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price of NFT from oracle\\r\\n     * @return Price of NFT\\r\\n     */\\r\\n    function getNftPrice() public view returns (uint) {\\r\\n        (, int price, , , ) = nftFeed.latestRoundData();\\r\\n        //Price should never be negative thus cast int to unit is ok\\r\\n        //Price is 8 decimal places and will require 1e10 correction later to 18 places\\r\\n        return uint(price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get current stage of contract\\r\\n     * @return _stage Stage of contract\\r\\n     */\\r\\n    function getStage() public view returns (uint256 _stage) {\\r\\n        if (block.timestamp > startTimeEpoch && block.timestamp < startTimeEpoch + liquidityProvidingTime) {\\r\\n            // Liquidity providing stage\\r\\n            _stage = 0;\\r\\n        } else if (\\r\\n            block.timestamp > startTimeEpoch + liquidityProvidingTime &&\\r\\n            block.timestamp < startTimeEpoch + liquidityProvidingTime + EXPIRY\\r\\n        ) {\\r\\n            // Buying stage\\r\\n            _stage = 1;\\r\\n        } else {\\r\\n            // Expiry stage\\r\\n            _stage = 2;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the historical prices of NFT\\r\\n     * @return Historical prices of NFT\\r\\n     */\\r\\n\\r\\n    function getHistoricalPrices() public view returns (uint[] memory) {\\r\\n        // Create new price array of 7 prices\\r\\n        uint[] memory prices = new uint[](7);\\r\\n        // Get latest round data\\r\\n        (uint80 _roundId, int price, , , ) = nftFeed.latestRoundData();\\r\\n        prices[0] = uint(price);\\r\\n        // 1 day has 24 rounds, so get past 7 days worth of prices\\r\\n        for (uint i = 1; i < 7; i++) {\\r\\n            (, int _price, , , ) = nftFeed.getRoundData(uint80(_roundId - interval * (i)));\\r\\n            prices[i] = uint(_price);\\r\\n        }\\r\\n        return prices;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the strike prices of an epoch\\r\\n     * @return uint256[] memory Array of strike prices\\r\\n     */\\r\\n    function getStrikes(uint256 _epoch, bool _isPut) external view returns (uint256[] memory) {\\r\\n        return epochToStrikePrices[_epoch][_isPut];\\r\\n    }\\r\\n\\r\\n    // Liquidity providing functions\\r\\n\\r\\n    /**\\r\\n     * @notice Provide liquidity by depositing NFT tokens\\r\\n     * @param amount Amount of NFT tokens to deposit\\r\\n     */\\r\\n    function depositNftToken(uint amount) public nonReentrant {\\r\\n        // Require that it is only during liquidity providing time\\r\\n        require(getStage() == 0, \\\"Liquidity providing time has ended\\\");\\r\\n        // Take NFT tokens\\r\\n        require(nftToken.transferFrom(msg.sender, address(this), amount), \\\"Incorrect amount of NFT Token sent\\\");\\r\\n\\r\\n        // Increase max buy amount\\r\\n        maxBuyCall += amount;\\r\\n        userDeposits[msg.sender][0] += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Provide liquidity by depositing ETH\\r\\n     */\\r\\n    function depositETH() public payable nonReentrant {\\r\\n        require(getStage() == 0, \\\"Liquidity providing time has ended\\\");\\r\\n        // Take ETH from user\\r\\n        require(msg.value > 0, \\\"Incorrect amount of ETH sent\\\");\\r\\n\\r\\n        // Increase max buy amount\\r\\n        maxBuyPut += msg.value;\\r\\n        userDeposits[msg.sender][1] += msg.value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buy an option based on `_id`\\r\\n     * @param _id Index of the option\\r\\n     * @param _amount Amount of options to buy\\r\\n     */\\r\\n    function buy(uint256 _id, uint256 _amount) external nonReentrant {\\r\\n        require(nftOpts[_id].expiry > block.timestamp, \\\"Option is expired and cannot be bought\\\");\\r\\n        // Get isPut\\r\\n        bool _isPut = nftOpts[_id].isPut;\\r\\n\\r\\n        // Set max buy\\r\\n        if (_isPut) {\\r\\n            require(_amount <= maxBuyPut, \\\"Amount exceeds max buy\\\");\\r\\n            // Reduce max buy\\r\\n            maxBuyPut -= _amount;\\r\\n        } else {\\r\\n            require(_amount <= maxBuyCall, \\\"Amount exceeds max buy\\\");\\r\\n            // Reduce max buy\\r\\n            maxBuyCall -= _amount;\\r\\n        }\\r\\n        // Get price of NFT\\r\\n        uint256 nftTokenPrice = getNftPrice() / 1000000;\\r\\n        // Get expiry of option\\r\\n        uint256 _expiry = nftOpts[_id].expiry;\\r\\n        // Initialise premium\\r\\n        uint256 _premium;\\r\\n        // Get historical prices\\r\\n        uint[] memory _prices = getHistoricalPrices();\\r\\n\\r\\n        // Get base IV\\r\\n        uint256 _baseIv = BluebirdMath.computeStandardDeviation(_prices);\\r\\n        // Get isPut\\r\\n\\r\\n        // Get strike\\r\\n        uint256 _strike = nftOpts[_id].strike;\\r\\n        // Get premium based on option type\\r\\n        if (_isPut) {\\r\\n            _premium =\\r\\n                (_amount / 1 ether) *\\r\\n                optionPricing.getOptionPrice(true, _expiry, _strike, nftTokenPrice, _baseIv);\\r\\n        } else {\\r\\n            _premium =\\r\\n                (_amount / 1 ether) *\\r\\n                optionPricing.getOptionPrice(false, _expiry, _strike, nftTokenPrice, _baseIv);\\r\\n        }\\r\\n\\r\\n        // Record amount of options bought by user\\r\\n        userToOptionIdToAmount[msg.sender][_id] += _amount / 1 ether;\\r\\n        //Transfer premium payment from buyer to protocol\\r\\n        uint256 _amountTokens = _premium / nftTokenPrice;\\r\\n        require(nftToken.transferFrom(msg.sender, address(this), _amountTokens), \\\"Premium payment failed\\\");\\r\\n        // Emit event\\r\\n        bluebirdManager.emitBoughtEvent(address(this), msg.sender, _id, _amount, _premium, block.timestamp, epoch);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate amount of ETH to be received when exercising an option, for calls only\\r\\n     * @param _id Index of the option\\r\\n     * @return Amount of ETH to be received\\r\\n     */\\r\\n    function calculateAmountETH(uint256 _id) public view returns (uint256) {\\r\\n        return nftOpts[_id].strike * userToOptionIdToAmount[msg.sender][_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Exercise an option based on `_id`\\r\\n     * @param _id Id of option to exercise\\r\\n     */\\r\\n    function exercise(uint256 _id) external payable {\\r\\n        require(userToOptionIdToAmount[msg.sender][_id] > 0, \\\"You do not own this option\\\");\\r\\n        require(!exercised[msg.sender][_id], \\\"Option has already been exercised\\\");\\r\\n        require(nftOpts[_id].expiry < block.timestamp, \\\"Option is not expired\\\");\\r\\n        // Get price of NFT token\\r\\n        // Get closing roundId\\r\\n        (, int _price, , , ) = nftFeed.getRoundData(nftOpts[_id].roundId + uint80(interval * 7));\\r\\n        uint256 nftTokenPrice = uint(_price) / 1000000;\\r\\n        // Initialise amount of ETH to send to protocol or send to user\\r\\n        uint256 _amountETH;\\r\\n        // Initialise profit boolean to determine if user has profit\\r\\n        bool _profit;\\r\\n        // Calculate pnl\\r\\n        if (!nftOpts[_id].isPut) {\\r\\n            if (nftTokenPrice > nftOpts[_id].strike) {\\r\\n                _profit = true;\\r\\n                // Call buyers pay strike price * amount to protocol\\r\\n                _amountETH = calculateAmountETH(_id);\\r\\n                require(msg.value == _amountETH, \\\"Incorrect amount of ETH sent to buy NFT Token\\\");\\r\\n                // Transfer from protocol to user NFT token\\r\\n                require(\\r\\n                    nftToken.transfer(msg.sender, userToOptionIdToAmount[msg.sender][_id] * 1 ether),\\r\\n                    \\\"Insufficient amount of NFT Token sent to user\\\"\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            if (nftTokenPrice < nftOpts[_id].strike) {\\r\\n                _profit = true;\\r\\n                // Put buyers pay strike price * amount to protocol\\r\\n                _amountETH = calculateAmountETH(_id);\\r\\n                // Transfer from user to protocol amount of token\\r\\n                require(\\r\\n                    nftToken.transferFrom(msg.sender, address(this), userToOptionIdToAmount[msg.sender][_id] * 1 ether),\\r\\n                    \\\"Insufficient amount of NFT Token sent to protocol\\\"\\r\\n                );\\r\\n                // Transfer from protocol to user eth\\r\\n                (bool success, ) = payable(msg.sender).call{ value: _amountETH }(\\\"\\\");\\r\\n                require(success, \\\"Insufficient amount of ETH sent to user\\\");\\r\\n            }\\r\\n        }\\r\\n        exercised[msg.sender][_id] = true;\\r\\n        // Emit event\\r\\n        bluebirdManager.emitExerciseEvent(address(this), msg.sender, _id, _amountETH, _profit);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x013f5cc70f8e207703aeb18bf037c00553c60444ab0072300167ef3ccbefafc7\",\"license\":\"MIT\"},\"contracts/interfaces/IBB20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title BB20 - Fractionalized NFT Token\\r\\n/// @dev Only can be issued by the BluebirdGrinder\\r\\ninterface IBB20 is IERC20 {\\r\\n    event Minted(address to, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Mint BB20 Tokens\\r\\n     */\\r\\n    function mint(address _receipient, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice  Burn `amount` tokens and decreasing the total supply.\\r\\n     * @param amount Amount of tokens to burn\\r\\n     */\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x5e5bfdd85212cc48b8e8be8d882c043349a7968b0981b08c9ddf4c33a7fbf73e\",\"license\":\"MIT\"},\"contracts/interfaces/IBluebirdGrinder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { IBB20 } from \\\"./IBB20.sol\\\";\\r\\n\\r\\n/// @title IBluebird Grinder\\r\\n/// @notice The Bluebird Grinder will break down an NFT into shards\\r\\ninterface IBluebirdGrinder {\\r\\n    event Redeemed(address indexed _collectionAddress, uint256 _tokenId, address _to);\\r\\n\\r\\n    event Fractionalised(\\r\\n        address indexed _collectionAddress,\\r\\n        address indexed _nftTokenAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _to\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Convert 1 ERC721 Token into X amount of BB20 Tokens\\r\\n     * @param _collectionAddress Collection Address\\r\\n     * @param _tokenId Token Id of collection address\\r\\n     */\\r\\n    function fractionalizeNFT(address _collectionAddress, uint256 _tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Convert X amount of BB20 Tokens into 1 ERC721 Token\\r\\n     * @param _collectionAddress Collection address of the fractionalized NFT\\r\\n     * @param _tokenId Token ID of choice in the vaule\\r\\n     */\\r\\n    function reconstructNFT(address _collectionAddress, uint256 _tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Whitelist NFT Collection\\r\\n     * @param _collectionAddress Address of the NFT collection to be whitelisted\\r\\n     */\\r\\n    function whitelistNFT(address _collectionAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Check if BB20 token exists given collection address\\r\\n     * @param _collectionAddress Address of the NFT collection\\r\\n     */\\r\\n    function getTokenFromCollection(address _collectionAddress) external view returns (IBB20);\\r\\n}\\r\\n\",\"keccak256\":\"0x5298011f0d8ac9a0e7bd532edf8ff27ed2e49bfc8f1c2f5c2c1e5ae6cec3fb8c\",\"license\":\"MIT\"},\"contracts/interfaces/IBluebirdManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/// @title IBluebird Manager\\r\\n/// @notice The Bluebird Options Manager\\r\\ninterface IBluebirdManager {\\r\\n    /**\\r\\n     * @notice Emit when Call Option Contract is Created\\r\\n     * @param _contractAddress Address of the contract created\\r\\n     * @param _optionId Option Id\\r\\n     * @param _epoch Epoch of the option\\r\\n     * @param _nftToken Address of the bb20 token\\r\\n     * @param _strikePrice Strike Price\\r\\n     * @param _start Start time of epoch\\r\\n     * @param _expiry End time of epoch\\r\\n     */\\r\\n    event CallOptionCreated(\\r\\n        address indexed _contractAddress,\\r\\n        uint256 indexed _optionId,\\r\\n        uint256 _epoch,\\r\\n        address _nftToken,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _start,\\r\\n        uint256 _expiry\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emit when Put option contract is Created\\r\\n     * @param _contractAddress Address of the contract created\\r\\n     * @param _optionId Option Id\\r\\n     * @param _epoch Epoch of the option\\r\\n     * @param _nftToken Address of the bb20 token\\r\\n     * @param _strikePrice Strike Price\\r\\n     * @param _start Start time of epoch\\r\\n     * @param _expiry End time of epoch\\r\\n     */\\r\\n    event PutOptionCreated(\\r\\n        address indexed _contractAddress,\\r\\n        uint256 indexed _optionId,\\r\\n        uint256 _epoch,\\r\\n        address _nftToken,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _start,\\r\\n        uint256 _expiry\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when an option is bought\\r\\n     * @param _contractAddress Address of the contract\\r\\n     * @param _user User's address\\r\\n     * @param _optionId Option Index\\r\\n     * @param _amount Lots purchased\\r\\n     * @param _premium Premium paid\\r\\n     * @param _timestamp Timestamp of purchase\\r\\n     * @param _epoch Epoch of the option\\r\\n     */\\r\\n    event Bought(\\r\\n        address indexed _contractAddress,\\r\\n        address indexed _user,\\r\\n        uint256 indexed _optionId,\\r\\n        uint256 _amount,\\r\\n        uint256 _premium,\\r\\n        uint256 _timestamp,\\r\\n        uint256 _epoch\\r\\n    );\\r\\n    /**\\r\\n     * @notice Emitted when a user claims profits\\r\\n     * @param _contractAddress Address of the contract\\r\\n     * @param _user User's address\\r\\n     * @param _id id of option\\r\\n     * @param _profits profit or loss number\\r\\n     * @param _profit true for profit and false for loss -> this indicates _pnl is positive or negative\\r\\n     */\\r\\n    event Exercised(\\r\\n        address indexed _contractAddress,\\r\\n        address indexed _user,\\r\\n        uint256 indexed _id,\\r\\n        uint256 _profits,\\r\\n        bool _profit\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when new option contract is created\\r\\n     * @param _opt Address of the option contract\\r\\n     * @param _collectionAddress Address of the collection\\r\\n     * @param _nftToken Address of the bb20 token\\r\\n     */\\r\\n    event OptionContractCreated(address _opt, address _collectionAddress, address _nftToken);\\r\\n\\r\\n    /**\\r\\n     * @notice Create a New Call and Put Options for the epoch\\r\\n     * @param _collectionAddress Address of the NFT Collection\\r\\n     * @param _nftFeedAddress Address of the NFT Oracle Feed from Chainlink\\r\\n     * @dev Can only create when previous epoch has expired\\r\\n     * @dev Increment epoch\\r\\n     * @dev Must be whitelisted NFT collection\\r\\n     */\\r\\n    function createOptions(address _collectionAddress, address _nftFeedAddress) external;\\r\\n\\r\\n    function emitCallOptionCreatedEvent(\\r\\n        address _contractAddress,\\r\\n        uint256 _optionId,\\r\\n        uint256 _epoch,\\r\\n        address _nftToken,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _start,\\r\\n        uint256 _expiry\\r\\n    ) external;\\r\\n\\r\\n    function emitPutOptionCreatedEvent(\\r\\n        address _contractAddress,\\r\\n        uint256 _optionId,\\r\\n        uint256 _epoch,\\r\\n        address _nftToken,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _start,\\r\\n        uint256 _expiry\\r\\n    ) external;\\r\\n\\r\\n    function emitBoughtEvent(\\r\\n        address _contractAddress,\\r\\n        address _user,\\r\\n        uint256 _order,\\r\\n        uint256 _amount,\\r\\n        uint256 _premium,\\r\\n        uint256 _timestamp,\\r\\n        uint256 _epoch\\r\\n    ) external;\\r\\n\\r\\n    function emitExerciseEvent(\\r\\n        address _contractAddress,\\r\\n        address _user,\\r\\n        uint256 _id,\\r\\n        uint256 _pnl,\\r\\n        bool _profit\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb606cb15f32655b709188648de33e0cba399cf2b950795ac0cc6d20196c99acb\",\"license\":\"MIT\"},\"contracts/interfaces/IBluebirdOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/// @title IBluebirdOptions\\r\\n/// @notice The Bluebird Options contract will represent a options belonging to an epoch.\\r\\n/// @notice The contract will contain the strike prices for the epoch\\r\\n/// @notice The contract will only encapsulate puts or calls only\\r\\n/// @notice The contract shall be named as {NFT_SYMBOL}-{EPOCH}-{PUT/CALL}\\r\\ninterface IBluebirdOptions {\\r\\n    // Options stored in arrays of structs\\r\\n    struct Option {\\r\\n        uint strike; // Price in USD (18 decimal places) option allows buyer to purchase tokens at\\r\\n        uint expiry; // Unix timestamp of expiration time\\r\\n        uint amount; // Amount of tokens option allows buyer to purchase\\r\\n        bool isPut; // True if option is a put, false if call\\r\\n        uint80 roundId; // Chainlink round ID\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buy an option\\r\\n     * @param _id ID of the option\\r\\n     * @param _amount Amount of lots to buy\\r\\n     * @dev Option must have started\\r\\n     * @dev Option must not have expired\\r\\n     * @dev `_amount` must be less than or equal to the amount of lots available\\r\\n     */\\r\\n    function buy(uint256 _id, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Claim profits, if any\\r\\n     * @param _id Order Index\\r\\n     * @dev Must be owner of order\\r\\n     */\\r\\n    function exercise(uint256 _id) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Get strike prices of the current contract\\r\\n     * @param _epoch Epoch of the option\\r\\n     * @param _isPut Is the option a put option\\r\\n     */\\r\\n    function getStrikes(uint256 _epoch, bool _isPut) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get premium based on option id\\r\\n     * @param _id ID of the option\\r\\n     * @param _amount Amount of lots to buy\\r\\n     */\\r\\n    function getPremium(uint256 _id, uint256 _amount) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x545a473e9ea6b6317bab4a63f837fadb9fd996e40eeb4616e126a83f12976490\",\"license\":\"MIT\"},\"contracts/interfaces/IOptionPricing.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOptionPricing {\\n    function getOptionPrice(\\n        bool isPut,\\n        uint256 expiry,\\n        uint256 strike,\\n        uint256 lastPrice,\\n        uint256 baseIv\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ce39291a92d1843653907520ab883c653e5e75e1d25a27e5bbf68e8aad767f4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BluebirdMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nlibrary BluebirdMath {\\r\\n    /**\\r\\n     * Compute standard deviation of an array of values\\r\\n     * @param _values Array of values\\r\\n     * @return Standard deviation of `_values`\\r\\n     */\\r\\n    function computeStandardDeviation(uint256[] memory _values) internal pure returns (uint256) {\\r\\n        uint256 n = _values.length;\\r\\n        uint256 mean = 0;\\r\\n\\r\\n        // Compute mean\\r\\n        for (uint256 i = 0; i < n; i++) {\\r\\n            mean += _values[i];\\r\\n        }\\r\\n        mean = mean / n;\\r\\n        // Compute sum of squared differences\\r\\n        uint256 sumSquaredDifferences = 0;\\r\\n        for (uint256 i = 0; i < n; i++) {\\r\\n            uint256 difference;\\r\\n            if (_values[i] > mean) {\\r\\n                difference = _values[i] - mean;\\r\\n            } else {\\r\\n                difference = mean - _values[i];\\r\\n            }\\r\\n\\r\\n            sumSquaredDifferences += difference * difference;\\r\\n        }\\r\\n\\r\\n        // Compute variance and standard deviation\\r\\n        uint256 variance = sumSquaredDifferences / n;\\r\\n        uint256 standardDeviation = sqrt(variance);\\r\\n\\r\\n        return standardDeviation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Square root function\\r\\n     * @param x Input x\\r\\n     * @return Square root of `x`\\r\\n     */\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        uint256 z = (x + 1) / 2;\\r\\n        uint256 y = x;\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n        return y;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc23c193e5f3803e0c8e75b4739843ba4149224f76fda7e93ff44823102d89ea8\",\"license\":\"UNLICENSED\"},\"contracts/utils/SetUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary SetUtils {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /// @dev Converst an iterable set of addresses to a corresponding array\\n    function toArray(EnumerableSet.AddressSet storage _set) internal view returns (address[] memory) {\\n        uint256 numElements = _set.length();\\n        address[] memory elements = new address[](numElements);\\n        for (uint256 i = 0; i < numElements; ++i) {\\n            elements[i] = _set.at(i);\\n        }\\n        return elements;\\n    }\\n\\n    /// @dev Converst an iterable set of uint to a corresponding array\\n    function toArray(EnumerableSet.UintSet storage _set) internal view returns (uint256[] memory) {\\n        uint256 numElements = _set.length();\\n        uint256[] memory elements = new uint256[](numElements);\\n        for (uint256 i = 0; i < numElements; ++i) {\\n            elements[i] = _set.at(i);\\n        }\\n        return elements;\\n    }\\n}\\n\",\"keccak256\":\"0x1f86730e1bfcbc7879fefba28ac74b4a7afd1bbb0dfe501af624de922e2b5a36\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161369838038061369883398101604081905261002f916100d1565b61003833610069565b600380546001600160a01b039384166001600160a01b0319918216179091556004805492909316911617905561010b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100ce57600080fd5b50565b600080604083850312156100e457600080fd5b82516100ef816100b9565b6020840151909250610100816100b9565b809150509250929050565b61357e8061011a6000396000f3fe60806040523480156200001157600080fd5b5060043610620000c35760003560e01c80638da5cb5b116200007a5780638da5cb5b1462000181578063bee3d1611462000193578063c690579714620001ac578063e29e49fb14620001c3578063f2fde38b14620001d7578063fee0b2a014620001ee57600080fd5b80631646879f14620000c85780631e3394fb14620000e1578063263216a01462000112578063571f1482146200014957806358c41cc31462000160578063715018a61462000177575b600080fd5b620000df620000d9366004620009b2565b62000205565b005b600354620000f5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001386200012336600462000a1c565b60056020526000908152604090205460ff1681565b604051901515815260200162000109565b620000df6200015a36600462000a43565b620002ac565b620000df62000171366004620009b2565b620004e8565b620000df6200057a565b6000546001600160a01b0316620000f5565b6200019d62000592565b60405162000109919062000a81565b620000df620001bd36600462000ad0565b620005a5565b600454620000f5906001600160a01b031681565b620000df620001e836600462000a1c565b6200063d565b620000df620001ff36600462000b3a565b620006bc565b6200021260013362000756565b806200021d57503330145b620002455760405162461bcd60e51b81526004016200023c9062000ba1565b60405180910390fd5b604080518681526001600160a01b038681166020830152918101859052606081018490526080810183905287918916907f7d2ed896fb6db818073ca603e12bd04646f1043d5e271e6c8d3343999dc8f9cf9060a0015b60405180910390a350505050505050565b620002b66200077d565b60048054604051633200bddf60e01b81526001600160a01b038581169382019390935260009290911690633200bddf90602401602060405180830381865afa15801562000307573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032d919062000bed565b90506001600160a01b0381166200037f5760405162461bcd60e51b815260206004820152601560248201527413919508151bdad95b881b9bdd0818dc99585d1959605a1b60448201526064016200023c565b6001600160a01b03811660009081526005602052604090205460ff1615620003f65760405162461bcd60e51b8152602060048201526024808201527f4f7074696f6e7320616c7265616479206372656174656420666f7220746869736044820152630813919560e21b60648201526084016200023c565b60035460405183916000918391859130916001600160a01b03169033906200041e906200098e565b6001600160a01b0395861681529385166020850152918416604084015283166060830152909116608082015260a001604051809103906000f0801580156200046a573d6000803e3d6000fd5b5090506200047a600182620007d9565b506001600160a01b03838116600081815260056020908152604091829020805460ff1916600117905581518585168152938916908401528201527f1efbb0e97f8865812a8d21422b30f678d86b46b09f8a83a5613e4cb9f9859eb39060600160405180910390a15050505050565b620004f560013362000756565b806200050057503330145b6200051f5760405162461bcd60e51b81526004016200023c9062000ba1565b604080518681526001600160a01b038681166020830152918101859052606081018490526080810183905287918916907f93960e277e5f1a1bcf2ecb4638789539be8c5f6fd5482220f93f031296ef55359060a0016200029b565b620005846200077d565b620005906000620007f0565b565b6060620005a0600162000840565b905090565b620005b260013362000756565b80620005bd57503330145b620005dc5760405162461bcd60e51b81526004016200023c9062000ba1565b82846001600160a01b0316866001600160a01b03167f48ce4d1077255ea4b6f98a25f90db5729f884d73101b7e623a9d6f518230dd7a85856040516200062e9291909182521515602082015260400190565b60405180910390a45050505050565b620006476200077d565b6001600160a01b038116620006ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200023c565b620006b981620007f0565b50565b620006c960013362000756565b80620006d457503330145b620006f35760405162461bcd60e51b81526004016200023c9062000ba1565b60408051858152602081018590529081018390526060810182905285906001600160a01b0380891691908a16907f8a5254432535d4192429d2cc163283a57784eac274295fcda17cc659c1ee414c9060800160405180910390a450505050505050565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b6000546001600160a01b03163314620005905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200023c565b600062000774836001600160a01b038416620008fc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060006200084f836200094e565b905060008167ffffffffffffffff8111156200086f576200086f62000c0d565b60405190808252806020026020018201604052801562000899578160200160208202803683370190505b50905060005b82811015620008f457620008b4858262000959565b828281518110620008c957620008c962000c23565b6001600160a01b0390921660209283029190910190910152620008ec8162000c39565b90506200089f565b509392505050565b6000818152600183016020526040812054620009455750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000777565b50600062000777565b600062000777825490565b600062000774838360008260000182815481106200097b576200097b62000c23565b9060005260206000200154905092915050565b6128e58062000c6483390190565b6001600160a01b0381168114620006b957600080fd5b600080600080600080600060e0888a031215620009ce57600080fd5b8735620009db816200099c565b965060208801359550604088013594506060880135620009fb816200099c565b9699959850939660808101359560a0820135955060c0909101359350915050565b60006020828403121562000a2f57600080fd5b813562000a3c816200099c565b9392505050565b6000806040838503121562000a5757600080fd5b823562000a64816200099c565b9150602083013562000a76816200099c565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101562000ac45783516001600160a01b03168352928401929184019160010162000a9d565b50909695505050505050565b600080600080600060a0868803121562000ae957600080fd5b853562000af6816200099c565b9450602086013562000b08816200099c565b935060408601359250606086013591506080860135801515811462000b2c57600080fd5b809150509295509295909350565b600080600080600080600060e0888a03121562000b5657600080fd5b873562000b63816200099c565b9650602088013562000b75816200099c565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b6020808252602c908201527f4f6e6c79204f7074696f6e7320436f6e74726163742063616e2063616c6c207460408201526b3434b990333ab731ba34b7b760a11b606082015260800190565b60006020828403121562000c0057600080fd5b815162000a3c816200099c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141562000c5c57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405261012c60065560186008556078600a553480156200002157600080fd5b50604051620028e5380380620028e58339810160408190526200004491620001fa565b6200004f33620000b3565b60018055600280546001600160a01b038088166001600160a01b03199283161790925560038054878416908316179055600480548684169083161790556005805492851692909116919091179055620000a88162000103565b50505050506200027a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200010d62000186565b6001600160a01b038116620001785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200018381620000b3565b50565b6000546001600160a01b03163314620001e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200016f565b565b6001600160a01b03811681146200018357600080fd5b600080600080600060a086880312156200021357600080fd5b85516200022081620001e4565b60208701519095506200023381620001e4565b60408701519094506200024681620001e4565b60608701519093506200025981620001e4565b60808701519092506200026c81620001e4565b809150509295509295909350565b61265b806200028a6000396000f3fe6080604052600436106102045760003560e01c80638da5cb5b11610118578063c0c2e53a116100a0578063d6febde81161006f578063d6febde814610652578063e00dd16114610672578063f2fde38b14610688578063f6326fb3146106a8578063fcaa7664146106b057600080fd5b8063c0c2e53a1461059a578063c4912774146105e5578063cfbdfc5f146105fa578063d06fcba81461063257600080fd5b8063a7052ed8116100e7578063a7052ed8146104f9578063b07f0a4114610531578063b28d916a14610544578063b49631e91461055a578063bdf82a221461057a57600080fd5b80638da5cb5b1461049a578063900cf0cf146104b8578063947a36fb146104ce578063a2c8b177146104e457600080fd5b806333b521a61161019b5780634cfe6f931161016a5780634cfe6f93146104245780635e4db5fd146104395780636053937b1461044f578063715018a614610465578063822752081461047a57600080fd5b806333b521a6146103395780633d168294146103c15780634530a2d7146103ee5780634c61670d1461040457600080fd5b8063110bd49b116101d7578063110bd49b146102ab5780631e3394fb146102cb5780631f93d1b31461030357806322a900821461031957600080fd5b806301cceb38146102095780630899b1411461022b57806308f433331461024b57806310a64fc414610296575b600080fd5b34801561021557600080fd5b506102296102243660046122ca565b6106c5565b005b34801561023757600080fd5b506102296102463660046122ca565b6106d2565b34801561025757600080fd5b506102836102663660046122ff565b600f60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156102a257600080fd5b506102296106df565b3480156102b757600080fd5b506102836102c6366004612337565b610bd0565b3480156102d757600080fd5b506005546102eb906001600160a01b031681565b6040516001600160a01b03909116815260200161028d565b34801561030f57600080fd5b5061028360075481565b34801561032557600080fd5b506102296103343660046122ca565b610c0e565b34801561034557600080fd5b5061038e6103543660046122ca565b60106020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160501b031685565b60408051958652602086019490945292840191909152151560608301526001600160501b0316608082015260a00161028d565b3480156103cd57600080fd5b506103e16103dc36600461236f565b610c1b565b60405161028d919061239f565b3480156103fa57600080fd5b5061028360065481565b34801561041057600080fd5b5061022961041f3660046122ca565b610c89565b34801561043057600080fd5b506103e1610dd8565b34801561044557600080fd5b50610283600e5481565b34801561045b57600080fd5b50610283600d5481565b34801561047157600080fd5b50610229610f8b565b34801561048657600080fd5b506102836104953660046123e3565b610f9f565b3480156104a657600080fd5b506000546001600160a01b03166102eb565b3480156104c457600080fd5b5061028360095481565b3480156104da57600080fd5b5061028360085481565b3480156104f057600080fd5b506102296110a7565b34801561050557600080fd5b50600c54610519906001600160501b031681565b6040516001600160501b03909116815260200161028d565b61022961053f3660046122ca565b61111f565b34801561055057600080fd5b50610283600a5481565b34801561056657600080fd5b506004546102eb906001600160a01b031681565b34801561058657600080fd5b506102836105953660046122ca565b611771565b3480156105a657600080fd5b506105d56105b53660046122ff565b601260209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161028d565b3480156105f157600080fd5b5061028361179e565b34801561060657600080fd5b506102836106153660046122ff565b601160209081526000928352604080842090915290825290205481565b34801561063e57600080fd5b506003546102eb906001600160a01b031681565b34801561065e57600080fd5b5061022961066d3660046123e3565b611823565b34801561067e57600080fd5b50610283600b5481565b34801561069457600080fd5b506102296106a3366004612405565b611cda565b610229611d50565b3480156106bc57600080fd5b50610283611e1a565b6106cd611e90565b600655565b6106da611e90565b600a55565b6106e7611e90565b6106ef611e1a565b6001146107515760405162461bcd60e51b815260206004820152602560248201527f4c69717569646974792070726f766964696e672074696d65206e6f74206f76656044820152641c881e595d60da1b60648201526084015b60405180910390fd5b600061075b61179e565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190612437565b5050505090506000620f4240836107ed919061249d565b905060006107fc826000611eea565b9050600061080b836001611eea565b9050600042905060006003600d54610823919061249d565b905060006003600e54610836919061249d565b905060005b8551811015610b6e576040518060a00160405280878381518110610861576108616124bf565b602002602001015181526020016006548661087c91906124d5565b81526020808201869052600060408084018290526001600160501b03808e16606095860152600b5483526010845291819020855181559285015160018401558481015160028401559284015160039092018054608090950151909116610100026affffffffffffffffffff0019921515929092166affffffffffffffffffffff199094169390931717909155805160a0810190915285518190879084908110610927576109276124bf565b602002602001015181526020016006548661094291906124d5565b8152602001838152602001600115158152602001896001600160501b031681525060106000600b54600161097691906124d5565b815260208082019290925260409081016000208351815591830151600183015582015160028201556060820151600391820180546080909401516001600160501b0316610100026affffffffffffffffffff0019921515929092166affffffffffffffffffffff199094169390931717909155600454600b54600954925489516001600160a01b0393841694631646879f9430949391929116908c9088908110610a2257610a226124bf565b60200260200101518a6006548c610a3991906124d5565b6040518863ffffffff1660e01b8152600401610a5b97969594939291906124ed565b600060405180830381600087803b158015610a7557600080fd5b505af1158015610a89573d6000803e3d6000fd5b5050600454600b546001600160a01b0390911692506358c41cc391503090610ab29060016124d5565b6009546003548a516001600160a01b03909116908b9088908110610ad857610ad86124bf565b60200260200101518a6006548c610aef91906124d5565b6040518863ffffffff1660e01b8152600401610b1197969594939291906124ed565b600060405180830381600087803b158015610b2b57600080fd5b505af1158015610b3f573d6000803e3d6000fd5b505050506002600b6000828254610b5691906124d5565b90915550819050610b6681612531565b91505061083b565b50600954600090815260136020908152604080832083805282529091208651610b999288019061226a565b5060095460009081526013602090815260408083206001845282529091208551610bc59287019061226a565b505050505050505050565b60136020528260005260406000206020528160005260406000208181548110610bf857600080fd5b9060005260206000200160009250925050505481565b610c16611e90565b600855565b60008281526013602090815260408083208415158452825291829020805483518184028101840190945280845260609392830182828015610c7b57602002820191906000526020600020905b815481526020019060010190808311610c67575b505050505090505b92915050565b610c91612058565b610c99611e1a565b15610cb65760405162461bcd60e51b81526004016107489061254c565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d31919061258e565b610d885760405162461bcd60e51b815260206004820152602260248201527f496e636f727265637420616d6f756e74206f66204e465420546f6b656e2073656044820152611b9d60f21b6064820152608401610748565b80600d6000828254610d9a91906124d5565b9091555050336000908152600f6020908152604080832083805290915281208054839290610dc99084906124d5565b90915550506001805550565b50565b6040805160078082526101008201909252606091600091906020820160e080368337019050509050600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a9190612437565b505050915091508083600081518110610e9557610e956124bf565b602090810291909101015260015b6007811015610f82576002546008546000916001600160a01b031690639a6fc8f590610ed09085906125ab565b610ee3906001600160501b0388166125ca565b6040516001600160e01b031960e084901b1681526001600160501b03909116600482015260240160a060405180830381865afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190612437565b50505091505080858381518110610f6457610f646124bf565b60209081029190910101525080610f7a81612531565b915050610ea3565b50919392505050565b610f93611e90565b610f9d60006120b2565b565b600080610faa61179e565b90506000610fbb620f42408361249d565b90506000610fc7610dd8565b90506000610fd482612102565b600554600089815260106020526040908190206003810154600182015491549251630b6f6db160e31b815260ff909116151560048201526024810191909152604481019190915260648101869052608481018390529192506001600160a01b031690635b7b6d889060a401602060405180830381865afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906125e1565b611092670de0b6b3a76400008861249d565b61109c91906125ab565b979650505050505050565b6110af611e1a565b6002146110fe5760405162461bcd60e51b815260206004820152601760248201527f45706f636820686173206e6f7420656e646564207965740000000000000000006044820152606401610748565b4260078190555060016009600082825461111891906124d5565b9091555050565b3360009081526011602090815260408083208484529091529020546111865760405162461bcd60e51b815260206004820152601a60248201527f596f7520646f206e6f74206f776e2074686973206f7074696f6e0000000000006044820152606401610748565b33600090815260126020908152604080832084845290915290205460ff16156111fb5760405162461bcd60e51b815260206004820152602160248201527f4f7074696f6e2068617320616c7265616479206265656e2065786572636973656044820152601960fa1b6064820152608401610748565b60008181526010602052604090206001015442116112535760405162461bcd60e51b815260206004820152601560248201527413dc1d1a5bdb881a5cc81b9bdd08195e1c1a5c9959605a1b6044820152606401610748565b6002546008546000916001600160a01b031690639a6fc8f5906112779060076125ab565b6000858152601060205260409020600301546112a1919061010090046001600160501b03166125fa565b6040516001600160e01b031960e084901b1681526001600160501b03909116600482015260240160a060405180830381865afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113099190612437565b5050509150506000620f424082611320919061249d565b60008481526010602052604081206003015491925090819060ff166114e1576000858152601060205260409020548311156114dc5750600161136185611771565b91508134146113c85760405162461bcd60e51b815260206004820152602d60248201527f496e636f727265637420616d6f756e74206f66204554482073656e7420746f2060448201526c313abc9027232a102a37b5b2b760991b6064820152608401610748565b6003543360008181526011602090815260408083208a84529091529020546001600160a01b039092169163a9059cbb919061140b90670de0b6b3a76400006125ab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a919061258e565b6114dc5760405162461bcd60e51b815260206004820152602d60248201527f496e73756666696369656e7420616d6f756e74206f66204e465420546f6b656e60448201526c1039b2b73a103a37903ab9b2b960991b6064820152608401610748565b6116d3565b6000858152601060205260409020548310156116d35750600161150385611771565b6003543360008181526011602090815260408083208b84529091529020549294506001600160a01b03909116916323b872dd9190309061154b90670de0b6b3a76400006125ab565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c3919061258e565b6116295760405162461bcd60e51b815260206004820152603160248201527f496e73756666696369656e7420616d6f756e74206f66204e465420546f6b656e604482015270081cd95b9d081d1bc81c1c9bdd1bd8dbdb607a1b6064820152608401610748565b604051600090339084908381818185875af1925050503d806000811461166b576040519150601f19603f3d011682016040523d82523d6000602084013e611670565b606091505b50509050806116d15760405162461bcd60e51b815260206004820152602760248201527f496e73756666696369656e7420616d6f756e74206f66204554482073656e74206044820152663a37903ab9b2b960c91b6064820152608401610748565b505b33600081815260126020908152604080832089845290915290819020805460ff1916600117905560048054915163c690579760e01b815230918101919091526024810192909252604482018790526064820184905282151560848301526001600160a01b03169063c69057979060a401600060405180830381600087803b15801561175d57600080fd5b505af1158015610bc5573d6000803e3d6000fd5b3360009081526011602090815260408083208484528252808320546010909252822054610c8391906125ab565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190612437565b509195945050505050565b61182b612058565b600082815260106020526040902060010154421061189a5760405162461bcd60e51b815260206004820152602660248201527f4f7074696f6e206973206578706972656420616e642063616e6e6f7420626520604482015265189bdd59da1d60d21b6064820152608401610748565b60008281526010602052604090206003015460ff16801561191d57600e548211156119005760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742065786365656473206d61782062757960501b6044820152606401610748565b81600e600082825461191291906125ca565b909155506119809050565b600d548211156119685760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742065786365656473206d61782062757960501b6044820152606401610748565b81600d600082825461197a91906125ca565b90915550505b6000620f424061198e61179e565b611998919061249d565b600085815260106020526040812060010154919250806119b6610dd8565b905060006119c382612102565b6000898152601060205260409020549091508615611a8757600554604051630b6f6db160e31b815260016004820152602481018790526044810183905260648101889052608481018490526001600160a01b0390911690635b7b6d889060a401602060405180830381865afa158015611a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6491906125e1565b611a76670de0b6b3a76400008a61249d565b611a8091906125ab565b9350611b2f565b600554604051630b6f6db160e31b815260006004820152602481018790526044810183905260648101889052608481018490526001600160a01b0390911690635b7b6d889060a401602060405180830381865afa158015611aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1091906125e1565b611b22670de0b6b3a76400008a61249d565b611b2c91906125ab565b93505b611b41670de0b6b3a76400008961249d565b3360009081526011602090815260408083208d845290915281208054909190611b6b9084906124d5565b9091555060009050611b7d878661249d565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf9919061258e565b611c3e5760405162461bcd60e51b8152602060048201526016602482015275141c995b5a5d5b481c185e5b595b9d0819985a5b195960521b6044820152606401610748565b600480546009546040516307f7059560e51b81523093810193909352336024840152604483018d9052606483018c9052608483018890524260a484015260c48301526001600160a01b03169063fee0b2a09060e401600060405180830381600087803b158015611cad57600080fd5b505af1158015611cc1573d6000803e3d6000fd5b505050505050505050505050611cd660018055565b5050565b611ce2611e90565b6001600160a01b038116611d475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610748565b610dd5816120b2565b611d58612058565b611d60611e1a565b15611d7d5760405162461bcd60e51b81526004016107489061254c565b60003411611dcd5760405162461bcd60e51b815260206004820152601c60248201527f496e636f727265637420616d6f756e74206f66204554482073656e74000000006044820152606401610748565b34600e6000828254611ddf91906124d5565b9091555050336000908152600f602090815260408083206001845290915281208054349290611e0f9084906124d5565b909155505060018055565b600060075442118015611e3b5750600a54600754611e3891906124d5565b42105b15611e465750600090565b600a54600754611e5691906124d5565b42118015611e7f5750600654600a54600754611e7291906124d5565b611e7c91906124d5565b42105b15611e8a5750600190565b50600290565b6000546001600160a01b03163314610f9d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610748565b60408051600380825260808201909252606091600091906020820184803683370190505090508215611fb657611f21600a8561249d565b611f2b90856125ca565b81600081518110611f3e57611f3e6124bf565b6020908102919091010152611f5460058561249d565b611f5e90856125ca565b81600181518110611f7157611f716124bf565b6020908102919091010152611f8760038561249d565b611f9190856125ca565b81600281518110611fa457611fa46124bf565b60209081029190910101529050610c83565b611fc1600a8561249d565b611fcb90856124d5565b81600081518110611fde57611fde6124bf565b6020908102919091010152611ff460058561249d565b611ffe90856124d5565b81600181518110612011576120116124bf565b602090810291909101015261202760038561249d565b61203190856124d5565b81600281518110612044576120446124bf565b6020026020010181815250505b9392505050565b600260015414156120ab5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610748565b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805160009081805b8281101561214b57848181518110612124576121246124bf565b60200260200101518261213791906124d5565b91508061214381612531565b91505061210a565b50612156828261249d565b90506000805b8381101561220557600083878381518110612179576121796124bf565b602002602001015111156121b3578387838151811061219a5761219a6124bf565b60200260200101516121ac91906125ca565b90506121db565b8682815181106121c5576121c56124bf565b6020026020010151846121d891906125ca565b90505b6121e581806125ab565b6121ef90846124d5565b92505080806121fd90612531565b91505061215c565b506000612212848361249d565b9050600061109c82600080600261222a8460016124d5565b612234919061249d565b9050825b8082101561205157508060028161224f818761249d565b61225991906124d5565b612263919061249d565b9150612238565b8280548282559060005260206000209081019282156122a5579160200282015b828111156122a557825182559160200191906001019061228a565b506122b19291506122b5565b5090565b5b808211156122b157600081556001016122b6565b6000602082840312156122dc57600080fd5b5035919050565b80356001600160a01b03811681146122fa57600080fd5b919050565b6000806040838503121561231257600080fd5b61231b836122e3565b946020939093013593505050565b8015158114610dd557600080fd5b60008060006060848603121561234c57600080fd5b83359250602084013561235e81612329565b929592945050506040919091013590565b6000806040838503121561238257600080fd5b82359150602083013561239481612329565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156123d7578351835292840192918401916001016123bb565b50909695505050505050565b600080604083850312156123f657600080fd5b50508035926020909101359150565b60006020828403121561241757600080fd5b612051826122e3565b80516001600160501b03811681146122fa57600080fd5b600080600080600060a0868803121561244f57600080fd5b61245886612420565b945060208601519350604086015192506060860151915061247b60808701612420565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000826124ba57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082198211156124e8576124e8612487565b500190565b6001600160a01b03978816815260208101969096526040860194909452919094166060840152608083019390935260a082019290925260c081019190915260e00190565b600060001982141561254557612545612487565b5060010190565b60208082526022908201527f4c69717569646974792070726f766964696e672074696d652068617320656e64604082015261195960f21b606082015260800190565b6000602082840312156125a057600080fd5b815161205181612329565b60008160001904831182151516156125c5576125c5612487565b500290565b6000828210156125dc576125dc612487565b500390565b6000602082840312156125f357600080fd5b5051919050565b60006001600160501b0380831681851680830382111561261c5761261c612487565b0194935050505056fea26469706673582212208f4c8fabf284d91dacd85e7666f4231de442fd411f1d86f7ba486d5ce530118a64736f6c634300080b0033a264697066735822122044ce5e78497a5526786d32f7c4fccf0dcf261645c2ac7a5ca52c8804d7eaa33b64736f6c634300080b0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000c35760003560e01c80638da5cb5b116200007a5780638da5cb5b1462000181578063bee3d1611462000193578063c690579714620001ac578063e29e49fb14620001c3578063f2fde38b14620001d7578063fee0b2a014620001ee57600080fd5b80631646879f14620000c85780631e3394fb14620000e1578063263216a01462000112578063571f1482146200014957806358c41cc31462000160578063715018a61462000177575b600080fd5b620000df620000d9366004620009b2565b62000205565b005b600354620000f5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001386200012336600462000a1c565b60056020526000908152604090205460ff1681565b604051901515815260200162000109565b620000df6200015a36600462000a43565b620002ac565b620000df62000171366004620009b2565b620004e8565b620000df6200057a565b6000546001600160a01b0316620000f5565b6200019d62000592565b60405162000109919062000a81565b620000df620001bd36600462000ad0565b620005a5565b600454620000f5906001600160a01b031681565b620000df620001e836600462000a1c565b6200063d565b620000df620001ff36600462000b3a565b620006bc565b6200021260013362000756565b806200021d57503330145b620002455760405162461bcd60e51b81526004016200023c9062000ba1565b60405180910390fd5b604080518681526001600160a01b038681166020830152918101859052606081018490526080810183905287918916907f7d2ed896fb6db818073ca603e12bd04646f1043d5e271e6c8d3343999dc8f9cf9060a0015b60405180910390a350505050505050565b620002b66200077d565b60048054604051633200bddf60e01b81526001600160a01b038581169382019390935260009290911690633200bddf90602401602060405180830381865afa15801562000307573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032d919062000bed565b90506001600160a01b0381166200037f5760405162461bcd60e51b815260206004820152601560248201527413919508151bdad95b881b9bdd0818dc99585d1959605a1b60448201526064016200023c565b6001600160a01b03811660009081526005602052604090205460ff1615620003f65760405162461bcd60e51b8152602060048201526024808201527f4f7074696f6e7320616c7265616479206372656174656420666f7220746869736044820152630813919560e21b60648201526084016200023c565b60035460405183916000918391859130916001600160a01b03169033906200041e906200098e565b6001600160a01b0395861681529385166020850152918416604084015283166060830152909116608082015260a001604051809103906000f0801580156200046a573d6000803e3d6000fd5b5090506200047a600182620007d9565b506001600160a01b03838116600081815260056020908152604091829020805460ff1916600117905581518585168152938916908401528201527f1efbb0e97f8865812a8d21422b30f678d86b46b09f8a83a5613e4cb9f9859eb39060600160405180910390a15050505050565b620004f560013362000756565b806200050057503330145b6200051f5760405162461bcd60e51b81526004016200023c9062000ba1565b604080518681526001600160a01b038681166020830152918101859052606081018490526080810183905287918916907f93960e277e5f1a1bcf2ecb4638789539be8c5f6fd5482220f93f031296ef55359060a0016200029b565b620005846200077d565b620005906000620007f0565b565b6060620005a0600162000840565b905090565b620005b260013362000756565b80620005bd57503330145b620005dc5760405162461bcd60e51b81526004016200023c9062000ba1565b82846001600160a01b0316866001600160a01b03167f48ce4d1077255ea4b6f98a25f90db5729f884d73101b7e623a9d6f518230dd7a85856040516200062e9291909182521515602082015260400190565b60405180910390a45050505050565b620006476200077d565b6001600160a01b038116620006ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200023c565b620006b981620007f0565b50565b620006c960013362000756565b80620006d457503330145b620006f35760405162461bcd60e51b81526004016200023c9062000ba1565b60408051858152602081018590529081018390526060810182905285906001600160a01b0380891691908a16907f8a5254432535d4192429d2cc163283a57784eac274295fcda17cc659c1ee414c9060800160405180910390a450505050505050565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b6000546001600160a01b03163314620005905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200023c565b600062000774836001600160a01b038416620008fc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060006200084f836200094e565b905060008167ffffffffffffffff8111156200086f576200086f62000c0d565b60405190808252806020026020018201604052801562000899578160200160208202803683370190505b50905060005b82811015620008f457620008b4858262000959565b828281518110620008c957620008c962000c23565b6001600160a01b0390921660209283029190910190910152620008ec8162000c39565b90506200089f565b509392505050565b6000818152600183016020526040812054620009455750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000777565b50600062000777565b600062000777825490565b600062000774838360008260000182815481106200097b576200097b62000c23565b9060005260206000200154905092915050565b6128e58062000c6483390190565b6001600160a01b0381168114620006b957600080fd5b600080600080600080600060e0888a031215620009ce57600080fd5b8735620009db816200099c565b965060208801359550604088013594506060880135620009fb816200099c565b9699959850939660808101359560a0820135955060c0909101359350915050565b60006020828403121562000a2f57600080fd5b813562000a3c816200099c565b9392505050565b6000806040838503121562000a5757600080fd5b823562000a64816200099c565b9150602083013562000a76816200099c565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101562000ac45783516001600160a01b03168352928401929184019160010162000a9d565b50909695505050505050565b600080600080600060a0868803121562000ae957600080fd5b853562000af6816200099c565b9450602086013562000b08816200099c565b935060408601359250606086013591506080860135801515811462000b2c57600080fd5b809150509295509295909350565b600080600080600080600060e0888a03121562000b5657600080fd5b873562000b63816200099c565b9650602088013562000b75816200099c565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b6020808252602c908201527f4f6e6c79204f7074696f6e7320436f6e74726163742063616e2063616c6c207460408201526b3434b990333ab731ba34b7b760a11b606082015260800190565b60006020828403121562000c0057600080fd5b815162000a3c816200099c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141562000c5c57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405261012c60065560186008556078600a553480156200002157600080fd5b50604051620028e5380380620028e58339810160408190526200004491620001fa565b6200004f33620000b3565b60018055600280546001600160a01b038088166001600160a01b03199283161790925560038054878416908316179055600480548684169083161790556005805492851692909116919091179055620000a88162000103565b50505050506200027a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200010d62000186565b6001600160a01b038116620001785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200018381620000b3565b50565b6000546001600160a01b03163314620001e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200016f565b565b6001600160a01b03811681146200018357600080fd5b600080600080600060a086880312156200021357600080fd5b85516200022081620001e4565b60208701519095506200023381620001e4565b60408701519094506200024681620001e4565b60608701519093506200025981620001e4565b60808701519092506200026c81620001e4565b809150509295509295909350565b61265b806200028a6000396000f3fe6080604052600436106102045760003560e01c80638da5cb5b11610118578063c0c2e53a116100a0578063d6febde81161006f578063d6febde814610652578063e00dd16114610672578063f2fde38b14610688578063f6326fb3146106a8578063fcaa7664146106b057600080fd5b8063c0c2e53a1461059a578063c4912774146105e5578063cfbdfc5f146105fa578063d06fcba81461063257600080fd5b8063a7052ed8116100e7578063a7052ed8146104f9578063b07f0a4114610531578063b28d916a14610544578063b49631e91461055a578063bdf82a221461057a57600080fd5b80638da5cb5b1461049a578063900cf0cf146104b8578063947a36fb146104ce578063a2c8b177146104e457600080fd5b806333b521a61161019b5780634cfe6f931161016a5780634cfe6f93146104245780635e4db5fd146104395780636053937b1461044f578063715018a614610465578063822752081461047a57600080fd5b806333b521a6146103395780633d168294146103c15780634530a2d7146103ee5780634c61670d1461040457600080fd5b8063110bd49b116101d7578063110bd49b146102ab5780631e3394fb146102cb5780631f93d1b31461030357806322a900821461031957600080fd5b806301cceb38146102095780630899b1411461022b57806308f433331461024b57806310a64fc414610296575b600080fd5b34801561021557600080fd5b506102296102243660046122ca565b6106c5565b005b34801561023757600080fd5b506102296102463660046122ca565b6106d2565b34801561025757600080fd5b506102836102663660046122ff565b600f60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156102a257600080fd5b506102296106df565b3480156102b757600080fd5b506102836102c6366004612337565b610bd0565b3480156102d757600080fd5b506005546102eb906001600160a01b031681565b6040516001600160a01b03909116815260200161028d565b34801561030f57600080fd5b5061028360075481565b34801561032557600080fd5b506102296103343660046122ca565b610c0e565b34801561034557600080fd5b5061038e6103543660046122ca565b60106020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160501b031685565b60408051958652602086019490945292840191909152151560608301526001600160501b0316608082015260a00161028d565b3480156103cd57600080fd5b506103e16103dc36600461236f565b610c1b565b60405161028d919061239f565b3480156103fa57600080fd5b5061028360065481565b34801561041057600080fd5b5061022961041f3660046122ca565b610c89565b34801561043057600080fd5b506103e1610dd8565b34801561044557600080fd5b50610283600e5481565b34801561045b57600080fd5b50610283600d5481565b34801561047157600080fd5b50610229610f8b565b34801561048657600080fd5b506102836104953660046123e3565b610f9f565b3480156104a657600080fd5b506000546001600160a01b03166102eb565b3480156104c457600080fd5b5061028360095481565b3480156104da57600080fd5b5061028360085481565b3480156104f057600080fd5b506102296110a7565b34801561050557600080fd5b50600c54610519906001600160501b031681565b6040516001600160501b03909116815260200161028d565b61022961053f3660046122ca565b61111f565b34801561055057600080fd5b50610283600a5481565b34801561056657600080fd5b506004546102eb906001600160a01b031681565b34801561058657600080fd5b506102836105953660046122ca565b611771565b3480156105a657600080fd5b506105d56105b53660046122ff565b601260209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161028d565b3480156105f157600080fd5b5061028361179e565b34801561060657600080fd5b506102836106153660046122ff565b601160209081526000928352604080842090915290825290205481565b34801561063e57600080fd5b506003546102eb906001600160a01b031681565b34801561065e57600080fd5b5061022961066d3660046123e3565b611823565b34801561067e57600080fd5b50610283600b5481565b34801561069457600080fd5b506102296106a3366004612405565b611cda565b610229611d50565b3480156106bc57600080fd5b50610283611e1a565b6106cd611e90565b600655565b6106da611e90565b600a55565b6106e7611e90565b6106ef611e1a565b6001146107515760405162461bcd60e51b815260206004820152602560248201527f4c69717569646974792070726f766964696e672074696d65206e6f74206f76656044820152641c881e595d60da1b60648201526084015b60405180910390fd5b600061075b61179e565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190612437565b5050505090506000620f4240836107ed919061249d565b905060006107fc826000611eea565b9050600061080b836001611eea565b9050600042905060006003600d54610823919061249d565b905060006003600e54610836919061249d565b905060005b8551811015610b6e576040518060a00160405280878381518110610861576108616124bf565b602002602001015181526020016006548661087c91906124d5565b81526020808201869052600060408084018290526001600160501b03808e16606095860152600b5483526010845291819020855181559285015160018401558481015160028401559284015160039092018054608090950151909116610100026affffffffffffffffffff0019921515929092166affffffffffffffffffffff199094169390931717909155805160a0810190915285518190879084908110610927576109276124bf565b602002602001015181526020016006548661094291906124d5565b8152602001838152602001600115158152602001896001600160501b031681525060106000600b54600161097691906124d5565b815260208082019290925260409081016000208351815591830151600183015582015160028201556060820151600391820180546080909401516001600160501b0316610100026affffffffffffffffffff0019921515929092166affffffffffffffffffffff199094169390931717909155600454600b54600954925489516001600160a01b0393841694631646879f9430949391929116908c9088908110610a2257610a226124bf565b60200260200101518a6006548c610a3991906124d5565b6040518863ffffffff1660e01b8152600401610a5b97969594939291906124ed565b600060405180830381600087803b158015610a7557600080fd5b505af1158015610a89573d6000803e3d6000fd5b5050600454600b546001600160a01b0390911692506358c41cc391503090610ab29060016124d5565b6009546003548a516001600160a01b03909116908b9088908110610ad857610ad86124bf565b60200260200101518a6006548c610aef91906124d5565b6040518863ffffffff1660e01b8152600401610b1197969594939291906124ed565b600060405180830381600087803b158015610b2b57600080fd5b505af1158015610b3f573d6000803e3d6000fd5b505050506002600b6000828254610b5691906124d5565b90915550819050610b6681612531565b91505061083b565b50600954600090815260136020908152604080832083805282529091208651610b999288019061226a565b5060095460009081526013602090815260408083206001845282529091208551610bc59287019061226a565b505050505050505050565b60136020528260005260406000206020528160005260406000208181548110610bf857600080fd5b9060005260206000200160009250925050505481565b610c16611e90565b600855565b60008281526013602090815260408083208415158452825291829020805483518184028101840190945280845260609392830182828015610c7b57602002820191906000526020600020905b815481526020019060010190808311610c67575b505050505090505b92915050565b610c91612058565b610c99611e1a565b15610cb65760405162461bcd60e51b81526004016107489061254c565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d31919061258e565b610d885760405162461bcd60e51b815260206004820152602260248201527f496e636f727265637420616d6f756e74206f66204e465420546f6b656e2073656044820152611b9d60f21b6064820152608401610748565b80600d6000828254610d9a91906124d5565b9091555050336000908152600f6020908152604080832083805290915281208054839290610dc99084906124d5565b90915550506001805550565b50565b6040805160078082526101008201909252606091600091906020820160e080368337019050509050600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a9190612437565b505050915091508083600081518110610e9557610e956124bf565b602090810291909101015260015b6007811015610f82576002546008546000916001600160a01b031690639a6fc8f590610ed09085906125ab565b610ee3906001600160501b0388166125ca565b6040516001600160e01b031960e084901b1681526001600160501b03909116600482015260240160a060405180830381865afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190612437565b50505091505080858381518110610f6457610f646124bf565b60209081029190910101525080610f7a81612531565b915050610ea3565b50919392505050565b610f93611e90565b610f9d60006120b2565b565b600080610faa61179e565b90506000610fbb620f42408361249d565b90506000610fc7610dd8565b90506000610fd482612102565b600554600089815260106020526040908190206003810154600182015491549251630b6f6db160e31b815260ff909116151560048201526024810191909152604481019190915260648101869052608481018390529192506001600160a01b031690635b7b6d889060a401602060405180830381865afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906125e1565b611092670de0b6b3a76400008861249d565b61109c91906125ab565b979650505050505050565b6110af611e1a565b6002146110fe5760405162461bcd60e51b815260206004820152601760248201527f45706f636820686173206e6f7420656e646564207965740000000000000000006044820152606401610748565b4260078190555060016009600082825461111891906124d5565b9091555050565b3360009081526011602090815260408083208484529091529020546111865760405162461bcd60e51b815260206004820152601a60248201527f596f7520646f206e6f74206f776e2074686973206f7074696f6e0000000000006044820152606401610748565b33600090815260126020908152604080832084845290915290205460ff16156111fb5760405162461bcd60e51b815260206004820152602160248201527f4f7074696f6e2068617320616c7265616479206265656e2065786572636973656044820152601960fa1b6064820152608401610748565b60008181526010602052604090206001015442116112535760405162461bcd60e51b815260206004820152601560248201527413dc1d1a5bdb881a5cc81b9bdd08195e1c1a5c9959605a1b6044820152606401610748565b6002546008546000916001600160a01b031690639a6fc8f5906112779060076125ab565b6000858152601060205260409020600301546112a1919061010090046001600160501b03166125fa565b6040516001600160e01b031960e084901b1681526001600160501b03909116600482015260240160a060405180830381865afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113099190612437565b5050509150506000620f424082611320919061249d565b60008481526010602052604081206003015491925090819060ff166114e1576000858152601060205260409020548311156114dc5750600161136185611771565b91508134146113c85760405162461bcd60e51b815260206004820152602d60248201527f496e636f727265637420616d6f756e74206f66204554482073656e7420746f2060448201526c313abc9027232a102a37b5b2b760991b6064820152608401610748565b6003543360008181526011602090815260408083208a84529091529020546001600160a01b039092169163a9059cbb919061140b90670de0b6b3a76400006125ab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a919061258e565b6114dc5760405162461bcd60e51b815260206004820152602d60248201527f496e73756666696369656e7420616d6f756e74206f66204e465420546f6b656e60448201526c1039b2b73a103a37903ab9b2b960991b6064820152608401610748565b6116d3565b6000858152601060205260409020548310156116d35750600161150385611771565b6003543360008181526011602090815260408083208b84529091529020549294506001600160a01b03909116916323b872dd9190309061154b90670de0b6b3a76400006125ab565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c3919061258e565b6116295760405162461bcd60e51b815260206004820152603160248201527f496e73756666696369656e7420616d6f756e74206f66204e465420546f6b656e604482015270081cd95b9d081d1bc81c1c9bdd1bd8dbdb607a1b6064820152608401610748565b604051600090339084908381818185875af1925050503d806000811461166b576040519150601f19603f3d011682016040523d82523d6000602084013e611670565b606091505b50509050806116d15760405162461bcd60e51b815260206004820152602760248201527f496e73756666696369656e7420616d6f756e74206f66204554482073656e74206044820152663a37903ab9b2b960c91b6064820152608401610748565b505b33600081815260126020908152604080832089845290915290819020805460ff1916600117905560048054915163c690579760e01b815230918101919091526024810192909252604482018790526064820184905282151560848301526001600160a01b03169063c69057979060a401600060405180830381600087803b15801561175d57600080fd5b505af1158015610bc5573d6000803e3d6000fd5b3360009081526011602090815260408083208484528252808320546010909252822054610c8391906125ab565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190612437565b509195945050505050565b61182b612058565b600082815260106020526040902060010154421061189a5760405162461bcd60e51b815260206004820152602660248201527f4f7074696f6e206973206578706972656420616e642063616e6e6f7420626520604482015265189bdd59da1d60d21b6064820152608401610748565b60008281526010602052604090206003015460ff16801561191d57600e548211156119005760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742065786365656473206d61782062757960501b6044820152606401610748565b81600e600082825461191291906125ca565b909155506119809050565b600d548211156119685760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742065786365656473206d61782062757960501b6044820152606401610748565b81600d600082825461197a91906125ca565b90915550505b6000620f424061198e61179e565b611998919061249d565b600085815260106020526040812060010154919250806119b6610dd8565b905060006119c382612102565b6000898152601060205260409020549091508615611a8757600554604051630b6f6db160e31b815260016004820152602481018790526044810183905260648101889052608481018490526001600160a01b0390911690635b7b6d889060a401602060405180830381865afa158015611a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6491906125e1565b611a76670de0b6b3a76400008a61249d565b611a8091906125ab565b9350611b2f565b600554604051630b6f6db160e31b815260006004820152602481018790526044810183905260648101889052608481018490526001600160a01b0390911690635b7b6d889060a401602060405180830381865afa158015611aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1091906125e1565b611b22670de0b6b3a76400008a61249d565b611b2c91906125ab565b93505b611b41670de0b6b3a76400008961249d565b3360009081526011602090815260408083208d845290915281208054909190611b6b9084906124d5565b9091555060009050611b7d878661249d565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf9919061258e565b611c3e5760405162461bcd60e51b8152602060048201526016602482015275141c995b5a5d5b481c185e5b595b9d0819985a5b195960521b6044820152606401610748565b600480546009546040516307f7059560e51b81523093810193909352336024840152604483018d9052606483018c9052608483018890524260a484015260c48301526001600160a01b03169063fee0b2a09060e401600060405180830381600087803b158015611cad57600080fd5b505af1158015611cc1573d6000803e3d6000fd5b505050505050505050505050611cd660018055565b5050565b611ce2611e90565b6001600160a01b038116611d475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610748565b610dd5816120b2565b611d58612058565b611d60611e1a565b15611d7d5760405162461bcd60e51b81526004016107489061254c565b60003411611dcd5760405162461bcd60e51b815260206004820152601c60248201527f496e636f727265637420616d6f756e74206f66204554482073656e74000000006044820152606401610748565b34600e6000828254611ddf91906124d5565b9091555050336000908152600f602090815260408083206001845290915281208054349290611e0f9084906124d5565b909155505060018055565b600060075442118015611e3b5750600a54600754611e3891906124d5565b42105b15611e465750600090565b600a54600754611e5691906124d5565b42118015611e7f5750600654600a54600754611e7291906124d5565b611e7c91906124d5565b42105b15611e8a5750600190565b50600290565b6000546001600160a01b03163314610f9d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610748565b60408051600380825260808201909252606091600091906020820184803683370190505090508215611fb657611f21600a8561249d565b611f2b90856125ca565b81600081518110611f3e57611f3e6124bf565b6020908102919091010152611f5460058561249d565b611f5e90856125ca565b81600181518110611f7157611f716124bf565b6020908102919091010152611f8760038561249d565b611f9190856125ca565b81600281518110611fa457611fa46124bf565b60209081029190910101529050610c83565b611fc1600a8561249d565b611fcb90856124d5565b81600081518110611fde57611fde6124bf565b6020908102919091010152611ff460058561249d565b611ffe90856124d5565b81600181518110612011576120116124bf565b602090810291909101015261202760038561249d565b61203190856124d5565b81600281518110612044576120446124bf565b6020026020010181815250505b9392505050565b600260015414156120ab5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610748565b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805160009081805b8281101561214b57848181518110612124576121246124bf565b60200260200101518261213791906124d5565b91508061214381612531565b91505061210a565b50612156828261249d565b90506000805b8381101561220557600083878381518110612179576121796124bf565b602002602001015111156121b3578387838151811061219a5761219a6124bf565b60200260200101516121ac91906125ca565b90506121db565b8682815181106121c5576121c56124bf565b6020026020010151846121d891906125ca565b90505b6121e581806125ab565b6121ef90846124d5565b92505080806121fd90612531565b91505061215c565b506000612212848361249d565b9050600061109c82600080600261222a8460016124d5565b612234919061249d565b9050825b8082101561205157508060028161224f818761249d565b61225991906124d5565b612263919061249d565b9150612238565b8280548282559060005260206000209081019282156122a5579160200282015b828111156122a557825182559160200191906001019061228a565b506122b19291506122b5565b5090565b5b808211156122b157600081556001016122b6565b6000602082840312156122dc57600080fd5b5035919050565b80356001600160a01b03811681146122fa57600080fd5b919050565b6000806040838503121561231257600080fd5b61231b836122e3565b946020939093013593505050565b8015158114610dd557600080fd5b60008060006060848603121561234c57600080fd5b83359250602084013561235e81612329565b929592945050506040919091013590565b6000806040838503121561238257600080fd5b82359150602083013561239481612329565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156123d7578351835292840192918401916001016123bb565b50909695505050505050565b600080604083850312156123f657600080fd5b50508035926020909101359150565b60006020828403121561241757600080fd5b612051826122e3565b80516001600160501b03811681146122fa57600080fd5b600080600080600060a0868803121561244f57600080fd5b61245886612420565b945060208601519350604086015192506060860151915061247b60808701612420565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000826124ba57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082198211156124e8576124e8612487565b500190565b6001600160a01b03978816815260208101969096526040860194909452919094166060840152608083019390935260a082019290925260c081019190915260e00190565b600060001982141561254557612545612487565b5060010190565b60208082526022908201527f4c69717569646974792070726f766964696e672074696d652068617320656e64604082015261195960f21b606082015260800190565b6000602082840312156125a057600080fd5b815161205181612329565b60008160001904831182151516156125c5576125c5612487565b500290565b6000828210156125dc576125dc612487565b500390565b6000602082840312156125f357600080fd5b5051919050565b60006001600160501b0380831681851680830382111561261c5761261c612487565b0194935050505056fea26469706673582212208f4c8fabf284d91dacd85e7666f4231de442fd411f1d86f7ba486d5ce530118a64736f6c634300080b0033a264697066735822122044ce5e78497a5526786d32f7c4fccf0dcf261645c2ac7a5ca52c8804d7eaa33b64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_grinder": "Bluebird Grinder Contract",
          "_optionPricing": "Option Pricing Contract"
        }
      },
      "createOptions(address,address)": {
        "params": {
          "_collectionAddress": "Collection Address",
          "_nftFeedAddress": "Chainlink Feed Address"
        }
      },
      "emitBoughtEvent(address,address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount",
          "_contractAddress": "Address of options contract",
          "_epoch": "Epoch",
          "_order": "Order ID",
          "_premium": "Premium",
          "_timestamp": "Timestamp",
          "_user": "User Address"
        }
      },
      "emitCallOptionCreatedEvent(address,uint256,uint256,address,uint256,uint256,uint256)": {
        "params": {
          "_contractAddress": "Address of options contract",
          "_epoch": "Epoch",
          "_expiry": "Expiry Time",
          "_nftToken": "NFT Token Address",
          "_optionId": "Option ID",
          "_start": "Start Time",
          "_strikePrice": "Strike Price"
        }
      },
      "emitExerciseEvent(address,address,uint256,uint256,bool)": {
        "params": {
          "_contractAddress": "Address of options contract",
          "_id": "Order ID",
          "_pnl": "PnL",
          "_profit": "Profit",
          "_user": "User Address"
        }
      },
      "emitPutOptionCreatedEvent(address,uint256,uint256,address,uint256,uint256,uint256)": {
        "params": {
          "_contractAddress": "Address of options contract",
          "_epoch": "Epoch",
          "_expiry": "Expiry Time",
          "_nftToken": "NFT Token Address",
          "_optionId": "Option ID",
          "_start": "Start Time",
          "_strikePrice": "Strike Price"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BluebirdManager - Manager contracts for Bluebird Options individual contracts",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Bought(address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when an option is bought"
      },
      "CallOptionCreated(address,uint256,uint256,address,uint256,uint256,uint256)": {
        "notice": "Emit when Call Option Contract is Created"
      },
      "Exercised(address,address,uint256,uint256,bool)": {
        "notice": "Emitted when a user claims profits"
      },
      "OptionContractCreated(address,address,address)": {
        "notice": "Emitted when new option contract is created"
      },
      "PutOptionCreated(address,uint256,uint256,address,uint256,uint256,uint256)": {
        "notice": "Emit when Put option contract is Created"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor for Bluebird Manager"
      },
      "createOptions(address,address)": {
        "notice": "Create a Put and Call Options for a specified collection for the current epoch"
      },
      "emitBoughtEvent(address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Proxy function to emit event from options contract"
      },
      "emitCallOptionCreatedEvent(address,uint256,uint256,address,uint256,uint256,uint256)": {
        "notice": "Proxy function to emit event from options contract"
      },
      "emitExerciseEvent(address,address,uint256,uint256,bool)": {
        "notice": "Proxy function to emit event from options contract"
      },
      "emitPutOptionCreatedEvent(address,uint256,uint256,address,uint256,uint256,uint256)": {
        "notice": "Proxy function to emit event from options contract"
      },
      "getOptArray()": {
        "notice": "Function to retrieve options array"
      },
      "grinder()": {
        "notice": "Bluebird Grinder Contract"
      },
      "optionExists(address)": {
        "notice": "Mapping of NFT token address to boolean to check if options have been created"
      },
      "optionPricing()": {
        "notice": "Option Pricing Contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 148,
        "contract": "contracts/BluebirdManager.sol:BluebirdManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2238,
        "contract": "contracts/BluebirdManager.sol:BluebirdManager",
        "label": "optArray",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)1500_storage"
      },
      {
        "astId": 2242,
        "contract": "contracts/BluebirdManager.sol:BluebirdManager",
        "label": "optionPricing",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOptionPricing)4021"
      },
      {
        "astId": 2246,
        "contract": "contracts/BluebirdManager.sol:BluebirdManager",
        "label": "grinder",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBluebirdGrinder)3804"
      },
      {
        "astId": 2251,
        "contract": "contracts/BluebirdManager.sol:BluebirdManager",
        "label": "optionExists",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBluebirdGrinder)3804": {
        "encoding": "inplace",
        "label": "contract IBluebirdGrinder",
        "numberOfBytes": "20"
      },
      "t_contract(IOptionPricing)4021": {
        "encoding": "inplace",
        "label": "contract IOptionPricing",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1500_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1499,
            "contract": "contracts/BluebirdManager.sol:BluebirdManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1185_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1185_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1180,
            "contract": "contracts/BluebirdManager.sol:BluebirdManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1184,
            "contract": "contracts/BluebirdManager.sol:BluebirdManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}