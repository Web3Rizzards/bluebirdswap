{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/BBYC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\n// import erc721\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n/// @title Mock ERC721 contract\ncontract BBYC is ERC721 {\n    uint256 public index = 1;\n\n    constructor() ERC721(\"Blue Bird Yatch Club\", \"BBYC\") {}\n\n    function mint() external {\n        _safeMint(msg.sender, index);\n        index++;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return index;\n    }\n}\n"
    },
    "contracts/interfaces/IBluebirdManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\n/// @title IBluebird Manager\n/// @notice The Bluebird Options Manager\ninterface IBluebirdManager {\n    /**\n     * @notice Emit when Call Option Contract is Created\n     * @param _contractAddress Address of the contract created\n     * @param _nftFeed Address of the NFT Oracle Feed from Chainlink\n     * @param epoch Epoch of the option\n     * @param _strikePrices Fixed strike prices\n     * @param _start Start time of epoch\n     * @param _expiry End time of epoch\n     */\n    event CallOptionCreated(\n        address indexed _contractAddress,\n        address indexed _nftFeed,\n        address indexed _nftToken,\n        uint256 epoch,\n        uint256[] _strikePrices,\n        uint256 _start,\n        uint256 _expiry\n    );\n\n    /**\n     * @notice Emit when ut option contract is Created\n     * @param _contractAddress Address of the contract created\n     * @param _nftFeed Address of the NFT Oracle Feed from Chainlink\n     * @param epoch Epoch of the option\n     * @param _strikePrices Fixed strike prices\n     * @param _start Start time of epoch\n     * @param _expiry End time of epoch\n     */\n    event PutOptionCreated(\n        address indexed _contractAddress,\n        address indexed _nftFeed,\n        address indexed _nftToken,\n        uint256 epoch,\n        uint256[] _strikePrices,\n        uint256 _start,\n        uint256 _expiry\n    );\n\n    /**\n     * @notice Emitted when an option is bought\n     * @param _user User's address\n     * @param _order Order Index\n     * @param _amount Lots purchased\n     * @param _strikePrice Strike price of purchase\n     * @param _premium Premium paid\n     * @param _isPut Is the option a put option\n     * @param _timestamp Timestamp of purchase\n     * @param _epoch Epoch of the option\n     * @param _nftToken Address of the NFT Token\n     */\n    event Bought(\n        address indexed _user,\n        uint256 indexed _order,\n        uint256 _amount,\n        uint256 _strikePrice,\n        uint256 _premium,\n        bool _isPut,\n        uint256 _timestamp,\n        uint256 _epoch,\n        address _nftToken\n    );\n\n    /**\n     * @notice Emitted when a user claims profits\n     * @param _user User's address\n     * @param _order Order Index\n     * @param _profits User's profits\n     */\n    event Claimed(address indexed _user, uint256 indexed _order, uint256 _profits);\n\n    /**\n     * @notice Create a New Call and Put Options for the epoch\n     * @param _collectionAddress Address of the NFT Collection\n     * @param _nftFeedAddress Address of the NFT Oracle Feed from Chainlink\n     * @dev Can only create when previous epoch has expired\n     * @dev Increment epoch\n     * @dev Must be whitelisted NFT collection\n     */\n    function createOptions(address _collectionAddress, address _nftFeedAddress) external;\n\n    function emitCallOptionCreatedEvent(\n        address _contractAddress,\n        address _nftFeed,\n        address _nftToken,\n        uint256 epoch,\n        uint256[] memory _strikePrices,\n        uint256 _start,\n        uint256 _expiry\n    ) external;\n\n    function emitPutOptionCreatedEvent(\n        address _contractAddress,\n        address _nftFeed,\n        address _nftToken,\n        uint256 epoch,\n        uint256[] memory _strikePrices,\n        uint256 _start,\n        uint256 _expiry\n    ) external;\n\n    function emitBoughtEvent(\n        address _user,\n        uint256 _order,\n        uint256 _amount,\n        uint256 _strikePrice,\n        uint256 _premium,\n        bool _isPut,\n        uint256 _timestamp,\n        uint256 _epoch,\n        address _nftToken\n    ) external;\n\n    function emitClaimedEvent(address _user, uint256 _order, uint256 _profits) external;\n}\n"
    },
    "contracts/interfaces/IBluebirdOptions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\n/// @title IBluebirdOptions\n/// @notice The Bluebird Options contract will represent a options belonging to an epoch.\n/// @notice The contract will contain the strike prices for the epoch\n/// @notice The contract will only encapsulate puts or calls only\n/// @notice The contract shall be named as {NFT_SYMBOL}-{EPOCH}-{PUT/CALL}\ninterface IBluebirdOptions {\n    /**\n     * @notice Buy an option\n     * @param _id ID of the option\n     * @param _amount amount of lots to buy\n     * @param _isPut Is the option a put option\n     * @param _getPremium premium viewed before buying\n     * @dev Option must have started\n     * @dev Option must not have expired\n     * @dev `_amount` must be less than or equal to the amount of lots available\n     */\n    function buy(uint256 _id, uint256 _amount, bool _isPut, uint256 _getPremium) external;\n\n    /**\n     * @notice Claim profits, if any\n     * @param _id Order Index\n     * @dev Must be owner of order\n     */\n    function exercise(uint256 _id) external;\n\n    /**\n     * @notice Get strike prices of the current contract\n     * @param _epoch Epoch of the option\n     * @param _isPut Is the option a put option\n     */\n    function getStrikes(uint256 _epoch, bool _isPut) external view returns (uint256[] memory);\n\n    /**\n     * @notice Get premium based on option id\n     */\n    function getPremium(uint256 _id) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IOptionPricing.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IOptionPricing {\n    function getOptionPrice(\n        bool isPut,\n        uint256 expiry,\n        uint256 strike,\n        uint256 lastPrice,\n        uint256 baseIv\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/libraries/ABDKMathQuad.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\n/*\n * ABDK Math Quad Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n */\npragma solidity ^0.8.0;\n\n/**\n * Smart contract library of mathematical functions operating with IEEE 754\n * quadruple-precision binary floating-point numbers (quadruple precision\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\n * represented by bytes16 type.\n */\nlibrary ABDKMathQuad {\n    /*\n     * 0.\n     */\n    bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\n\n    /*\n     * -0.\n     */\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\n\n    /*\n     * +Infinity.\n     */\n    bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\n\n    /*\n     * -Infinity.\n     */\n    bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\n\n    /*\n     * Canonical NaN value.\n     */\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\n\n    /**\n     * Convert signed 256-bit integer number into quadruple precision number.\n     *\n     * @param x signed 256-bit integer number\n     * @return quadruple precision number\n     */\n    function fromInt(int256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) return bytes16(0);\n            else {\n                // We rely on overflow behavior here\n                uint256 result = uint256(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16383 + msb) << 112);\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 256-bit integer number\n     * rounding towards zero.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 256-bit integer number\n     */\n    function toInt(bytes16 x) internal pure returns (int256) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            require(exponent <= 16638); // Overflow\n            if (exponent < 16383) return 0; // Underflow\n\n            uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\n\n            if (exponent < 16495) result >>= 16495 - exponent;\n            else if (exponent > 16495) result <<= exponent - 16495;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\n                return -int256(result); // We rely on overflow behavior here\n            } else {\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int256(result);\n            }\n        }\n    }\n\n    /**\n     * Convert unsigned 256-bit integer number into quadruple precision number.\n     *\n     * @param x unsigned 256-bit integer number\n     * @return quadruple precision number\n     */\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) return bytes16(0);\n            else {\n                uint256 result = x;\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16383 + msb) << 112);\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into unsigned 256-bit integer number\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\n     * without error, because they are rounded to zero.\n     *\n     * @param x quadruple precision number\n     * @return unsigned 256-bit integer number\n     */\n    function toUInt(bytes16 x) internal pure returns (uint256) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            if (exponent < 16383) return 0; // Underflow\n\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\n\n            require(exponent <= 16638); // Overflow\n            uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\n\n            if (exponent < 16495) result >>= 16495 - exponent;\n            else if (exponent > 16495) result <<= exponent - 16495;\n\n            return result;\n        }\n    }\n\n    /**\n     * Convert signed 128.128 bit fixed point number into quadruple precision\n     * number.\n     *\n     * @param x signed 128.128 bit fixed point number\n     * @return quadruple precision number\n     */\n    function from128x128(int256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) return bytes16(0);\n            else {\n                // We rely on overflow behavior here\n                uint256 result = uint256(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16255 + msb) << 112);\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 128.128 bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 128.128 bit fixed point number\n     */\n    function to128x128(bytes16 x) internal pure returns (int256) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            require(exponent <= 16510); // Overflow\n            if (exponent < 16255) return 0; // Underflow\n\n            uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\n\n            if (exponent < 16367) result >>= 16367 - exponent;\n            else if (exponent > 16367) result <<= exponent - 16367;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\n                return -int256(result); // We rely on overflow behavior here\n            } else {\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int256(result);\n            }\n        }\n    }\n\n    /**\n     * Convert signed 64.64 bit fixed point number into quadruple precision\n     * number.\n     *\n     * @param x signed 64.64 bit fixed point number\n     * @return quadruple precision number\n     */\n    function from64x64(int128 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) return bytes16(0);\n            else {\n                // We rely on overflow behavior here\n                uint256 result = uint128(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16319 + msb) << 112);\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 64.64 bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 64.64 bit fixed point number\n     */\n    function to64x64(bytes16 x) internal pure returns (int128) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            require(exponent <= 16446); // Overflow\n            if (exponent < 16319) return 0; // Underflow\n\n            uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\n\n            if (exponent < 16431) result >>= 16431 - exponent;\n            else if (exponent > 16431) result <<= exponent - 16431;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(result <= 0x80000000000000000000000000000000);\n                return -int128(int256(result)); // We rely on overflow behavior here\n            } else {\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int128(int256(result));\n            }\n        }\n    }\n\n    /**\n     * Convert octuple precision number into quadruple precision number.\n     *\n     * @param x octuple precision number\n     * @return quadruple precision number\n     */\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\n        unchecked {\n            bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\n\n            uint256 exponent = (uint256(x) >> 236) & 0x7FFFF;\n            uint256 significand = uint256(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFFF) {\n                if (significand > 0) return NaN;\n                else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n            }\n\n            if (exponent > 278526) return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n            else if (exponent < 245649) return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\n            else if (exponent < 245761) {\n                significand =\n                    (significand | 0x100000000000000000000000000000000000000000000000000000000000) >>\n                    (245885 - exponent);\n                exponent = 0;\n            } else {\n                significand >>= 124;\n                exponent -= 245760;\n            }\n\n            uint128 result = uint128(significand | (exponent << 112));\n            if (negative) result |= 0x80000000000000000000000000000000;\n\n            return bytes16(result);\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into octuple precision number.\n     *\n     * @param x quadruple precision number\n     * @return octuple precision number\n     */\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFF)\n                exponent = 0x7FFFF; // Infinity or NaN\n            else if (exponent == 0) {\n                if (result > 0) {\n                    uint256 msb = mostSignificantBit(result);\n                    result = (result << (236 - msb)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    exponent = 245649 + msb;\n                }\n            } else {\n                result <<= 124;\n                exponent += 245760;\n            }\n\n            result |= exponent << 236;\n            if (uint128(x) >= 0x80000000000000000000000000000000)\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n            return bytes32(result);\n        }\n    }\n\n    /**\n     * Convert double precision number into quadruple precision number.\n     *\n     * @param x double precision number\n     * @return quadruple precision number\n     */\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\n        unchecked {\n            uint256 exponent = (uint64(x) >> 52) & 0x7FF;\n\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FF)\n                exponent = 0x7FFF; // Infinity or NaN\n            else if (exponent == 0) {\n                if (result > 0) {\n                    uint256 msb = mostSignificantBit(result);\n                    result = (result << (112 - msb)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    exponent = 15309 + msb;\n                }\n            } else {\n                result <<= 60;\n                exponent += 15360;\n            }\n\n            result |= exponent << 112;\n            if (x & 0x8000000000000000 > 0) result |= 0x80000000000000000000000000000000;\n\n            return bytes16(uint128(result));\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into double precision number.\n     *\n     * @param x quadruple precision number\n     * @return double precision number\n     */\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\n        unchecked {\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\n\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFF) {\n                if (significand > 0) return 0x7FF8000000000000;\n                // NaN\n                else\n                    return\n                        negative\n                            ? bytes8(0xFFF0000000000000) // -Infinity\n                            : bytes8(0x7FF0000000000000); // Infinity\n            }\n\n            if (exponent > 17406)\n                return\n                    negative\n                        ? bytes8(0xFFF0000000000000) // -Infinity\n                        : bytes8(0x7FF0000000000000);\n            // Infinity\n            else if (exponent < 15309)\n                return\n                    negative\n                        ? bytes8(0x8000000000000000) // -0\n                        : bytes8(0x0000000000000000);\n            // 0\n            else if (exponent < 15361) {\n                significand = (significand | 0x10000000000000000000000000000) >> (15421 - exponent);\n                exponent = 0;\n            } else {\n                significand >>= 60;\n                exponent -= 15360;\n            }\n\n            uint64 result = uint64(significand | (exponent << 52));\n            if (negative) result |= 0x8000000000000000;\n\n            return bytes8(result);\n        }\n    }\n\n    /**\n     * Test whether given quadruple precision number is NaN.\n     *\n     * @param x quadruple precision number\n     * @return true if x is NaN, false otherwise\n     */\n    function isNaN(bytes16 x) internal pure returns (bool) {\n        unchecked {\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF > 0x7FFF0000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Test whether given quadruple precision number is positive or negative\n     * infinity.\n     *\n     * @param x quadruple precision number\n     * @return true if x is positive or negative infinity, false otherwise\n     */\n    function isInfinity(bytes16 x) internal pure returns (bool) {\n        unchecked {\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0x7FFF0000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\n     *\n     * @param x quadruple precision number\n     * @return sign of x\n     */\n    function sign(bytes16 x) internal pure returns (int8) {\n        unchecked {\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            if (absoluteX == 0) return 0;\n            else if (uint128(x) >= 0x80000000000000000000000000000000) return -1;\n            else return 1;\n        }\n    }\n\n    /**\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\n     * arguments are infinities of the same sign.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return sign (x - y)\n     */\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\n        unchecked {\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            // Not infinities of the same sign\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\n\n            if (x == y) return 0;\n            else {\n                bool negativeX = uint128(x) >= 0x80000000000000000000000000000000;\n                bool negativeY = uint128(y) >= 0x80000000000000000000000000000000;\n\n                if (negativeX) {\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\n                    else return -1;\n                } else {\n                    if (negativeY) return 1;\n                    else return absoluteX > absoluteY ? int8(1) : -1;\n                }\n            }\n        }\n    }\n\n    /**\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\n     * anything.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return true if x equals to y, false otherwise\n     */\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\n        unchecked {\n            if (x == y) {\n                return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF < 0x7FFF0000000000000000000000000000;\n            } else return false;\n        }\n    }\n\n    /**\n     * Calculate x + y.  Special values behave in the following way:\n     *\n     * NaN + x = NaN for any x.\n     * Infinity + x = Infinity for any finite x.\n     * -Infinity + x = -Infinity for any finite x.\n     * Infinity + Infinity = Infinity.\n     * -Infinity + -Infinity = -Infinity.\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) {\n                    if (x == y) return x;\n                    else return NaN;\n                } else return x;\n            } else if (yExponent == 0x7FFF) return y;\n            else {\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\n                else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\n                else {\n                    int256 delta = int256(xExponent) - int256(yExponent);\n\n                    if (xSign == ySign) {\n                        if (delta > 112) return x;\n                        else if (delta > 0) ySignifier >>= uint256(delta);\n                        else if (delta < -112) return y;\n                        else if (delta < 0) {\n                            xSignifier >>= uint256(-delta);\n                            xExponent = yExponent;\n                        }\n\n                        xSignifier += ySignifier;\n\n                        if (xSignifier >= 0x20000000000000000000000000000) {\n                            xSignifier >>= 1;\n                            xExponent += 1;\n                        }\n\n                        if (xExponent == 0x7FFF) return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n                        else {\n                            if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                            return\n                                bytes16(\n                                    uint128(\n                                        (xSign ? 0x80000000000000000000000000000000 : 0) |\n                                            (xExponent << 112) |\n                                            xSignifier\n                                    )\n                                );\n                        }\n                    } else {\n                        if (delta > 0) {\n                            xSignifier <<= 1;\n                            xExponent -= 1;\n                        } else if (delta < 0) {\n                            ySignifier <<= 1;\n                            xExponent = yExponent - 1;\n                        }\n\n                        if (delta > 112) ySignifier = 1;\n                        else if (delta > 1) ySignifier = ((ySignifier - 1) >> uint256(delta - 1)) + 1;\n                        else if (delta < -112) xSignifier = 1;\n                        else if (delta < -1) xSignifier = ((xSignifier - 1) >> uint256(-delta - 1)) + 1;\n\n                        if (xSignifier >= ySignifier) xSignifier -= ySignifier;\n                        else {\n                            xSignifier = ySignifier - xSignifier;\n                            xSign = ySign;\n                        }\n\n                        if (xSignifier == 0) return POSITIVE_ZERO;\n\n                        uint256 msb = mostSignificantBit(xSignifier);\n\n                        if (msb == 113) {\n                            xSignifier = (xSignifier >> 1) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                            xExponent += 1;\n                        } else if (msb < 112) {\n                            uint256 shift = 112 - msb;\n                            if (xExponent > shift) {\n                                xSignifier = (xSignifier << shift) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                                xExponent -= shift;\n                            } else {\n                                xSignifier <<= xExponent - 1;\n                                xExponent = 0;\n                            }\n                        } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                        if (xExponent == 0x7FFF) return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n                        else\n                            return\n                                bytes16(\n                                    uint128(\n                                        (xSign ? 0x80000000000000000000000000000000 : 0) |\n                                            (xExponent << 112) |\n                                            xSignifier\n                                    )\n                                );\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate x - y.  Special values behave in the following way:\n     *\n     * NaN - x = NaN for any x.\n     * Infinity - x = Infinity for any finite x.\n     * -Infinity - x = -Infinity for any finite x.\n     * Infinity - -Infinity = Infinity.\n     * -Infinity - Infinity = -Infinity.\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            return add(x, y ^ 0x80000000000000000000000000000000);\n        }\n    }\n\n    /**\n     * Calculate x * y.  Special values behave in the following way:\n     *\n     * NaN * x = NaN for any x.\n     * Infinity * x = Infinity for any finite positive x.\n     * Infinity * x = -Infinity for any finite negative x.\n     * -Infinity * x = -Infinity for any finite positive x.\n     * -Infinity * x = Infinity for any finite negative x.\n     * Infinity * 0 = NaN.\n     * -Infinity * 0 = NaN.\n     * Infinity * Infinity = Infinity.\n     * Infinity * -Infinity = -Infinity.\n     * -Infinity * Infinity = -Infinity.\n     * -Infinity * -Infinity = Infinity.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) {\n                    if (x == y) return x ^ (y & 0x80000000000000000000000000000000);\n                    else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\n                    else return NaN;\n                } else {\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                    else return x ^ (y & 0x80000000000000000000000000000000);\n                }\n            } else if (yExponent == 0x7FFF) {\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                else return y ^ (x & 0x80000000000000000000000000000000);\n            } else {\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                xSignifier *= ySignifier;\n                if (xSignifier == 0)\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\n\n                xExponent += yExponent;\n\n                uint256 msb = xSignifier >= 0x200000000000000000000000000000000000000000000000000000000\n                    ? 225\n                    : xSignifier >= 0x100000000000000000000000000000000000000000000000000000000\n                    ? 224\n                    : mostSignificantBit(xSignifier);\n\n                if (xExponent + msb < 16496) {\n                    // Underflow\n                    xExponent = 0;\n                    xSignifier = 0;\n                } else if (xExponent + msb < 16608) {\n                    // Subnormal\n                    if (xExponent < 16496) xSignifier >>= 16496 - xExponent;\n                    else if (xExponent > 16496) xSignifier <<= xExponent - 16496;\n                    xExponent = 0;\n                } else if (xExponent + msb > 49373) {\n                    xExponent = 0x7FFF;\n                    xSignifier = 0;\n                } else {\n                    if (msb > 112) xSignifier >>= msb - 112;\n                    else if (msb < 112) xSignifier <<= 112 - msb;\n\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                    xExponent = xExponent + msb - 16607;\n                }\n\n                return\n                    bytes16(\n                        uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | (xExponent << 112) | xSignifier)\n                    );\n            }\n        }\n    }\n\n    /**\n     * Calculate x / y.  Special values behave in the following way:\n     *\n     * NaN / x = NaN for any x.\n     * x / NaN = NaN for any x.\n     * Infinity / x = Infinity for any finite non-negative x.\n     * Infinity / x = -Infinity for any finite negative x including -0.\n     * -Infinity / x = -Infinity for any finite non-negative x.\n     * -Infinity / x = Infinity for any finite negative x including -0.\n     * x / Infinity = 0 for any finite non-negative x.\n     * x / -Infinity = -0 for any finite non-negative x.\n     * x / Infinity = -0 for any finite non-negative x including -0.\n     * x / -Infinity = 0 for any finite non-negative x including -0.\n     *\n     * Infinity / Infinity = NaN.\n     * Infinity / -Infinity = -NaN.\n     * -Infinity / Infinity = -NaN.\n     * -Infinity / -Infinity = NaN.\n     *\n     * Division by zero behaves in the following way:\n     *\n     * x / 0 = Infinity for any finite positive x.\n     * x / -0 = -Infinity for any finite positive x.\n     * x / 0 = -Infinity for any finite negative x.\n     * x / -0 = Infinity for any finite negative x.\n     * 0 / 0 = NaN.\n     * 0 / -0 = NaN.\n     * -0 / 0 = NaN.\n     * -0 / -0 = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) return NaN;\n                else return x ^ (y & 0x80000000000000000000000000000000);\n            } else if (yExponent == 0x7FFF) {\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\n                else return POSITIVE_ZERO | ((x ^ y) & 0x80000000000000000000000000000000);\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                else return POSITIVE_INFINITY | ((x ^ y) & 0x80000000000000000000000000000000);\n            } else {\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) {\n                    if (xSignifier != 0) {\n                        uint256 shift = 226 - mostSignificantBit(xSignifier);\n\n                        xSignifier <<= shift;\n\n                        xExponent = 1;\n                        yExponent += shift - 114;\n                    }\n                } else {\n                    xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\n                }\n\n                xSignifier = xSignifier / ySignifier;\n                if (xSignifier == 0)\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\n\n                assert(xSignifier >= 0x1000000000000000000000000000);\n\n                uint256 msb = xSignifier >= 0x80000000000000000000000000000\n                    ? mostSignificantBit(xSignifier)\n                    : xSignifier >= 0x40000000000000000000000000000\n                    ? 114\n                    : xSignifier >= 0x20000000000000000000000000000\n                    ? 113\n                    : 112;\n\n                if (xExponent + msb > yExponent + 16497) {\n                    // Overflow\n                    xExponent = 0x7FFF;\n                    xSignifier = 0;\n                } else if (xExponent + msb + 16380 < yExponent) {\n                    // Underflow\n                    xExponent = 0;\n                    xSignifier = 0;\n                } else if (xExponent + msb + 16268 < yExponent) {\n                    // Subnormal\n                    if (xExponent + 16380 > yExponent) xSignifier <<= xExponent + 16380 - yExponent;\n                    else if (xExponent + 16380 < yExponent) xSignifier >>= yExponent - xExponent - 16380;\n\n                    xExponent = 0;\n                } else {\n                    // Normal\n                    if (msb > 112) xSignifier >>= msb - 112;\n\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                    xExponent = xExponent + msb + 16269 - yExponent;\n                }\n\n                return\n                    bytes16(\n                        uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | (xExponent << 112) | xSignifier)\n                    );\n            }\n        }\n    }\n\n    /**\n     * Calculate -x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function neg(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return x ^ 0x80000000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Calculate |x|.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function abs(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        }\n    }\n\n    /**\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\n            else {\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n                if (xExponent == 0x7FFF) return x;\n                else {\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    if (xExponent == 0) xExponent = 1;\n                    else xSignifier |= 0x10000000000000000000000000000;\n\n                    if (xSignifier == 0) return POSITIVE_ZERO;\n\n                    bool oddExponent = xExponent & 0x1 == 0;\n                    xExponent = (xExponent + 16383) >> 1;\n\n                    if (oddExponent) {\n                        if (xSignifier >= 0x10000000000000000000000000000) xSignifier <<= 113;\n                        else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            uint256 shift = (226 - msb) & 0xFE;\n                            xSignifier <<= shift;\n                            xExponent -= (shift - 112) >> 1;\n                        }\n                    } else {\n                        if (xSignifier >= 0x10000000000000000000000000000) xSignifier <<= 112;\n                        else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            uint256 shift = (225 - msb) & 0xFE;\n                            xSignifier <<= shift;\n                            xExponent -= (shift - 112) >> 1;\n                        }\n                    }\n\n                    uint256 r = 0x10000000000000000000000000000;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\n                    uint256 r1 = xSignifier / r;\n                    if (r1 < r) r = r1;\n\n                    return bytes16(uint128((xExponent << 112) | (r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)));\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function log_2(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\n            else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO;\n            else {\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n                if (xExponent == 0x7FFF) return x;\n                else {\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    if (xExponent == 0) xExponent = 1;\n                    else xSignifier |= 0x10000000000000000000000000000;\n\n                    if (xSignifier == 0) return NEGATIVE_INFINITY;\n\n                    bool resultNegative;\n                    uint256 resultExponent = 16495;\n                    uint256 resultSignifier;\n\n                    if (xExponent >= 0x3FFF) {\n                        resultNegative = false;\n                        resultSignifier = xExponent - 0x3FFF;\n                        xSignifier <<= 15;\n                    } else {\n                        resultNegative = true;\n                        if (xSignifier >= 0x10000000000000000000000000000) {\n                            resultSignifier = 0x3FFE - xExponent;\n                            xSignifier <<= 15;\n                        } else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            resultSignifier = 16493 - msb;\n                            xSignifier <<= 127 - msb;\n                        }\n                    }\n\n                    if (xSignifier == 0x80000000000000000000000000000000) {\n                        if (resultNegative) resultSignifier += 1;\n                        uint256 shift = 112 - mostSignificantBit(resultSignifier);\n                        resultSignifier <<= shift;\n                        resultExponent -= shift;\n                    } else {\n                        uint256 bb = resultNegative ? 1 : 0;\n                        while (resultSignifier < 0x10000000000000000000000000000) {\n                            resultSignifier <<= 1;\n                            resultExponent -= 1;\n\n                            xSignifier *= xSignifier;\n                            uint256 b = xSignifier >> 255;\n                            resultSignifier += b ^ bb;\n                            xSignifier >>= 127 + b;\n                        }\n                    }\n\n                    return\n                        bytes16(\n                            uint128(\n                                (resultNegative ? 0x80000000000000000000000000000000 : 0) |\n                                    (resultExponent << 112) |\n                                    (resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n                            )\n                        );\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function ln(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\n        }\n    }\n\n    /**\n     * Calculate 2^x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\n            else if (xExponent > 16397) return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\n            else if (xExponent < 16255) return 0x3FFF0000000000000000000000000000;\n            else {\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                if (xExponent > 16367) xSignifier <<= xExponent - 16367;\n                else if (xExponent < 16367) xSignifier >>= 16367 - xExponent;\n\n                if (xNegative && xSignifier > 0x406E00000000000000000000000000000000) return POSITIVE_ZERO;\n\n                if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return POSITIVE_INFINITY;\n\n                uint256 resultExponent = xSignifier >> 128;\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xNegative && xSignifier != 0) {\n                    xSignifier = ~xSignifier;\n                    resultExponent += 1;\n                }\n\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\n                if (xSignifier & 0x80000000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\n                if (xSignifier & 0x40000000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\n                if (xSignifier & 0x20000000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\n                if (xSignifier & 0x10000000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\n                if (xSignifier & 0x8000000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\n                if (xSignifier & 0x4000000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\n                if (xSignifier & 0x2000000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\n                if (xSignifier & 0x1000000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\n                if (xSignifier & 0x800000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\n                if (xSignifier & 0x400000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\n                if (xSignifier & 0x200000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\n                if (xSignifier & 0x100000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\n                if (xSignifier & 0x80000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\n                if (xSignifier & 0x40000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\n                if (xSignifier & 0x20000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000162E525EE054754457D5995292026) >> 128;\n                if (xSignifier & 0x10000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\n                if (xSignifier & 0x8000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\n                if (xSignifier & 0x4000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\n                if (xSignifier & 0x2000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\n                if (xSignifier & 0x1000000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\n                if (xSignifier & 0x800000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\n                if (xSignifier & 0x400000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\n                if (xSignifier & 0x200000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\n                if (xSignifier & 0x100000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\n                if (xSignifier & 0x80000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\n                if (xSignifier & 0x40000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\n                if (xSignifier & 0x20000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\n                if (xSignifier & 0x10000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\n                if (xSignifier & 0x8000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\n                if (xSignifier & 0x4000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\n                if (xSignifier & 0x2000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\n                if (xSignifier & 0x1000000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\n                if (xSignifier & 0x800000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\n                if (xSignifier & 0x400000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\n                if (xSignifier & 0x200000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\n                if (xSignifier & 0x100000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\n                if (xSignifier & 0x80000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\n                if (xSignifier & 0x40000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\n                if (xSignifier & 0x20000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\n                if (xSignifier & 0x10000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\n                if (xSignifier & 0x8000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\n                if (xSignifier & 0x4000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000002C5C85FDF477B662B26945) >> 128;\n                if (xSignifier & 0x2000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000162E42FEFA3AE53369388C) >> 128;\n                if (xSignifier & 0x1000000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000B17217F7D1D351A389D40) >> 128;\n                if (xSignifier & 0x800000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\n                if (xSignifier & 0x400000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\n                if (xSignifier & 0x200000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000162E42FEFA39FE95583C2) >> 128;\n                if (xSignifier & 0x100000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\n                if (xSignifier & 0x80000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\n                if (xSignifier & 0x40000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000002C5C85FDF473E242EA38) >> 128;\n                if (xSignifier & 0x20000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000162E42FEFA39F02B772C) >> 128;\n                if (xSignifier & 0x10000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\n                if (xSignifier & 0x8000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\n                if (xSignifier & 0x4000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000002C5C85FDF473DEA871F) >> 128;\n                if (xSignifier & 0x2000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000162E42FEFA39EF44D91) >> 128;\n                if (xSignifier & 0x1000000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000B17217F7D1CF79E949) >> 128;\n                if (xSignifier & 0x800000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\n                if (xSignifier & 0x400000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\n                if (xSignifier & 0x200000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000162E42FEFA39EF366F) >> 128;\n                if (xSignifier & 0x100000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\n                if (xSignifier & 0x80000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\n                if (xSignifier & 0x40000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\n                if (xSignifier & 0x20000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000162E42FEFA39EF358) >> 128;\n                if (xSignifier & 0x10000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000B17217F7D1CF79AB) >> 128;\n                if (xSignifier & 0x8000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5) >> 128;\n                if (xSignifier & 0x4000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000002C5C85FDF473DE6A) >> 128;\n                if (xSignifier & 0x2000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000162E42FEFA39EF34) >> 128;\n                if (xSignifier & 0x1000000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000B17217F7D1CF799) >> 128;\n                if (xSignifier & 0x800000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000058B90BFBE8E7BCC) >> 128;\n                if (xSignifier & 0x400000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000002C5C85FDF473DE5) >> 128;\n                if (xSignifier & 0x200000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000162E42FEFA39EF2) >> 128;\n                if (xSignifier & 0x100000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000B17217F7D1CF78) >> 128;\n                if (xSignifier & 0x80000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000058B90BFBE8E7BB) >> 128;\n                if (xSignifier & 0x40000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000002C5C85FDF473DD) >> 128;\n                if (xSignifier & 0x20000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000162E42FEFA39EE) >> 128;\n                if (xSignifier & 0x10000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000B17217F7D1CF6) >> 128;\n                if (xSignifier & 0x8000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000058B90BFBE8E7A) >> 128;\n                if (xSignifier & 0x4000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000002C5C85FDF473C) >> 128;\n                if (xSignifier & 0x2000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000162E42FEFA39D) >> 128;\n                if (xSignifier & 0x1000000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000B17217F7D1CE) >> 128;\n                if (xSignifier & 0x800000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000058B90BFBE8E6) >> 128;\n                if (xSignifier & 0x400000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000002C5C85FDF472) >> 128;\n                if (xSignifier & 0x200000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000162E42FEFA38) >> 128;\n                if (xSignifier & 0x100000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000B17217F7D1B) >> 128;\n                if (xSignifier & 0x80000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000058B90BFBE8D) >> 128;\n                if (xSignifier & 0x40000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000002C5C85FDF46) >> 128;\n                if (xSignifier & 0x20000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000162E42FEFA2) >> 128;\n                if (xSignifier & 0x10000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000B17217F7D0) >> 128;\n                if (xSignifier & 0x8000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000058B90BFBE7) >> 128;\n                if (xSignifier & 0x4000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000002C5C85FDF3) >> 128;\n                if (xSignifier & 0x2000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000162E42FEF9) >> 128;\n                if (xSignifier & 0x1000000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000B17217F7C) >> 128;\n                if (xSignifier & 0x800000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000058B90BFBD) >> 128;\n                if (xSignifier & 0x400000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000002C5C85FDE) >> 128;\n                if (xSignifier & 0x200000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000162E42FEE) >> 128;\n                if (xSignifier & 0x100000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000B17217F6) >> 128;\n                if (xSignifier & 0x80000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000058B90BFA) >> 128;\n                if (xSignifier & 0x40000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000002C5C85FC) >> 128;\n                if (xSignifier & 0x20000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000162E42FD) >> 128;\n                if (xSignifier & 0x10000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000B17217E) >> 128;\n                if (xSignifier & 0x8000000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000058B90BE) >> 128;\n                if (xSignifier & 0x4000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000002C5C85E) >> 128;\n                if (xSignifier & 0x2000000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000162E42E) >> 128;\n                if (xSignifier & 0x1000000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000B17216) >> 128;\n                if (xSignifier & 0x800000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000058B90A) >> 128;\n                if (xSignifier & 0x400000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000002C5C84) >> 128;\n                if (xSignifier & 0x200000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000162E41) >> 128;\n                if (xSignifier & 0x100000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000B1720) >> 128;\n                if (xSignifier & 0x80000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000058B8F) >> 128;\n                if (xSignifier & 0x40000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000002C5C7) >> 128;\n                if (xSignifier & 0x20000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000162E3) >> 128;\n                if (xSignifier & 0x10000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000B171) >> 128;\n                if (xSignifier & 0x8000 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000058B8) >> 128;\n                if (xSignifier & 0x4000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000002C5B) >> 128;\n                if (xSignifier & 0x2000 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000162D) >> 128;\n                if (xSignifier & 0x1000 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000B16) >> 128;\n                if (xSignifier & 0x800 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000058A) >> 128;\n                if (xSignifier & 0x400 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000002C4) >> 128;\n                if (xSignifier & 0x200 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000161) >> 128;\n                if (xSignifier & 0x100 > 0)\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000000B0) >> 128;\n                if (xSignifier & 0x80 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000057) >> 128;\n                if (xSignifier & 0x40 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000002B) >> 128;\n                if (xSignifier & 0x20 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000015) >> 128;\n                if (xSignifier & 0x10 > 0)\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000000A) >> 128;\n                if (xSignifier & 0x8 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000004) >> 128;\n                if (xSignifier & 0x4 > 0)\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000001) >> 128;\n\n                if (!xNegative) {\n                    resultSignifier = (resultSignifier >> 15) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    resultExponent += 0x3FFF;\n                } else if (resultExponent <= 0x3FFE) {\n                    resultSignifier = (resultSignifier >> 15) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    resultExponent = 0x3FFF - resultExponent;\n                } else {\n                    resultSignifier = resultSignifier >> (resultExponent - 16367);\n                    resultExponent = 0;\n                }\n\n                return bytes16(uint128((resultExponent << 112) | resultSignifier));\n            }\n        }\n    }\n\n    /**\n     * Calculate e^x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function exp(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\n        }\n    }\n\n    /**\n     * Get index of the most significant non-zero bit in binary representation of\n     * x.  Reverts if x is zero.\n     *\n     * @return index of the most significant non-zero bit in binary representation\n     *         of x\n     */\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\n        unchecked {\n            require(x > 0);\n\n            uint256 result = 0;\n\n            if (x >= 0x100000000000000000000000000000000) {\n                x >>= 128;\n                result += 128;\n            }\n            if (x >= 0x10000000000000000) {\n                x >>= 64;\n                result += 64;\n            }\n            if (x >= 0x100000000) {\n                x >>= 32;\n                result += 32;\n            }\n            if (x >= 0x10000) {\n                x >>= 16;\n                result += 16;\n            }\n            if (x >= 0x100) {\n                x >>= 8;\n                result += 8;\n            }\n            if (x >= 0x10) {\n                x >>= 4;\n                result += 4;\n            }\n            if (x >= 0x4) {\n                x >>= 2;\n                result += 2;\n            }\n            if (x >= 0x2) result += 1; // No need to shift x anymore\n\n            return result;\n        }\n    }\n}\n"
    },
    "contracts/libraries/BlackScholes.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n// Libraries\nimport { ABDKMathQuad } from \"./ABDKMathQuad.sol\";\n\n/// @title Black-Scholes option pricing formula and supporting statistical functions\n/// @author Dopex\n/// @notice This library implements the Black-Scholes model to price options.\n/// See - https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model\n/// @dev Implements the following implementation - https://cseweb.ucsd.edu/~goguen/courses/130/SayBlackScholes.html\n/// Uses the ABDKMathQuad(https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMathQuad.md)\n/// library to make precise calculations. It uses a DIVISOR (1e16) for maintaining precision in constants.\nlibrary BlackScholes {\n    uint8 internal constant OPTION_TYPE_CALL = 0;\n    uint8 internal constant OPTION_TYPE_PUT = 1;\n\n    uint256 internal constant DIVISOR = 10 ** 16;\n\n    /**\n     * @notice The function that uses the Black-Scholes equation to calculate the option price\n     * See http://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model#Black-Scholes_formula\n     * NOTE: The different parts of the equation are broken down to separate functions as using\n     * ABDKMathQuad makes small equations verbose.\n     * @param optionType Type of option - 0 = call, 1 = put\n     * @param price Stock price\n     * @param strike Strike price\n     * @param timeToExpiry Time to expiry in days\n     * @param riskFreeRate Risk-free rate\n     * @param volatility Volatility on the asset\n     * @return Option price based on the Black-Scholes model\n     */\n    function calculate(\n        uint8 optionType,\n        uint256 price,\n        uint256 strike,\n        uint256 timeToExpiry,\n        uint256 riskFreeRate,\n        uint256 volatility\n    ) internal pure returns (uint256) {\n        bytes16 S = ABDKMathQuad.fromUInt(price);\n        bytes16 X = ABDKMathQuad.fromUInt(strike);\n        bytes16 T = ABDKMathQuad.div(\n            ABDKMathQuad.fromUInt(timeToExpiry),\n            ABDKMathQuad.fromUInt(36500) // 365 * 10 ^ DAYS_PRECISION\n        );\n        bytes16 r = ABDKMathQuad.div(ABDKMathQuad.fromUInt(riskFreeRate), ABDKMathQuad.fromUInt(10000));\n        bytes16 v = ABDKMathQuad.div(ABDKMathQuad.fromUInt(volatility), ABDKMathQuad.fromUInt(100));\n        bytes16 d1 = ABDKMathQuad.div(\n            ABDKMathQuad.add(\n                ABDKMathQuad.ln(ABDKMathQuad.div(S, X)),\n                ABDKMathQuad.mul(\n                    ABDKMathQuad.add(r, ABDKMathQuad.mul(v, ABDKMathQuad.div(v, ABDKMathQuad.fromUInt(2)))),\n                    T\n                )\n            ),\n            ABDKMathQuad.mul(v, ABDKMathQuad.sqrt(T))\n        );\n        bytes16 d2 = ABDKMathQuad.sub(d1, ABDKMathQuad.mul(v, ABDKMathQuad.sqrt(T)));\n        if (optionType == OPTION_TYPE_CALL) {\n            return\n                ABDKMathQuad.toUInt(\n                    ABDKMathQuad.mul(_calculateCallTimeDecay(S, d1, X, r, T, d2), ABDKMathQuad.fromUInt(DIVISOR))\n                );\n        } else if (optionType == OPTION_TYPE_PUT) {\n            return\n                ABDKMathQuad.toUInt(\n                    ABDKMathQuad.mul(_calculatePutTimeDecay(X, r, T, d2, S, d1), ABDKMathQuad.fromUInt(DIVISOR))\n                );\n        } else return 0;\n    }\n\n    /// @dev Function to caluclate the call time decay\n    /// From the implementation page(https://cseweb.ucsd.edu/~goguen/courses/130/SayBlackScholes.html); part of the equation\n    /// ( S * CND(d1)-X * Math.exp(-r * T) * CND(d2) );\n    function _calculateCallTimeDecay(\n        bytes16 S,\n        bytes16 d1,\n        bytes16 X,\n        bytes16 r,\n        bytes16 T,\n        bytes16 d2\n    ) internal pure returns (bytes16) {\n        return\n            ABDKMathQuad.sub(\n                ABDKMathQuad.mul(S, CND(d1)),\n                ABDKMathQuad.mul(\n                    ABDKMathQuad.mul(X, ABDKMathQuad.exp(ABDKMathQuad.mul(ABDKMathQuad.neg(r), T))),\n                    CND(d2)\n                )\n            );\n    }\n\n    /// @dev Function to caluclate the put time decay\n    /// From the implementation page(https://cseweb.ucsd.edu/~goguen/courses/130/SayBlackScholes.html); part of the equation -\n    /// ( X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1) );\n    function _calculatePutTimeDecay(\n        bytes16 X,\n        bytes16 r,\n        bytes16 T,\n        bytes16 d2,\n        bytes16 S,\n        bytes16 d1\n    ) internal pure returns (bytes16) {\n        bytes16 price_part1 = ABDKMathQuad.mul(\n            ABDKMathQuad.mul(X, ABDKMathQuad.exp(ABDKMathQuad.mul(ABDKMathQuad.neg(r), T))),\n            CND(ABDKMathQuad.neg(d2))\n        );\n        bytes16 price_part2 = ABDKMathQuad.mul(S, CND(ABDKMathQuad.neg(d1)));\n        bytes16 price = ABDKMathQuad.sub(price_part1, price_part2);\n        return price;\n    }\n\n    /**\n     * @notice Normal cumulative distribution function.\n     * See http://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function\n     * From the implementation page(https://cseweb.ucsd.edu/~goguen/courses/130/SayBlackScholes.html); part of the equation -\n     * \"k = 1 / (1 + .2316419 * x); return ( 1 - Math.exp(-x * x / 2)/ Math.sqrt(2*Math.PI) * k * (.31938153 + k * (-.356563782 + k * (1.781477937 + k * (-1.821255978 + k * 1.330274429)))) );\"\n     * NOTE: The different parts of the equation are broken down to separate functions as using\n     * ABDKMathQuad makes small equations verbose.\n     */\n    function CND(bytes16 x) internal pure returns (bytes16) {\n        if (ABDKMathQuad.toInt(x) < 0) {\n            return (ABDKMathQuad.sub(ABDKMathQuad.fromUInt(1), CND(ABDKMathQuad.neg(x))));\n        } else {\n            bytes16 k = ABDKMathQuad.div(\n                ABDKMathQuad.fromUInt(1),\n                ABDKMathQuad.add(\n                    ABDKMathQuad.fromUInt(1),\n                    ABDKMathQuad.mul(\n                        ABDKMathQuad.div(ABDKMathQuad.fromUInt(2316419000000000), ABDKMathQuad.fromUInt(DIVISOR)),\n                        x\n                    )\n                )\n            );\n            bytes16 CND_part2 = _getCNDPart2(k, x);\n            return ABDKMathQuad.sub(ABDKMathQuad.fromUInt(1), CND_part2);\n        }\n    }\n\n    function _getCNDPart2(bytes16 k, bytes16 x) internal pure returns (bytes16) {\n        return ABDKMathQuad.mul(_getCNDPart2_1(x), _getCNDPart2_2(k));\n    }\n\n    function _getCNDPart2_1(bytes16 x) internal pure returns (bytes16) {\n        return\n            ABDKMathQuad.div(\n                ABDKMathQuad.exp(ABDKMathQuad.mul(ABDKMathQuad.neg(x), ABDKMathQuad.div(x, ABDKMathQuad.fromUInt(2)))),\n                ABDKMathQuad.sqrt(\n                    ABDKMathQuad.mul(\n                        ABDKMathQuad.fromUInt(2),\n                        ABDKMathQuad.div(ABDKMathQuad.fromUInt(31415926530000000), ABDKMathQuad.fromUInt(DIVISOR))\n                    )\n                )\n            );\n    }\n\n    function _getCNDPart2_2(bytes16 k) internal pure returns (bytes16) {\n        return\n            ABDKMathQuad.mul(\n                ABDKMathQuad.add(\n                    ABDKMathQuad.div(ABDKMathQuad.fromUInt(3193815300000000), ABDKMathQuad.fromUInt(DIVISOR)),\n                    ABDKMathQuad.mul(\n                        k,\n                        ABDKMathQuad.add(\n                            ABDKMathQuad.neg(\n                                ABDKMathQuad.div(\n                                    ABDKMathQuad.fromUInt(3565637820000000),\n                                    ABDKMathQuad.fromUInt(DIVISOR)\n                                )\n                            ),\n                            ABDKMathQuad.mul(\n                                k,\n                                ABDKMathQuad.add(\n                                    ABDKMathQuad.div(\n                                        ABDKMathQuad.fromUInt(17814779370000000),\n                                        ABDKMathQuad.fromUInt(DIVISOR)\n                                    ),\n                                    _getCNDPart2_2_1(k)\n                                )\n                            )\n                        )\n                    )\n                ),\n                k\n            );\n    }\n\n    function _getCNDPart2_2_1(bytes16 k) internal pure returns (bytes16) {\n        return\n            ABDKMathQuad.mul(\n                k,\n                ABDKMathQuad.add(\n                    ABDKMathQuad.neg(\n                        ABDKMathQuad.div(ABDKMathQuad.fromUInt(18212559780000000), ABDKMathQuad.fromUInt(DIVISOR))\n                    ),\n                    ABDKMathQuad.mul(\n                        k,\n                        ABDKMathQuad.div(ABDKMathQuad.fromUInt(13302744290000000), ABDKMathQuad.fromUInt(DIVISOR))\n                    )\n                )\n            );\n    }\n}\n"
    },
    "contracts/libraries/BluebirdMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nlibrary BluebirdMath {\n    /**\n     * Compute standard deviation of an array of values\n     * @param _values Array of values\n     * @return Standard deviation of `_values`\n     */\n    function computeStandardDeviation(uint256[7] memory _values) internal pure returns (uint256) {\n        uint256 n = _values.length;\n        uint256 mean = 0;\n\n        // Compute mean\n        for (uint256 i = 0; i < n; i++) {\n            mean += _values[i];\n        }\n        mean = mean / n;\n\n        // Compute sum of squared differences\n        uint256 sumSquaredDifferences = 0;\n        for (uint256 i = 0; i < n; i++) {\n            uint256 difference = _values[i] - mean;\n            sumSquaredDifferences += difference * difference;\n        }\n\n        // Compute variance and standard deviation\n        uint256 variance = sumSquaredDifferences / n;\n        uint256 standardDeviation = sqrt(variance);\n\n        return standardDeviation;\n    }\n\n    /**\n     * Square root function\n     * @param x Input x\n     * @return Square root of `x`\n     */\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        uint256 z = (x + 1) / 2;\n        uint256 y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n        return y;\n    }\n}\n"
    },
    "contracts/MockOracle.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// Import aggregatorv3\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockOracle is AggregatorV3Interface {\n    int256 public price;\n    uint8 public decimals;\n    string public description;\n    uint256 public version = 1;\n\n    constructor(int256 _price, uint8 _decimals, string memory _description) {\n        price = _price;\n        decimals = _decimals;\n        description = _description;\n    }\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        public\n        view\n        override\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n    {\n        return (0, price, 0, 0, 0);\n    }\n\n    function latestRoundData()\n        public\n        view\n        override\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n    {\n        return (0, price, 0, 0, 0);\n    }\n}\n"
    },
    "contracts/OptionPricing.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n// Libraries\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { BlackScholes } from \"./libraries/BlackScholes.sol\";\nimport { ABDKMathQuad } from \"./libraries/ABDKMathQuad.sol\";\n\n// Contracts\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Interfaces\nimport { IOptionPricing } from \"./interfaces/IOptionPricing.sol\";\n\ncontract OptionPricing is Ownable, IOptionPricing {\n    using SafeMath for uint256;\n\n    // The max volatility possible\n    uint256 public volatilityCap;\n\n    // The % of the price of asset which is the minimum option price possible in 1e8 precision\n    uint256 public minOptionPricePercentage;\n\n    constructor(uint256 _volatilityCap, uint256 _minOptionPricePercentage) {\n        volatilityCap = _volatilityCap;\n        minOptionPricePercentage = _minOptionPricePercentage;\n    }\n\n    /*---- GOVERNANCE FUNCTIONS ----*/\n\n    /// @notice updates volatility cap for an option pool\n    /// @param _volatilityCap the new volatility cap\n    /// @return whether volatility cap was updated\n    function updateVolatilityCap(uint256 _volatilityCap) external onlyOwner returns (bool) {\n        volatilityCap = _volatilityCap;\n\n        return true;\n    }\n\n    /// @notice updates % of the price of asset which is the minimum option price possible\n    /// @param _minOptionPricePercentage the new %\n    /// @return whether % was updated\n    function updateMinOptionPricePercentage(uint256 _minOptionPricePercentage) external onlyOwner returns (bool) {\n        minOptionPricePercentage = _minOptionPricePercentage;\n\n        return true;\n    }\n\n    /*---- VIEWS ----*/\n\n    /**\n     * @notice computes the option price (with liquidity multiplier)\n     * @param isPut is put option\n     * @param expiry expiry timestamp\n     * @param strike strike price\n     * @param lastPrice current price\n     * @param volatility volatility\n     */\n    function getOptionPrice(\n        bool isPut,\n        uint256 expiry,\n        uint256 strike,\n        uint256 lastPrice,\n        uint256 volatility\n    ) external view override returns (uint256) {\n        uint256 timeToExpiry = expiry.sub(block.timestamp).div(864);\n\n        uint256 optionPrice = BlackScholes\n            .calculate(\n                isPut ? 1 : 0, // 0 - Put, 1 - Call\n                lastPrice,\n                strike,\n                timeToExpiry, // Number of days to expiry mul by 100\n                0,\n                volatility\n            )\n            .div(BlackScholes.DIVISOR);\n\n        uint256 minOptionPrice = lastPrice.mul(minOptionPricePercentage).div(1e10);\n\n        if (minOptionPrice > optionPrice) {\n            return minOptionPrice;\n        }\n\n        return optionPrice;\n    }\n}\n"
    },
    "contracts/utils/SetUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nlibrary SetUtils {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /// @dev Converst an iterable set of addresses to a corresponding array\n    function toArray(EnumerableSet.AddressSet storage _set) internal view returns (address[] memory) {\n        uint256 numElements = _set.length();\n        address[] memory elements = new address[](numElements);\n        for (uint256 i = 0; i < numElements; ++i) {\n            elements[i] = _set.at(i);\n        }\n        return elements;\n    }\n\n    /// @dev Converst an iterable set of uint to a corresponding array\n    function toArray(EnumerableSet.UintSet storage _set) internal view returns (uint256[] memory) {\n        uint256 numElements = _set.length();\n        uint256[] memory elements = new uint256[](numElements);\n        for (uint256 i = 0; i < numElements; ++i) {\n            elements[i] = _set.at(i);\n        }\n        return elements;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}