{
  "address": "0xc2a33a404e1fd76eddbF841A9327CD0e1BB4353e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_volatilityCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOptionPricePercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "volatility",
          "type": "uint256"
        }
      ],
      "name": "getOptionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minOptionPricePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minOptionPricePercentage",
          "type": "uint256"
        }
      ],
      "name": "updateMinOptionPricePercentage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_volatilityCap",
          "type": "uint256"
        }
      ],
      "name": "updateVolatilityCap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "volatilityCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd999ca41202cbb2b58d4dbe32c92b848e0496952f98b97b09466cbb3d95042f9",
  "receipt": {
    "to": null,
    "from": "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "contractAddress": "0xc2a33a404e1fd76eddbF841A9327CD0e1BB4353e",
    "transactionIndex": 1,
    "gasUsed": "2463562",
    "logsBloom": "0x
    "blockHash": "0x2ed58162b452849d00841506099403fe9af646298dd4bc9bc3f92e5e9418cfe8",
    "transactionHash": "0xd999ca41202cbb2b58d4dbe32c92b848e0496952f98b97b09466cbb3d95042f9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 134566,
        "transactionHash": "0xd999ca41202cbb2b58d4dbe32c92b848e0496952f98b97b09466cbb3d95042f9",
        "address": "0xc2a33a404e1fd76eddbF841A9327CD0e1BB4353e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2ed58162b452849d00841506099403fe9af646298dd4bc9bc3f92e5e9418cfe8"
      }
    ],
    "blockNumber": 134566,
    "cumulativeGasUsed": "2484562",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1000,
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "1f16e7aca2f18cde589b96b70fa1d28c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_volatilityCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOptionPricePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volatility\",\"type\":\"uint256\"}],\"name\":\"getOptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOptionPricePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minOptionPricePercentage\",\"type\":\"uint256\"}],\"name\":\"updateMinOptionPricePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_volatilityCap\",\"type\":\"uint256\"}],\"name\":\"updateVolatilityCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getOptionPrice(bool,uint256,uint256,uint256,uint256)\":{\"params\":{\"expiry\":\"expiry timestamp\",\"isPut\":\"is put option\",\"lastPrice\":\"current price\",\"strike\":\"strike price\",\"volatility\":\"volatility\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMinOptionPricePercentage(uint256)\":{\"params\":{\"_minOptionPricePercentage\":\"the new %\"},\"returns\":{\"_0\":\"whether % was updated\"}},\"updateVolatilityCap(uint256)\":{\"params\":{\"_volatilityCap\":\"the new volatility cap\"},\"returns\":{\"_0\":\"whether volatility cap was updated\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOptionPrice(bool,uint256,uint256,uint256,uint256)\":{\"notice\":\"computes the option price (with liquidity multiplier)\"},\"updateMinOptionPricePercentage(uint256)\":{\"notice\":\"updates % of the price of asset which is the minimum option price possible\"},\"updateVolatilityCap(uint256)\":{\"notice\":\"updates volatility cap for an option pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OptionPricing.sol\":\"OptionPricing\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/OptionPricing.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { BlackScholes } from \\\"./libraries/BlackScholes.sol\\\";\\nimport { ABDKMathQuad } from \\\"./libraries/ABDKMathQuad.sol\\\";\\n\\n// Contracts\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport { IOptionPricing } from \\\"./interfaces/IOptionPricing.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract OptionPricing is Ownable, IOptionPricing {\\n    using SafeMath for uint256;\\n\\n    // The max volatility possible\\n    uint256 public volatilityCap;\\n\\n    // The % of the price of asset which is the minimum option price possible in 1e8 precision\\n    uint256 public minOptionPricePercentage;\\n\\n    constructor(uint256 _volatilityCap, uint256 _minOptionPricePercentage) {\\n        volatilityCap = _volatilityCap;\\n        minOptionPricePercentage = _minOptionPricePercentage;\\n    }\\n\\n    /*---- GOVERNANCE FUNCTIONS ----*/\\n\\n    /// @notice updates volatility cap for an option pool\\n    /// @param _volatilityCap the new volatility cap\\n    /// @return whether volatility cap was updated\\n    function updateVolatilityCap(uint256 _volatilityCap) external onlyOwner returns (bool) {\\n        volatilityCap = _volatilityCap;\\n\\n        return true;\\n    }\\n\\n    /// @notice updates % of the price of asset which is the minimum option price possible\\n    /// @param _minOptionPricePercentage the new %\\n    /// @return whether % was updated\\n    function updateMinOptionPricePercentage(uint256 _minOptionPricePercentage) external onlyOwner returns (bool) {\\n        minOptionPricePercentage = _minOptionPricePercentage;\\n\\n        return true;\\n    }\\n\\n    /*---- VIEWS ----*/\\n\\n    /**\\n     * @notice computes the option price (with liquidity multiplier)\\n     * @param isPut is put option\\n     * @param expiry expiry timestamp\\n     * @param strike strike price\\n     * @param lastPrice current price\\n     * @param volatility volatility\\n     */\\n    function getOptionPrice(\\n        bool isPut,\\n        uint256 expiry,\\n        uint256 strike,\\n        uint256 lastPrice,\\n        uint256 volatility\\n    ) external view override returns (uint256) {\\n        uint256 timeToExpiry = expiry.sub(block.timestamp).div(864);\\n\\n        uint256 optionPrice = BlackScholes\\n            .calculate(\\n                isPut ? 1 : 0, // 0 - Put, 1 - Call\\n                lastPrice,\\n                strike,\\n                timeToExpiry, // Number of days to expiry mul by 100\\n                0,\\n                volatility\\n            )\\n            .div(BlackScholes.DIVISOR);\\n        uint256 minOptionPrice = lastPrice.mul(minOptionPricePercentage).div(1e10);\\n\\n        if (minOptionPrice > optionPrice) {\\n            return minOptionPrice;\\n        }\\n\\n        return optionPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xe2923b4d51a7bc32ba511596cb219e174b375aaa7140e81ecbf1ad075b9bf030\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOptionPricing.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOptionPricing {\\n    function getOptionPrice(\\n        bool isPut,\\n        uint256 expiry,\\n        uint256 strike,\\n        uint256 lastPrice,\\n        uint256 baseIv\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ce39291a92d1843653907520ab883c653e5e75e1d25a27e5bbf68e8aad767f4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n    /*\\n     * 0.\\n     */\\n    bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n    /*\\n     * -0.\\n     */\\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n    /*\\n     * +Infinity.\\n     */\\n    bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\n\\n    /*\\n     * -Infinity.\\n     */\\n    bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\n\\n    /*\\n     * Canonical NaN value.\\n     */\\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n    /**\\n     * Convert signed 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromInt(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16383 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 256-bit integer number\\n     * rounding towards zero.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 256-bit integer number\\n     */\\n    function toInt(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16638); // Overflow\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                uint256 result = x;\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16383 + msb) << 112);\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into unsigned 256-bit integer number\\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n     * without error, because they are rounded to zero.\\n     *\\n     * @param x quadruple precision number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function toUInt(bytes16 x) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\\n\\n            require(exponent <= 16638); // Overflow\\n            uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 128.128 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from128x128(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16255 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 128.128 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 128.128 bit fixed point number\\n     */\\n    function to128x128(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16510); // Overflow\\n            if (exponent < 16255) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16367) result >>= 16367 - exponent;\\n            else if (exponent > 16367) result <<= exponent - 16367;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 64.64 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from64x64(int128 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint128(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16319 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 64.64 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 64.64 bit fixed point number\\n     */\\n    function to64x64(bytes16 x) internal pure returns (int128) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16446); // Overflow\\n            if (exponent < 16319) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16431) result >>= 16431 - exponent;\\n            else if (exponent > 16431) result <<= exponent - 16431;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x80000000000000000000000000000000);\\n                return -int128(int256(result)); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(int256(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert octuple precision number into quadruple precision number.\\n     *\\n     * @param x octuple precision number\\n     * @return quadruple precision number\\n     */\\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\n\\n            uint256 exponent = (uint256(x) >> 236) & 0x7FFFF;\\n            uint256 significand = uint256(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFFF) {\\n                if (significand > 0) return NaN;\\n                else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            }\\n\\n            if (exponent > 278526) return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else if (exponent < 245649) return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n            else if (exponent < 245761) {\\n                significand =\\n                    (significand | 0x100000000000000000000000000000000000000000000000000000000000) >>\\n                    (245885 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 124;\\n                exponent -= 245760;\\n            }\\n\\n            uint128 result = uint128(significand | (exponent << 112));\\n            if (negative) result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into octuple precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return octuple precision number\\n     */\\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF)\\n                exponent = 0x7FFFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result = (result << (236 - msb)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 245649 + msb;\\n                }\\n            } else {\\n                result <<= 124;\\n                exponent += 245760;\\n            }\\n\\n            result |= exponent << 236;\\n            if (uint128(x) >= 0x80000000000000000000000000000000)\\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n            return bytes32(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert double precision number into quadruple precision number.\\n     *\\n     * @param x double precision number\\n     * @return quadruple precision number\\n     */\\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 exponent = (uint64(x) >> 52) & 0x7FF;\\n\\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FF)\\n                exponent = 0x7FFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result = (result << (112 - msb)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 15309 + msb;\\n                }\\n            } else {\\n                result <<= 60;\\n                exponent += 15360;\\n            }\\n\\n            result |= exponent << 112;\\n            if (x & 0x8000000000000000 > 0) result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(uint128(result));\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into double precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return double precision number\\n     */\\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\\n        unchecked {\\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\\n\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                if (significand > 0) return 0x7FF8000000000000;\\n                // NaN\\n                else\\n                    return\\n                        negative\\n                            ? bytes8(0xFFF0000000000000) // -Infinity\\n                            : bytes8(0x7FF0000000000000); // Infinity\\n            }\\n\\n            if (exponent > 17406)\\n                return\\n                    negative\\n                        ? bytes8(0xFFF0000000000000) // -Infinity\\n                        : bytes8(0x7FF0000000000000);\\n            // Infinity\\n            else if (exponent < 15309)\\n                return\\n                    negative\\n                        ? bytes8(0x8000000000000000) // -0\\n                        : bytes8(0x0000000000000000);\\n            // 0\\n            else if (exponent < 15361) {\\n                significand = (significand | 0x10000000000000000000000000000) >> (15421 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 60;\\n                exponent -= 15360;\\n            }\\n\\n            uint64 result = uint64(significand | (exponent << 52));\\n            if (negative) result |= 0x8000000000000000;\\n\\n            return bytes8(result);\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is NaN, false otherwise\\n     */\\n    function isNaN(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF > 0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is positive or negative\\n     * infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is positive or negative infinity, false otherwise\\n     */\\n    function isInfinity(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return sign of x\\n     */\\n    function sign(bytes16 x) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            if (absoluteX == 0) return 0;\\n            else if (uint128(x) >= 0x80000000000000000000000000000000) return -1;\\n            else return 1;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n     * arguments are infinities of the same sign.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return sign (x - y)\\n     */\\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            // Not infinities of the same sign\\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n            if (x == y) return 0;\\n            else {\\n                bool negativeX = uint128(x) >= 0x80000000000000000000000000000000;\\n                bool negativeY = uint128(y) >= 0x80000000000000000000000000000000;\\n\\n                if (negativeX) {\\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\\n                    else return -1;\\n                } else {\\n                    if (negativeY) return 1;\\n                    else return absoluteX > absoluteY ? int8(1) : -1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n     * anything.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return true if x equals to y, false otherwise\\n     */\\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\\n        unchecked {\\n            if (x == y) {\\n                return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF < 0x7FFF0000000000000000000000000000;\\n            } else return false;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Special values behave in the following way:\\n     *\\n     * NaN + x = NaN for any x.\\n     * Infinity + x = Infinity for any finite x.\\n     * -Infinity + x = -Infinity for any finite x.\\n     * Infinity + Infinity = Infinity.\\n     * -Infinity + -Infinity = -Infinity.\\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x;\\n                    else return NaN;\\n                } else return x;\\n            } else if (yExponent == 0x7FFF) return y;\\n            else {\\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n                else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n                else {\\n                    int256 delta = int256(xExponent) - int256(yExponent);\\n\\n                    if (xSign == ySign) {\\n                        if (delta > 112) return x;\\n                        else if (delta > 0) ySignifier >>= uint256(delta);\\n                        else if (delta < -112) return y;\\n                        else if (delta < 0) {\\n                            xSignifier >>= uint256(-delta);\\n                            xExponent = yExponent;\\n                        }\\n\\n                        xSignifier += ySignifier;\\n\\n                        if (xSignifier >= 0x20000000000000000000000000000) {\\n                            xSignifier >>= 1;\\n                            xExponent += 1;\\n                        }\\n\\n                        if (xExponent == 0x7FFF) return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n                        else {\\n                            if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                        }\\n                    } else {\\n                        if (delta > 0) {\\n                            xSignifier <<= 1;\\n                            xExponent -= 1;\\n                        } else if (delta < 0) {\\n                            ySignifier <<= 1;\\n                            xExponent = yExponent - 1;\\n                        }\\n\\n                        if (delta > 112) ySignifier = 1;\\n                        else if (delta > 1) ySignifier = ((ySignifier - 1) >> uint256(delta - 1)) + 1;\\n                        else if (delta < -112) xSignifier = 1;\\n                        else if (delta < -1) xSignifier = ((xSignifier - 1) >> uint256(-delta - 1)) + 1;\\n\\n                        if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n                        else {\\n                            xSignifier = ySignifier - xSignifier;\\n                            xSign = ySign;\\n                        }\\n\\n                        if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n                        uint256 msb = mostSignificantBit(xSignifier);\\n\\n                        if (msb == 113) {\\n                            xSignifier = (xSignifier >> 1) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                            xExponent += 1;\\n                        } else if (msb < 112) {\\n                            uint256 shift = 112 - msb;\\n                            if (xExponent > shift) {\\n                                xSignifier = (xSignifier << shift) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                                xExponent -= shift;\\n                            } else {\\n                                xSignifier <<= xExponent - 1;\\n                                xExponent = 0;\\n                            }\\n                        } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                        if (xExponent == 0x7FFF) return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n                        else\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Special values behave in the following way:\\n     *\\n     * NaN - x = NaN for any x.\\n     * Infinity - x = Infinity for any finite x.\\n     * -Infinity - x = -Infinity for any finite x.\\n     * Infinity - -Infinity = Infinity.\\n     * -Infinity - Infinity = -Infinity.\\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            return add(x, y ^ 0x80000000000000000000000000000000);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y.  Special values behave in the following way:\\n     *\\n     * NaN * x = NaN for any x.\\n     * Infinity * x = Infinity for any finite positive x.\\n     * Infinity * x = -Infinity for any finite negative x.\\n     * -Infinity * x = -Infinity for any finite positive x.\\n     * -Infinity * x = Infinity for any finite negative x.\\n     * Infinity * 0 = NaN.\\n     * -Infinity * 0 = NaN.\\n     * Infinity * Infinity = Infinity.\\n     * Infinity * -Infinity = -Infinity.\\n     * -Infinity * Infinity = -Infinity.\\n     * -Infinity * -Infinity = Infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x ^ (y & 0x80000000000000000000000000000000);\\n                    else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\n                    else return NaN;\\n                } else {\\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                    else return x ^ (y & 0x80000000000000000000000000000000);\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return y ^ (x & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                xSignifier *= ySignifier;\\n                if (xSignifier == 0)\\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n                xExponent += yExponent;\\n\\n                uint256 msb = xSignifier >= 0x200000000000000000000000000000000000000000000000000000000\\n                    ? 225\\n                    : xSignifier >= 0x100000000000000000000000000000000000000000000000000000000\\n                    ? 224\\n                    : mostSignificantBit(xSignifier);\\n\\n                if (xExponent + msb < 16496) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb < 16608) {\\n                    // Subnormal\\n                    if (xExponent < 16496) xSignifier >>= 16496 - xExponent;\\n                    else if (xExponent > 16496) xSignifier <<= xExponent - 16496;\\n                    xExponent = 0;\\n                } else if (xExponent + msb > 49373) {\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else {\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n                    else if (msb < 112) xSignifier <<= 112 - msb;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb - 16607;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | (xExponent << 112) | xSignifier)\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y.  Special values behave in the following way:\\n     *\\n     * NaN / x = NaN for any x.\\n     * x / NaN = NaN for any x.\\n     * Infinity / x = Infinity for any finite non-negative x.\\n     * Infinity / x = -Infinity for any finite negative x including -0.\\n     * -Infinity / x = -Infinity for any finite non-negative x.\\n     * -Infinity / x = Infinity for any finite negative x including -0.\\n     * x / Infinity = 0 for any finite non-negative x.\\n     * x / -Infinity = -0 for any finite non-negative x.\\n     * x / Infinity = -0 for any finite non-negative x including -0.\\n     * x / -Infinity = 0 for any finite non-negative x including -0.\\n     *\\n     * Infinity / Infinity = NaN.\\n     * Infinity / -Infinity = -NaN.\\n     * -Infinity / Infinity = -NaN.\\n     * -Infinity / -Infinity = NaN.\\n     *\\n     * Division by zero behaves in the following way:\\n     *\\n     * x / 0 = Infinity for any finite positive x.\\n     * x / -0 = -Infinity for any finite positive x.\\n     * x / 0 = -Infinity for any finite negative x.\\n     * x / -0 = Infinity for any finite negative x.\\n     * 0 / 0 = NaN.\\n     * 0 / -0 = NaN.\\n     * -0 / 0 = NaN.\\n     * -0 / -0 = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) return NaN;\\n                else return x ^ (y & 0x80000000000000000000000000000000);\\n            } else if (yExponent == 0x7FFF) {\\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n                else return POSITIVE_ZERO | ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return POSITIVE_INFINITY | ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) {\\n                    if (xSignifier != 0) {\\n                        uint256 shift = 226 - mostSignificantBit(xSignifier);\\n\\n                        xSignifier <<= shift;\\n\\n                        xExponent = 1;\\n                        yExponent += shift - 114;\\n                    }\\n                } else {\\n                    xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\n                }\\n\\n                xSignifier = xSignifier / ySignifier;\\n                if (xSignifier == 0)\\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n                assert(xSignifier >= 0x1000000000000000000000000000);\\n\\n                uint256 msb = xSignifier >= 0x80000000000000000000000000000\\n                    ? mostSignificantBit(xSignifier)\\n                    : xSignifier >= 0x40000000000000000000000000000\\n                    ? 114\\n                    : xSignifier >= 0x20000000000000000000000000000\\n                    ? 113\\n                    : 112;\\n\\n                if (xExponent + msb > yExponent + 16497) {\\n                    // Overflow\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16380 < yExponent) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16268 < yExponent) {\\n                    // Subnormal\\n                    if (xExponent + 16380 > yExponent) xSignifier <<= xExponent + 16380 - yExponent;\\n                    else if (xExponent + 16380 < yExponent) xSignifier >>= yExponent - xExponent - 16380;\\n\\n                    xExponent = 0;\\n                } else {\\n                    // Normal\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb + 16269 - yExponent;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | (xExponent << 112) | xSignifier)\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function neg(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x ^ 0x80000000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function abs(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n    }\\n\\n    /**\\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n                    bool oddExponent = xExponent & 0x1 == 0;\\n                    xExponent = (xExponent + 16383) >> 1;\\n\\n                    if (oddExponent) {\\n                        if (xSignifier >= 0x10000000000000000000000000000) xSignifier <<= 113;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (226 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    } else {\\n                        if (xSignifier >= 0x10000000000000000000000000000) xSignifier <<= 112;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (225 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    }\\n\\n                    uint256 r = 0x10000000000000000000000000000;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n                    uint256 r1 = xSignifier / r;\\n                    if (r1 < r) r = r1;\\n\\n                    return bytes16(uint128((xExponent << 112) | (r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function log_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n                    bool resultNegative;\\n                    uint256 resultExponent = 16495;\\n                    uint256 resultSignifier;\\n\\n                    if (xExponent >= 0x3FFF) {\\n                        resultNegative = false;\\n                        resultSignifier = xExponent - 0x3FFF;\\n                        xSignifier <<= 15;\\n                    } else {\\n                        resultNegative = true;\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            resultSignifier = 0x3FFE - xExponent;\\n                            xSignifier <<= 15;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            resultSignifier = 16493 - msb;\\n                            xSignifier <<= 127 - msb;\\n                        }\\n                    }\\n\\n                    if (xSignifier == 0x80000000000000000000000000000000) {\\n                        if (resultNegative) resultSignifier += 1;\\n                        uint256 shift = 112 - mostSignificantBit(resultSignifier);\\n                        resultSignifier <<= shift;\\n                        resultExponent -= shift;\\n                    } else {\\n                        uint256 bb = resultNegative ? 1 : 0;\\n                        while (resultSignifier < 0x10000000000000000000000000000) {\\n                            resultSignifier <<= 1;\\n                            resultExponent -= 1;\\n\\n                            xSignifier *= xSignifier;\\n                            uint256 b = xSignifier >> 255;\\n                            resultSignifier += b ^ bb;\\n                            xSignifier >>= 127 + b;\\n                        }\\n                    }\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (resultNegative ? 0x80000000000000000000000000000000 : 0) |\\n                                    (resultExponent << 112) |\\n                                    (resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function ln(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n        }\\n    }\\n\\n    /**\\n     * Calculate 2^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n            else if (xExponent > 16397) return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n            else if (xExponent < 16255) return 0x3FFF0000000000000000000000000000;\\n            else {\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                if (xExponent > 16367) xSignifier <<= xExponent - 16367;\\n                else if (xExponent < 16367) xSignifier >>= 16367 - xExponent;\\n\\n                if (xNegative && xSignifier > 0x406E00000000000000000000000000000000) return POSITIVE_ZERO;\\n\\n                if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return POSITIVE_INFINITY;\\n\\n                uint256 resultExponent = xSignifier >> 128;\\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xNegative && xSignifier != 0) {\\n                    xSignifier = ~xSignifier;\\n                    resultExponent += 1;\\n                }\\n\\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\\n                if (xSignifier & 0x80000000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n                if (xSignifier & 0x40000000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n                if (xSignifier & 0x20000000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n                if (xSignifier & 0x10000000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n                if (xSignifier & 0x8000000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n                if (xSignifier & 0x4000000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n                if (xSignifier & 0x2000000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n                if (xSignifier & 0x1000000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n                if (xSignifier & 0x800000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n                if (xSignifier & 0x400000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n                if (xSignifier & 0x200000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n                if (xSignifier & 0x100000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n                if (xSignifier & 0x80000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n                if (xSignifier & 0x40000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n                if (xSignifier & 0x20000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000162E525EE054754457D5995292026) >> 128;\\n                if (xSignifier & 0x10000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n                if (xSignifier & 0x8000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n                if (xSignifier & 0x4000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n                if (xSignifier & 0x2000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n                if (xSignifier & 0x1000000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n                if (xSignifier & 0x800000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n                if (xSignifier & 0x400000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n                if (xSignifier & 0x200000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n                if (xSignifier & 0x100000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n                if (xSignifier & 0x80000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n                if (xSignifier & 0x40000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n                if (xSignifier & 0x20000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n                if (xSignifier & 0x10000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n                if (xSignifier & 0x8000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n                if (xSignifier & 0x4000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n                if (xSignifier & 0x2000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n                if (xSignifier & 0x1000000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n                if (xSignifier & 0x800000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n                if (xSignifier & 0x400000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n                if (xSignifier & 0x200000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n                if (xSignifier & 0x100000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n                if (xSignifier & 0x80000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n                if (xSignifier & 0x40000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n                if (xSignifier & 0x20000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n                if (xSignifier & 0x10000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n                if (xSignifier & 0x8000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n                if (xSignifier & 0x4000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n                if (xSignifier & 0x2000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n                if (xSignifier & 0x1000000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n                if (xSignifier & 0x800000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n                if (xSignifier & 0x400000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n                if (xSignifier & 0x200000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n                if (xSignifier & 0x100000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n                if (xSignifier & 0x80000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n                if (xSignifier & 0x40000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n                if (xSignifier & 0x20000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n                if (xSignifier & 0x10000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n                if (xSignifier & 0x8000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n                if (xSignifier & 0x4000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n                if (xSignifier & 0x2000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n                if (xSignifier & 0x1000000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n                if (xSignifier & 0x800000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n                if (xSignifier & 0x400000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n                if (xSignifier & 0x200000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n                if (xSignifier & 0x100000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n                if (xSignifier & 0x80000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n                if (xSignifier & 0x40000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n                if (xSignifier & 0x20000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n                if (xSignifier & 0x10000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n                if (xSignifier & 0x8000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5) >> 128;\\n                if (xSignifier & 0x4000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000002C5C85FDF473DE6A) >> 128;\\n                if (xSignifier & 0x2000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000162E42FEFA39EF34) >> 128;\\n                if (xSignifier & 0x1000000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000B17217F7D1CF799) >> 128;\\n                if (xSignifier & 0x800000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000058B90BFBE8E7BCC) >> 128;\\n                if (xSignifier & 0x400000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000002C5C85FDF473DE5) >> 128;\\n                if (xSignifier & 0x200000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000162E42FEFA39EF2) >> 128;\\n                if (xSignifier & 0x100000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000B17217F7D1CF78) >> 128;\\n                if (xSignifier & 0x80000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000058B90BFBE8E7BB) >> 128;\\n                if (xSignifier & 0x40000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000002C5C85FDF473DD) >> 128;\\n                if (xSignifier & 0x20000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000162E42FEFA39EE) >> 128;\\n                if (xSignifier & 0x10000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000B17217F7D1CF6) >> 128;\\n                if (xSignifier & 0x8000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000058B90BFBE8E7A) >> 128;\\n                if (xSignifier & 0x4000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000002C5C85FDF473C) >> 128;\\n                if (xSignifier & 0x2000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000162E42FEFA39D) >> 128;\\n                if (xSignifier & 0x1000000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000B17217F7D1CE) >> 128;\\n                if (xSignifier & 0x800000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000058B90BFBE8E6) >> 128;\\n                if (xSignifier & 0x400000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000002C5C85FDF472) >> 128;\\n                if (xSignifier & 0x200000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000162E42FEFA38) >> 128;\\n                if (xSignifier & 0x100000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000B17217F7D1B) >> 128;\\n                if (xSignifier & 0x80000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000058B90BFBE8D) >> 128;\\n                if (xSignifier & 0x40000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000002C5C85FDF46) >> 128;\\n                if (xSignifier & 0x20000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000162E42FEFA2) >> 128;\\n                if (xSignifier & 0x10000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000B17217F7D0) >> 128;\\n                if (xSignifier & 0x8000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000058B90BFBE7) >> 128;\\n                if (xSignifier & 0x4000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000002C5C85FDF3) >> 128;\\n                if (xSignifier & 0x2000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000162E42FEF9) >> 128;\\n                if (xSignifier & 0x1000000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000B17217F7C) >> 128;\\n                if (xSignifier & 0x800000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000058B90BFBD) >> 128;\\n                if (xSignifier & 0x400000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000002C5C85FDE) >> 128;\\n                if (xSignifier & 0x200000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000162E42FEE) >> 128;\\n                if (xSignifier & 0x100000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000B17217F6) >> 128;\\n                if (xSignifier & 0x80000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000058B90BFA) >> 128;\\n                if (xSignifier & 0x40000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000002C5C85FC) >> 128;\\n                if (xSignifier & 0x20000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000162E42FD) >> 128;\\n                if (xSignifier & 0x10000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000B17217E) >> 128;\\n                if (xSignifier & 0x8000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000058B90BE) >> 128;\\n                if (xSignifier & 0x4000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000002C5C85E) >> 128;\\n                if (xSignifier & 0x2000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000162E42E) >> 128;\\n                if (xSignifier & 0x1000000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000B17216) >> 128;\\n                if (xSignifier & 0x800000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000058B90A) >> 128;\\n                if (xSignifier & 0x400000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000002C5C84) >> 128;\\n                if (xSignifier & 0x200000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000162E41) >> 128;\\n                if (xSignifier & 0x100000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000B1720) >> 128;\\n                if (xSignifier & 0x80000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000058B8F) >> 128;\\n                if (xSignifier & 0x40000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000002C5C7) >> 128;\\n                if (xSignifier & 0x20000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000162E3) >> 128;\\n                if (xSignifier & 0x10000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000B171) >> 128;\\n                if (xSignifier & 0x8000 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000058B8) >> 128;\\n                if (xSignifier & 0x4000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000002C5B) >> 128;\\n                if (xSignifier & 0x2000 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000162D) >> 128;\\n                if (xSignifier & 0x1000 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000B16) >> 128;\\n                if (xSignifier & 0x800 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000058A) >> 128;\\n                if (xSignifier & 0x400 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000002C4) >> 128;\\n                if (xSignifier & 0x200 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000161) >> 128;\\n                if (xSignifier & 0x100 > 0)\\n                    resultSignifier = (resultSignifier * 0x1000000000000000000000000000000B0) >> 128;\\n                if (xSignifier & 0x80 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000057) >> 128;\\n                if (xSignifier & 0x40 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000002B) >> 128;\\n                if (xSignifier & 0x20 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000015) >> 128;\\n                if (xSignifier & 0x10 > 0)\\n                    resultSignifier = (resultSignifier * 0x10000000000000000000000000000000A) >> 128;\\n                if (xSignifier & 0x8 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000004) >> 128;\\n                if (xSignifier & 0x4 > 0)\\n                    resultSignifier = (resultSignifier * 0x100000000000000000000000000000001) >> 128;\\n\\n                if (!xNegative) {\\n                    resultSignifier = (resultSignifier >> 15) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent += 0x3FFF;\\n                } else if (resultExponent <= 0x3FFE) {\\n                    resultSignifier = (resultSignifier >> 15) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent = 0x3FFF - resultExponent;\\n                } else {\\n                    resultSignifier = resultSignifier >> (resultExponent - 16367);\\n                    resultExponent = 0;\\n                }\\n\\n                return bytes16(uint128((resultExponent << 112) | resultSignifier));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate e^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function exp(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n        }\\n    }\\n\\n    /**\\n     * Get index of the most significant non-zero bit in binary representation of\\n     * x.  Reverts if x is zero.\\n     *\\n     * @return index of the most significant non-zero bit in binary representation\\n     *         of x\\n     */\\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            require(x > 0);\\n\\n            uint256 result = 0;\\n\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                result += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                result += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                result += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                result += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                result += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                result += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                result += 2;\\n            }\\n            if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b668ad915207141aa1686bd5accd55b8f031a1a68878dd39d2840a0a94918aa\",\"license\":\"BSD-4-Clause\"},\"contracts/libraries/BlackScholes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport { ABDKMathQuad } from \\\"./ABDKMathQuad.sol\\\";\\n\\n/// @title Black-Scholes option pricing formula and supporting statistical functions\\n/// @author Dopex\\n/// @notice This library implements the Black-Scholes model to price options.\\n/// See - https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model\\n/// @dev Implements the following implementation - https://cseweb.ucsd.edu/~goguen/courses/130/SayBlackScholes.html\\n/// Uses the ABDKMathQuad(https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMathQuad.md)\\n/// library to make precise calculations. It uses a DIVISOR (1e16) for maintaining precision in constants.\\nlibrary BlackScholes {\\n    uint8 internal constant OPTION_TYPE_CALL = 0;\\n    uint8 internal constant OPTION_TYPE_PUT = 1;\\n\\n    uint256 internal constant DIVISOR = 10 ** 16;\\n\\n    /**\\n     * @notice The function that uses the Black-Scholes equation to calculate the option price\\n     * See http://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model#Black-Scholes_formula\\n     * NOTE: The different parts of the equation are broken down to separate functions as using\\n     * ABDKMathQuad makes small equations verbose.\\n     * @param optionType Type of option - 0 = call, 1 = put\\n     * @param price Stock price\\n     * @param strike Strike price\\n     * @param timeToExpiry Time to expiry in days\\n     * @param riskFreeRate Risk-free rate\\n     * @param volatility Volatility on the asset\\n     * @return Option price based on the Black-Scholes model\\n     */\\n    function calculate(\\n        uint8 optionType,\\n        uint256 price,\\n        uint256 strike,\\n        uint256 timeToExpiry,\\n        uint256 riskFreeRate,\\n        uint256 volatility\\n    ) internal view returns (uint256) {\\n        bytes16 S = ABDKMathQuad.fromUInt(price);\\n        bytes16 X = ABDKMathQuad.fromUInt(strike);\\n        bytes16 T = ABDKMathQuad.div(\\n            ABDKMathQuad.fromUInt(timeToExpiry),\\n            ABDKMathQuad.fromUInt(36500) // 365 * 10 ^ DAYS_PRECISION\\n        );\\n        bytes16 r = ABDKMathQuad.div(ABDKMathQuad.fromUInt(riskFreeRate), ABDKMathQuad.fromUInt(10000));\\n        bytes16 v = ABDKMathQuad.div(ABDKMathQuad.fromUInt(volatility), ABDKMathQuad.fromUInt(100));\\n        bytes16 d1 = ABDKMathQuad.div(\\n            ABDKMathQuad.add(\\n                ABDKMathQuad.ln(ABDKMathQuad.div(S, X)),\\n                ABDKMathQuad.mul(\\n                    ABDKMathQuad.add(r, ABDKMathQuad.mul(v, ABDKMathQuad.div(v, ABDKMathQuad.fromUInt(2)))),\\n                    T\\n                )\\n            ),\\n            ABDKMathQuad.mul(v, ABDKMathQuad.sqrt(T))\\n        );\\n        bytes16 d2 = ABDKMathQuad.sub(d1, ABDKMathQuad.mul(v, ABDKMathQuad.sqrt(T)));\\n        if (optionType == OPTION_TYPE_CALL) {\\n            return\\n                ABDKMathQuad.toUInt(\\n                    ABDKMathQuad.mul(_calculateCallTimeDecay(S, d1, X, r, T, d2), ABDKMathQuad.fromUInt(DIVISOR))\\n                );\\n        } else if (optionType == OPTION_TYPE_PUT) {\\n            return\\n                ABDKMathQuad.toUInt(\\n                    ABDKMathQuad.mul(_calculatePutTimeDecay(X, r, T, d2, S, d1), ABDKMathQuad.fromUInt(DIVISOR))\\n                );\\n        } else return 0;\\n    }\\n\\n    /// @dev Function to caluclate the call time decay\\n    /// From the implementation page(https://cseweb.ucsd.edu/~goguen/courses/130/SayBlackScholes.html); part of the equation\\n    /// ( S * CND(d1)-X * Math.exp(-r * T) * CND(d2) );\\n    function _calculateCallTimeDecay(\\n        bytes16 S,\\n        bytes16 d1,\\n        bytes16 X,\\n        bytes16 r,\\n        bytes16 T,\\n        bytes16 d2\\n    ) internal pure returns (bytes16) {\\n        return\\n            ABDKMathQuad.sub(\\n                ABDKMathQuad.mul(S, CND(d1)),\\n                ABDKMathQuad.mul(\\n                    ABDKMathQuad.mul(X, ABDKMathQuad.exp(ABDKMathQuad.mul(ABDKMathQuad.neg(r), T))),\\n                    CND(d2)\\n                )\\n            );\\n    }\\n\\n    /// @dev Function to caluclate the put time decay\\n    /// From the implementation page(https://cseweb.ucsd.edu/~goguen/courses/130/SayBlackScholes.html); part of the equation -\\n    /// ( X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1) );\\n    function _calculatePutTimeDecay(\\n        bytes16 X,\\n        bytes16 r,\\n        bytes16 T,\\n        bytes16 d2,\\n        bytes16 S,\\n        bytes16 d1\\n    ) internal pure returns (bytes16) {\\n        bytes16 price_part1 = ABDKMathQuad.mul(\\n            ABDKMathQuad.mul(X, ABDKMathQuad.exp(ABDKMathQuad.mul(ABDKMathQuad.neg(r), T))),\\n            CND(ABDKMathQuad.neg(d2))\\n        );\\n        bytes16 price_part2 = ABDKMathQuad.mul(S, CND(ABDKMathQuad.neg(d1)));\\n        bytes16 price = ABDKMathQuad.sub(price_part1, price_part2);\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Normal cumulative distribution function.\\n     * See http://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function\\n     * From the implementation page(https://cseweb.ucsd.edu/~goguen/courses/130/SayBlackScholes.html); part of the equation -\\n     * \\\"k = 1 / (1 + .2316419 * x); return ( 1 - Math.exp(-x * x / 2)/ Math.sqrt(2*Math.PI) * k * (.31938153 + k * (-.356563782 + k * (1.781477937 + k * (-1.821255978 + k * 1.330274429)))) );\\\"\\n     * NOTE: The different parts of the equation are broken down to separate functions as using\\n     * ABDKMathQuad makes small equations verbose.\\n     */\\n    function CND(bytes16 x) internal pure returns (bytes16) {\\n        if (ABDKMathQuad.toInt(x) < 0) {\\n            return (ABDKMathQuad.sub(ABDKMathQuad.fromUInt(1), CND(ABDKMathQuad.neg(x))));\\n        } else {\\n            bytes16 k = ABDKMathQuad.div(\\n                ABDKMathQuad.fromUInt(1),\\n                ABDKMathQuad.add(\\n                    ABDKMathQuad.fromUInt(1),\\n                    ABDKMathQuad.mul(\\n                        ABDKMathQuad.div(ABDKMathQuad.fromUInt(2316419000000000), ABDKMathQuad.fromUInt(DIVISOR)),\\n                        x\\n                    )\\n                )\\n            );\\n            bytes16 CND_part2 = _getCNDPart2(k, x);\\n            return ABDKMathQuad.sub(ABDKMathQuad.fromUInt(1), CND_part2);\\n        }\\n    }\\n\\n    function _getCNDPart2(bytes16 k, bytes16 x) internal pure returns (bytes16) {\\n        return ABDKMathQuad.mul(_getCNDPart2_1(x), _getCNDPart2_2(k));\\n    }\\n\\n    function _getCNDPart2_1(bytes16 x) internal pure returns (bytes16) {\\n        return\\n            ABDKMathQuad.div(\\n                ABDKMathQuad.exp(ABDKMathQuad.mul(ABDKMathQuad.neg(x), ABDKMathQuad.div(x, ABDKMathQuad.fromUInt(2)))),\\n                ABDKMathQuad.sqrt(\\n                    ABDKMathQuad.mul(\\n                        ABDKMathQuad.fromUInt(2),\\n                        ABDKMathQuad.div(ABDKMathQuad.fromUInt(31415926530000000), ABDKMathQuad.fromUInt(DIVISOR))\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _getCNDPart2_2(bytes16 k) internal pure returns (bytes16) {\\n        return\\n            ABDKMathQuad.mul(\\n                ABDKMathQuad.add(\\n                    ABDKMathQuad.div(ABDKMathQuad.fromUInt(3193815300000000), ABDKMathQuad.fromUInt(DIVISOR)),\\n                    ABDKMathQuad.mul(\\n                        k,\\n                        ABDKMathQuad.add(\\n                            ABDKMathQuad.neg(\\n                                ABDKMathQuad.div(\\n                                    ABDKMathQuad.fromUInt(3565637820000000),\\n                                    ABDKMathQuad.fromUInt(DIVISOR)\\n                                )\\n                            ),\\n                            ABDKMathQuad.mul(\\n                                k,\\n                                ABDKMathQuad.add(\\n                                    ABDKMathQuad.div(\\n                                        ABDKMathQuad.fromUInt(17814779370000000),\\n                                        ABDKMathQuad.fromUInt(DIVISOR)\\n                                    ),\\n                                    _getCNDPart2_2_1(k)\\n                                )\\n                            )\\n                        )\\n                    )\\n                ),\\n                k\\n            );\\n    }\\n\\n    function _getCNDPart2_2_1(bytes16 k) internal pure returns (bytes16) {\\n        return\\n            ABDKMathQuad.mul(\\n                k,\\n                ABDKMathQuad.add(\\n                    ABDKMathQuad.neg(\\n                        ABDKMathQuad.div(ABDKMathQuad.fromUInt(18212559780000000), ABDKMathQuad.fromUInt(DIVISOR))\\n                    ),\\n                    ABDKMathQuad.mul(\\n                        k,\\n                        ABDKMathQuad.div(ABDKMathQuad.fromUInt(13302744290000000), ABDKMathQuad.fromUInt(DIVISOR))\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd1634f01c623d1e8907844ac56a092588386dcfea72f457d0ae35c2f3853c6d6\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002b6838038062002b6883398101604081905262000034916200009e565b6200003f336200004e565b600191909155600255620000c3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000b257600080fd5b505080516020909101519092909150565b612a9580620000d36000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146100e85780638da5cb5b146100f2578063ad1ad5dc1461010d578063f2fde38b1461012057600080fd5b806305e927df1461008d57806325b2a93b146100a9578063326611f8146100b25780635b7b6d88146100d5575b600080fd5b61009660015481565b6040519081526020015b60405180910390f35b61009660025481565b6100c56100c0366004612946565b610133565b60405190151581526020016100a0565b6100966100e336600461295f565b610146565b6100f06101cf565b005b6000546040516001600160a01b0390911681526020016100a0565b6100c561011b366004612946565b6101e3565b6100f061012e3660046129a8565b6101f6565b600061013d610274565b50600255600190565b60008061015f61036061015988426102ce565b906102e3565b9050600061018b662386f26fc100006101598a61017d576000610180565b60015b888a8760008b6102ef565b905060006101ad6402540be4006101596002548961044090919063ffffffff16565b9050818111156101c15792506101c6915050565b509150505b95945050505050565b6101d7610274565b6101e1600061044c565b565b60006101ed610274565b50600190815590565b6101fe610274565b6001600160a01b0381166102685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102718161044c565b50565b6000546001600160a01b031633146101e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161025f565b60006102da82846129e7565b90505b92915050565b60006102da8284612a10565b6000806102fb8761049c565b905060006103088761049c565b905060006103286103188861049c565b610323618e9461049c565b610503565b905060006103436103388861049c565b61032361271061049c565b9050600061035d6103538861049c565b610323606461049c565b905060006103af6103a26103796103748989610503565b6107ca565b61039761039c87610397886103928a610323600261049c565b6107ed565b610a56565b886107ed565b6103238461039288610e20565b905060006103c9826103c48561039289610e20565b610ff9565b905060ff8e1661040a576103fc6103f76103e789858a898b8861100b565b610392662386f26fc1000061049c565b611050565b975050505050505050610436565b60001960ff8f160161042a576103fc6103f76103e7888789868d896110d4565b60009750505050505050505b9695505050505050565b60006102da8284612a32565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000816000036104ae57506000919050565b8160006104ba82611133565b905060708110156104d3578060700382901b91506104e6565b60708111156104e6576070810382901c91505b613fff0160701b6001600160701b03919091161760801b92915050565b6000617fff60f084811c8216919084901c8116908290036105485780617fff03610537575061ffff60ef1b91506102dd9050565b505050600160ff1b811682186102dd565b80617fff0361058b576dffffffffffffffffffffffffffff60801b84161561057a575061ffff60ef1b91506102dd9050565b505050808218600160ff1b166102dd565b600160801b600160ff1b0384166000036105db57600160801b600160ff1b0385166000036105c3575061ffff60ef1b91506102dd9050565b505050808218600160ff1b16617fff60f01b176102dd565b6001600160701b03608085901c1660008290036105fb5760019150610602565b600160701b175b6001600160701b03608087901c16600084900361064557801561064057600061062a82611133565b6001955060e20393840160711901939190911b90505b61064f565b600160701b1760721b5b81818161065e5761065e6129fa565b0490508060000361068e57600160ff1b8787181661067d576000610683565b600160ff1b5b9450505050506102dd565b6001606c1b8110156106a2576106a2612a49565b6000600160731b8210156106e157600160721b8210156106d657600160711b8210156106cf5760706106d9565b60716106d9565b60725b60ff166106ea565b6106ea82611133565b90508361407101818601111561070857617fff94506000915061079b565b83818601613ffc01101561072357600094506000915061079b565b83818601613f8c011015610770578385613ffc01111561074e578385613ffc010382901b9150610767565b8385613ffc01101561076757613ffc8585030382901c91505b6000945061079b565b6070811115610783576070810382901c91505b6001600160701b038216915083818601613f8d010394505b81607086901b888a186001607f1b60801b1660801c6001600160801b0316171760801b955050505050506102dd565b60006102dd6107d8836111d1565b6f3ffe62e42fefa39ef35793c7673007e560801b5b6000617fff60f084811c8216919084901c81169082900361088c5780617fff03610868576001600160801b03198085169086160361083657505050600160ff1b811682186102dd565b6001600160801b031985851816600160ff1b03610858575050508181176102dd565b5061ffff60ef1b91506102dd9050565b600160801b600160ff1b038416600003610537575061ffff60ef1b91506102dd9050565b80617fff036108ca57600160801b600160ff1b0385166000036108b9575061ffff60ef1b91506102dd9050565b505050600160ff1b821681186102dd565b6001600160701b03608086901c1660008390036108ea57600192506108f1565b600160701b175b6001600160701b03608086901c1660008390036109115760019250610918565b600160701b175b80820291508160000361093957600160ff1b8787181661067d576000610683565b928201926000600160e11b83101561096c57600160e01b8310156109655761096083611133565b61096f565b60e061096f565b60e15b9050614070818601101561098a576000945060009250610a27565b6140e081860110156109cd576140708510156109af57846140700383901c92506109c4565b6140708511156109c457614070850383901b92505b60009450610a27565b61c0dd81860111156109e757617fff945060009250610a27565b60708111156109fe576070810383901c9250610a11565b6070811015610a11578060700383901b92505b6001600160701b03831692506140df8186010394505b82607086901b888a186001607f1b60801b1660801c6001600160801b0316171760801b955050505050506102dd565b6000617fff60f084811c8216919084901c811690829003610aa25780617fff03610a98576001600160801b0319808516908616036108585784925050506102dd565b84925050506102dd565b80617fff03610ab55783925050506102dd565b6001607f1b608086901c90811015906001600160701b03166000849003610adf5760019350610ae6565b600160701b175b6001607f1b608087901c90811015906001600160701b03166000859003610b105760019450610b17565b600160701b175b82600003610b4a576001600160801b03198816600160ff1b14610b3a5787610b3d565b60005b96505050505050506102dd565b80600003610b6d576001600160801b03198916600160ff1b14610b3a5788610b3d565b84860382151585151503610c76576070811315610b9357899750505050505050506102dd565b6000811315610ba55790811c90610bd4565b606f19811215610bbe57889750505050505050506102dd565b6000811215610bd4578060000384901c93508596505b92810192600160711b8410610bef576001968701969390931c925b86617fff03610c205784610c0857617fff60f01b610c12565b6001600160f01b03195b9750505050505050506102dd565b600160701b841015610c355760009650610c42565b6001600160701b03841693505b83607088901b86610c54576000610c5a565b6001607f1b5b6001600160801b0316171760801b9750505050505050506102dd565b6000811315610c9157600184901b9350600187039650610ca8565b6000811215610ca857600182901b91506001860396505b6070811315610cba5760019150610d07565b6001811315610cd7576001810360018303901c6001019150610d07565b606f19811215610cea5760019350610d07565b600019811215610d07576001816000030360018503901c60010193505b818410610d18578184039350610d21565b83820393508294505b83600003610d3a5750600096506102dd95505050505050565b6000610d4585611133565b905080607103610d6a57600185901c6001600160701b03169450600188019750610db9565b6070811015610dac57607081900380891115610d99578086901b6001600160701b031695508089039850610da6565b600098600019019590951b945b50610db9565b6001600160701b03851694505b87617fff03610deb5785610dd257617fff60f01b610ddc565b6001600160f01b03195b985050505050505050506102dd565b84607089901b87610dfd576000610e03565b6001607f1b5b6001600160801b0316171760801b985050505050505050506102dd565b60006001607f1b608083901c1115610e3e575061ffff60ef1b919050565b617fff60f083901c811690819003610e57575090919050565b6001600160701b03608084901c166000829003610e775760019150610e7e565b600160701b175b80600003610e90575060009392505050565b613fff8201600190811c9216158015610ee257600160701b8210610eba57607182901b9150610f1d565b6000610ec583611133565b60e20360fe16606f19810160011c909403939290921b9150610f1d565b600160701b8210610ef957607082901b9150610f1d565b6000610f0483611133565b60e10360fe16606f19810160011c909403939290921b91505b600160701b80830401600190811c90818481610f3b57610f3b6129fa565b048201901c90506001818481610f5357610f536129fa565b048201901c90506001818481610f6b57610f6b6129fa565b048201901c90506001818481610f8357610f836129fa565b048201901c90506001818481610f9b57610f9b6129fa565b048201901c90506001818481610fb357610fb36129fa565b048201901c90506000818481610fcb57610fcb6129fa565b04905081811015610fda578091505b816001600160701b0316607086901b1760801b95505050505050919050565b60006102da83600160ff1b8418610a56565b600061104561101d8861039289611389565b6103c461103c88610392611037600160ff1b8b188a6107ed565b611424565b61039286611389565b979650505050505050565b6000617fff60f083901c16613fff81101561106e5750600092915050565b6001607f1b608084901c1061108257600080fd5b6140fe81111561109157600080fd5b600160701b6001600160701b03608085901c161761406f8210156110bb5761406f8290031c6110cd565b61406f8211156110cd5761406e1982011b5b9392505050565b6000806111006110f189610392611037600160ff1b8c188b6107ed565b610392600160ff1b8818611389565b9050600061111785610392600160ff1b8718611389565b905060006111258383610ff9565b9a9950505050505050505050565b600080821161114157600080fd5b6000600160801b831061115657608092831c92015b600160401b831061116957604092831c92015b640100000000831061117d57602092831c92015b62010000831061118f57601092831c92015b61010083106111a057600892831c92015b601083106111b057600492831c92015b600483106111c057600292831c92015b600283106102dd5760010192915050565b60006001607f1b608083901c11156111ef575061ffff60ef1b919050565b6001600160801b03198216613fff60f01b0361120d57506000919050565b617fff60f083901c811690819003611226575090919050565b6001600160701b03608084901c166000829003611246576001915061124d565b600160701b175b8060000361126657506001600160f01b03199392505050565b600061406f81613fff851061128c5750600f9290921b9160009150613ffe1984016112cb565b60019250600160701b84106112ae5784613ffe039050600f84901b93506112cb565b60006112b985611133565b607f8190039590951b9461406d039150505b836001607f1b036113015782156112e0576001015b60006112eb82611133565b60700390508082901b915080830392505061134f565b60008361130f576000611312565b60015b60ff1690505b600160701b82101561134d5793800260ff81901c607f81019190911c94600019939093019260019290921b9082180190611318565b505b806001600160701b0316607083901b8461136a576000611370565b6001607f1b5b6001600160801b0316171760801b979650505050505050565b6000806113958361144b565b12156113b7576102dd6113a8600161049c565b6103c4600160ff1b8518611389565b60006113f96113c6600161049c565b6103236113d3600161049c565b61039761039c6113e966083ac553a55e0061049c565b610323662386f26fc1000061049c565b9050600061140782856114f2565b905061141c611416600161049c565b82610ff9565b949350505050565b60006102dd611446836f1fffb8aa3b295c17f0bbbe87fed0691d60811b6107ed565b611509565b6000617fff60f083901c166140fe81111561146557600080fd5b613fff8110156114785750600092915050565b600160701b6001600160701b03608085901c161761406f8210156114a25761406f8290031c6114b4565b61406f8211156114b45761406e1982011b5b6001607f1b608085901c106114de57600160ff1b8111156114d457600080fd5b6000039392505050565b6001600160ff1b038111156110cd57600080fd5b60006102da6115008361285e565b610392856128a6565b60006001607f1b608083901c90811190617fff60f085901c8116916001600160701b0316908214801561153b57508015155b1561154f575061ffff60ef1b949350505050565b61400d821115611574578261156957617fff60f01b6101c6565b600095945050505050565b613f7f82101561158d5750613fff60f01b949350505050565b8160000361159e57600191506115a5565b600160701b175b613fef8211156115bb57613fee1982011b6115cd565b613fef8210156115cd57613fef8290031c5b8280156115de575061203760811b81115b156115ee57506000949350505050565b8215801561160d5750713fffffffffffffffffffffffffffffffffff81115b156116215750617fff60f01b949350505050565b6001600160801b0381169060801c83801561163b57508115155b15611647579019906001015b6001607f1b8281161561166b5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b6001607e1b83161561168e577001306fe0a31b7152de8d5a46305c85edec0260801c5b6001607d1b8316156116b1577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b6001607c1b8316156116d45770010b5586cf9890f6298b92b71842a983630260801c5b6001607b1b8316156116f7577001059b0d31585743ae7c548eb68ca417fd0260801c5b6001607a1b83161561171a57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b600160791b83161561173d5770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600160781b83161561176057700100b1afa5abcbed6129ab13ec11dc95430260801c5b600160771b8316156117835770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600160761b8316156117a6577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600160751b8316156117c957700100162f3904051fa128bca9c55c31e5df0260801c5b600160741b8316156117ec577001000b175effdc76ba38e31671ca9397250260801c5b600160731b83161561180f57700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600160721b8316156118325770010002c5cc37da9491d0985c348c68e7b30260801c5b600160711b831615611855577001000162e525ee054754457d59952920260260801c5b600160701b8316156118785770010000b17255775c040618bf4a4ade83fc0260801c5b6001606f1b83161561189b577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6001606e1b8316156118be57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6001606d1b8316156118e15770010000162e43f4f831060e02d839a9d16d0260801c5b6001606c1b83161561190457700100000b1721bcfc99d9f890ea069117630260801c5b6001606b1b8316156119275770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6001606a1b83161561194a577001000002c5c863b73f016468f6bac5ca2b0260801c5b600160691b83161561196d57700100000162e430e5a18f6119e3c02282a50260801c5b600160681b831615611990577001000000b1721835514b86e6d96efd1bfe0260801c5b600160671b8316156119b357700100000058b90c0b48c6be5df846c5b2ef0260801c5b600160661b8316156119d65770010000002c5c8601cc6b9e94213c72737a0260801c5b600160651b8316156119f9577001000000162e42fff037df38aa2b219f060260801c5b600160641b831615611a1c5770010000000b17217fba9c739aa5819f44f90260801c5b600160631b831615611a3f577001000000058b90bfcdee5acd3c1cedc8230260801c5b600160621b831615611a6257700100000002c5c85fe31f35a6a30da1be500260801c5b600160611b831615611a855770010000000162e42ff0999ce3541b9fffcf0260801c5b600160601b831615611aa857700100000000b17217f80f4ef5aadda455540260801c5b6001605f1b831615611acb5770010000000058b90bfbf8479bd5a81b51ad0260801c5b6001605e1b831615611aee577001000000002c5c85fdf84bd62ae30a74cc0260801c5b6001605d1b831615611b1157700100000000162e42fefb2fed257559bdaa0260801c5b6001605c1b831615611b34577001000000000b17217f7d5a7716bba4a9ae0260801c5b6001605b1b831615611b5757700100000000058b90bfbe9ddbac5e109cce0260801c5b6001605a1b831615611b7a5770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600160591b831615611b9d577001000000000162e42fefa494f1478fde050260801c5b600160581b831615611bc05770010000000000b17217f7d20cf927c8e94c0260801c5b600160571b831615611be3577001000000000058b90bfbe8f71cb4e4b33d0260801c5b600160561b831615611c0657700100000000002c5c85fdf477b662b269450260801c5b600160551b831615611c295770010000000000162e42fefa3ae53369388c0260801c5b600160541b831615611c4c57700100000000000b17217f7d1d351a389d400260801c5b600160531b831615611c6f5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b600160521b831615611c92577001000000000002c5c85fdf4741bea6e77e0260801c5b600160511b831615611cb557700100000000000162e42fefa39fe95583c20260801c5b600160501b831615611cd8577001000000000000b17217f7d1cfb72b45e10260801c5b6980000000000000000000831615611d0157700100000000000058b90bfbe8e7cc35c3f00260801c5b6940000000000000000000831615611d2a5770010000000000002c5c85fdf473e242ea380260801c5b6920000000000000000000831615611d53577001000000000000162e42fefa39f02b772c0260801c5b6910000000000000000000831615611d7c5770010000000000000b17217f7d1cf7d83c1a0260801c5b6908000000000000000000831615611da5577001000000000000058b90bfbe8e7bdcbe2e0260801c5b6904000000000000000000831615611dce57700100000000000002c5c85fdf473dea871f0260801c5b6902000000000000000000831615611df75770010000000000000162e42fefa39ef44d910260801c5b6901000000000000000000831615611e2057700100000000000000b17217f7d1cf79e9490260801c5b68800000000000000000831615611e485770010000000000000058b90bfbe8e7bce5440260801c5b68400000000000000000831615611e70577001000000000000002c5c85fdf473de6eca0260801c5b68200000000000000000831615611e9857700100000000000000162e42fefa39ef366f0260801c5b68100000000000000000831615611ec0577001000000000000000b17217f7d1cf79afa0260801c5b68080000000000000000831615611ee857700100000000000000058b90bfbe8e7bcd6d0260801c5b68040000000000000000831615611f105770010000000000000002c5c85fdf473de6b20260801c5b68020000000000000000831615611f38577001000000000000000162e42fefa39ef3580260801c5b600160401b831615611f5b5770010000000000000000b17217f7d1cf79ab0260801c5b678000000000000000831615611f82577001000000000000000058b90bfbe8e7bcd50260801c5b674000000000000000831615611fa957700100000000000000002c5c85fdf473de6a0260801c5b672000000000000000831615611fd05770010000000000000000162e42fefa39ef340260801c5b671000000000000000831615611ff757700100000000000000000b17217f7d1cf7990260801c5b67080000000000000083161561201e5770010000000000000000058b90bfbe8e7bcc0260801c5b670400000000000000831615612045577001000000000000000002c5c85fdf473de50260801c5b67020000000000000083161561206c57700100000000000000000162e42fefa39ef20260801c5b670100000000000000831615612093577001000000000000000000b17217f7d1cf780260801c5b66800000000000008316156120b957700100000000000000000058b90bfbe8e7bb0260801c5b66400000000000008316156120df5770010000000000000000002c5c85fdf473dd0260801c5b6620000000000000831615612105577001000000000000000000162e42fefa39ee0260801c5b661000000000000083161561212b5770010000000000000000000b17217f7d1cf60260801c5b6608000000000000831615612151577001000000000000000000058b90bfbe8e7a0260801c5b660400000000000083161561217757700100000000000000000002c5c85fdf473c0260801c5b660200000000000083161561219d5770010000000000000000000162e42fefa39d0260801c5b66010000000000008316156121c357700100000000000000000000b17217f7d1ce0260801c5b658000000000008316156121e85770010000000000000000000058b90bfbe8e60260801c5b6540000000000083161561220d577001000000000000000000002c5c85fdf4720260801c5b6520000000000083161561223257700100000000000000000000162e42fefa380260801c5b65100000000000831615612257577001000000000000000000000b17217f7d1b0260801c5b6508000000000083161561227c57700100000000000000000000058b90bfbe8d0260801c5b650400000000008316156122a15770010000000000000000000002c5c85fdf460260801c5b650200000000008316156122c6577001000000000000000000000162e42fefa20260801c5b650100000000008316156122eb5770010000000000000000000000b17217f7d00260801c5b64800000000083161561230f577001000000000000000000000058b90bfbe70260801c5b64400000000083161561233357700100000000000000000000002c5c85fdf30260801c5b6420000000008316156123575770010000000000000000000000162e42fef90260801c5b64100000000083161561237b57700100000000000000000000000b17217f7c0260801c5b64080000000083161561239f5770010000000000000000000000058b90bfbd0260801c5b6404000000008316156123c3577001000000000000000000000002c5c85fde0260801c5b6402000000008316156123e757700100000000000000000000000162e42fee0260801c5b64010000000083161561240b577001000000000000000000000000b17217f60260801c5b638000000083161561242e57700100000000000000000000000058b90bfa0260801c5b63400000008316156124515770010000000000000000000000002c5c85fc0260801c5b6320000000831615612474577001000000000000000000000000162e42fd0260801c5b63100000008316156124975770010000000000000000000000000b17217e0260801c5b63080000008316156124ba577001000000000000000000000000058b90be0260801c5b63040000008316156124dd57700100000000000000000000000002c5c85e0260801c5b63020000008316156125005770010000000000000000000000000162e42e0260801c5b630100000083161561252357700100000000000000000000000000b172160260801c5b628000008316156125455770010000000000000000000000000058b90a0260801c5b62400000831615612567577001000000000000000000000000002c5c840260801c5b6220000083161561258957700100000000000000000000000000162e410260801c5b621000008316156125ab577001000000000000000000000000000b17200260801c5b620800008316156125cd57700100000000000000000000000000058b8f0260801c5b620400008316156125ef5770010000000000000000000000000002c5c70260801c5b62020000831615612611577001000000000000000000000000000162e30260801c5b620100008316156126335770010000000000000000000000000000b1710260801c5b618000831615612654577001000000000000000000000000000058b80260801c5b61400083161561267557700100000000000000000000000000002c5b0260801c5b6120008316156126965770010000000000000000000000000000162d0260801c5b6110008316156126b757700100000000000000000000000000000b160260801c5b6108008316156126d85770010000000000000000000000000000058a0260801c5b6104008316156126f9577001000000000000000000000000000002c40260801c5b61020083161561271a577001000000000000000000000000000001610260801c5b61010083161561273b577001000000000000000000000000000000b00260801c5b608083161561275b577001000000000000000000000000000000570260801c5b604083161561277b5770010000000000000000000000000000002b0260801c5b602083161561279b577001000000000000000000000000000000150260801c5b60108316156127bb5770010000000000000000000000000000000a0260801c5b60088316156127db577001000000000000000000000000000000040260801c5b60048316156127fb577001000000000000000000000000000000010260801c5b8461281c57600f81901c6001600160701b03169050613fff8201915061284b565b613ffe821161284157600f81901c6001600160701b0316905081613fff03915061284b565b600091613fee19011c5b60709190911b1760801b95945050505050565b60006102dd61287e611037600160ff1b851861039286610323600261049c565b6103236128a161288e600261049c565b6103926113e9666f9c9e651c448061049c565b610e20565b60006102dd61290a6128c16113e9660b58c2126f490061049c565b610397856103926128e76128de6113e9660caaedbfa8a70061049c565b600160ff1b1890565b610397896103926129016113e9663f4a728c19ce8061049c565b6103978d612910565b836107ed565b60006102dd8261039261292f6128de6113e96640b43a0423310061049c565b610397866103926113e9662f42c683f17c8061049c565b60006020828403121561295857600080fd5b5035919050565b600080600080600060a0868803121561297757600080fd5b8535801515811461298757600080fd5b97602087013597506040870135966060810135965060800135945092505050565b6000602082840312156129ba57600080fd5b81356001600160a01b03811681146110cd57600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156102dd576102dd6129d1565b634e487b7160e01b600052601260045260246000fd5b600082612a2d57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176102dd576102dd6129d1565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220f81f5981703b008da9498096fda12e789ced5609eafc9b644ccb0b04e306497c64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146100e85780638da5cb5b146100f2578063ad1ad5dc1461010d578063f2fde38b1461012057600080fd5b806305e927df1461008d57806325b2a93b146100a9578063326611f8146100b25780635b7b6d88146100d5575b600080fd5b61009660015481565b6040519081526020015b60405180910390f35b61009660025481565b6100c56100c0366004612946565b610133565b60405190151581526020016100a0565b6100966100e336600461295f565b610146565b6100f06101cf565b005b6000546040516001600160a01b0390911681526020016100a0565b6100c561011b366004612946565b6101e3565b6100f061012e3660046129a8565b6101f6565b600061013d610274565b50600255600190565b60008061015f61036061015988426102ce565b906102e3565b9050600061018b662386f26fc100006101598a61017d576000610180565b60015b888a8760008b6102ef565b905060006101ad6402540be4006101596002548961044090919063ffffffff16565b9050818111156101c15792506101c6915050565b509150505b95945050505050565b6101d7610274565b6101e1600061044c565b565b60006101ed610274565b50600190815590565b6101fe610274565b6001600160a01b0381166102685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102718161044c565b50565b6000546001600160a01b031633146101e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161025f565b60006102da82846129e7565b90505b92915050565b60006102da8284612a10565b6000806102fb8761049c565b905060006103088761049c565b905060006103286103188861049c565b610323618e9461049c565b610503565b905060006103436103388861049c565b61032361271061049c565b9050600061035d6103538861049c565b610323606461049c565b905060006103af6103a26103796103748989610503565b6107ca565b61039761039c87610397886103928a610323600261049c565b6107ed565b610a56565b886107ed565b6103238461039288610e20565b905060006103c9826103c48561039289610e20565b610ff9565b905060ff8e1661040a576103fc6103f76103e789858a898b8861100b565b610392662386f26fc1000061049c565b611050565b975050505050505050610436565b60001960ff8f160161042a576103fc6103f76103e7888789868d896110d4565b60009750505050505050505b9695505050505050565b60006102da8284612a32565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000816000036104ae57506000919050565b8160006104ba82611133565b905060708110156104d3578060700382901b91506104e6565b60708111156104e6576070810382901c91505b613fff0160701b6001600160701b03919091161760801b92915050565b6000617fff60f084811c8216919084901c8116908290036105485780617fff03610537575061ffff60ef1b91506102dd9050565b505050600160ff1b811682186102dd565b80617fff0361058b576dffffffffffffffffffffffffffff60801b84161561057a575061ffff60ef1b91506102dd9050565b505050808218600160ff1b166102dd565b600160801b600160ff1b0384166000036105db57600160801b600160ff1b0385166000036105c3575061ffff60ef1b91506102dd9050565b505050808218600160ff1b16617fff60f01b176102dd565b6001600160701b03608085901c1660008290036105fb5760019150610602565b600160701b175b6001600160701b03608087901c16600084900361064557801561064057600061062a82611133565b6001955060e20393840160711901939190911b90505b61064f565b600160701b1760721b5b81818161065e5761065e6129fa565b0490508060000361068e57600160ff1b8787181661067d576000610683565b600160ff1b5b9450505050506102dd565b6001606c1b8110156106a2576106a2612a49565b6000600160731b8210156106e157600160721b8210156106d657600160711b8210156106cf5760706106d9565b60716106d9565b60725b60ff166106ea565b6106ea82611133565b90508361407101818601111561070857617fff94506000915061079b565b83818601613ffc01101561072357600094506000915061079b565b83818601613f8c011015610770578385613ffc01111561074e578385613ffc010382901b9150610767565b8385613ffc01101561076757613ffc8585030382901c91505b6000945061079b565b6070811115610783576070810382901c91505b6001600160701b038216915083818601613f8d010394505b81607086901b888a186001607f1b60801b1660801c6001600160801b0316171760801b955050505050506102dd565b60006102dd6107d8836111d1565b6f3ffe62e42fefa39ef35793c7673007e560801b5b6000617fff60f084811c8216919084901c81169082900361088c5780617fff03610868576001600160801b03198085169086160361083657505050600160ff1b811682186102dd565b6001600160801b031985851816600160ff1b03610858575050508181176102dd565b5061ffff60ef1b91506102dd9050565b600160801b600160ff1b038416600003610537575061ffff60ef1b91506102dd9050565b80617fff036108ca57600160801b600160ff1b0385166000036108b9575061ffff60ef1b91506102dd9050565b505050600160ff1b821681186102dd565b6001600160701b03608086901c1660008390036108ea57600192506108f1565b600160701b175b6001600160701b03608086901c1660008390036109115760019250610918565b600160701b175b80820291508160000361093957600160ff1b8787181661067d576000610683565b928201926000600160e11b83101561096c57600160e01b8310156109655761096083611133565b61096f565b60e061096f565b60e15b9050614070818601101561098a576000945060009250610a27565b6140e081860110156109cd576140708510156109af57846140700383901c92506109c4565b6140708511156109c457614070850383901b92505b60009450610a27565b61c0dd81860111156109e757617fff945060009250610a27565b60708111156109fe576070810383901c9250610a11565b6070811015610a11578060700383901b92505b6001600160701b03831692506140df8186010394505b82607086901b888a186001607f1b60801b1660801c6001600160801b0316171760801b955050505050506102dd565b6000617fff60f084811c8216919084901c811690829003610aa25780617fff03610a98576001600160801b0319808516908616036108585784925050506102dd565b84925050506102dd565b80617fff03610ab55783925050506102dd565b6001607f1b608086901c90811015906001600160701b03166000849003610adf5760019350610ae6565b600160701b175b6001607f1b608087901c90811015906001600160701b03166000859003610b105760019450610b17565b600160701b175b82600003610b4a576001600160801b03198816600160ff1b14610b3a5787610b3d565b60005b96505050505050506102dd565b80600003610b6d576001600160801b03198916600160ff1b14610b3a5788610b3d565b84860382151585151503610c76576070811315610b9357899750505050505050506102dd565b6000811315610ba55790811c90610bd4565b606f19811215610bbe57889750505050505050506102dd565b6000811215610bd4578060000384901c93508596505b92810192600160711b8410610bef576001968701969390931c925b86617fff03610c205784610c0857617fff60f01b610c12565b6001600160f01b03195b9750505050505050506102dd565b600160701b841015610c355760009650610c42565b6001600160701b03841693505b83607088901b86610c54576000610c5a565b6001607f1b5b6001600160801b0316171760801b9750505050505050506102dd565b6000811315610c9157600184901b9350600187039650610ca8565b6000811215610ca857600182901b91506001860396505b6070811315610cba5760019150610d07565b6001811315610cd7576001810360018303901c6001019150610d07565b606f19811215610cea5760019350610d07565b600019811215610d07576001816000030360018503901c60010193505b818410610d18578184039350610d21565b83820393508294505b83600003610d3a5750600096506102dd95505050505050565b6000610d4585611133565b905080607103610d6a57600185901c6001600160701b03169450600188019750610db9565b6070811015610dac57607081900380891115610d99578086901b6001600160701b031695508089039850610da6565b600098600019019590951b945b50610db9565b6001600160701b03851694505b87617fff03610deb5785610dd257617fff60f01b610ddc565b6001600160f01b03195b985050505050505050506102dd565b84607089901b87610dfd576000610e03565b6001607f1b5b6001600160801b0316171760801b985050505050505050506102dd565b60006001607f1b608083901c1115610e3e575061ffff60ef1b919050565b617fff60f083901c811690819003610e57575090919050565b6001600160701b03608084901c166000829003610e775760019150610e7e565b600160701b175b80600003610e90575060009392505050565b613fff8201600190811c9216158015610ee257600160701b8210610eba57607182901b9150610f1d565b6000610ec583611133565b60e20360fe16606f19810160011c909403939290921b9150610f1d565b600160701b8210610ef957607082901b9150610f1d565b6000610f0483611133565b60e10360fe16606f19810160011c909403939290921b91505b600160701b80830401600190811c90818481610f3b57610f3b6129fa565b048201901c90506001818481610f5357610f536129fa565b048201901c90506001818481610f6b57610f6b6129fa565b048201901c90506001818481610f8357610f836129fa565b048201901c90506001818481610f9b57610f9b6129fa565b048201901c90506001818481610fb357610fb36129fa565b048201901c90506000818481610fcb57610fcb6129fa565b04905081811015610fda578091505b816001600160701b0316607086901b1760801b95505050505050919050565b60006102da83600160ff1b8418610a56565b600061104561101d8861039289611389565b6103c461103c88610392611037600160ff1b8b188a6107ed565b611424565b61039286611389565b979650505050505050565b6000617fff60f083901c16613fff81101561106e5750600092915050565b6001607f1b608084901c1061108257600080fd5b6140fe81111561109157600080fd5b600160701b6001600160701b03608085901c161761406f8210156110bb5761406f8290031c6110cd565b61406f8211156110cd5761406e1982011b5b9392505050565b6000806111006110f189610392611037600160ff1b8c188b6107ed565b610392600160ff1b8818611389565b9050600061111785610392600160ff1b8718611389565b905060006111258383610ff9565b9a9950505050505050505050565b600080821161114157600080fd5b6000600160801b831061115657608092831c92015b600160401b831061116957604092831c92015b640100000000831061117d57602092831c92015b62010000831061118f57601092831c92015b61010083106111a057600892831c92015b601083106111b057600492831c92015b600483106111c057600292831c92015b600283106102dd5760010192915050565b60006001607f1b608083901c11156111ef575061ffff60ef1b919050565b6001600160801b03198216613fff60f01b0361120d57506000919050565b617fff60f083901c811690819003611226575090919050565b6001600160701b03608084901c166000829003611246576001915061124d565b600160701b175b8060000361126657506001600160f01b03199392505050565b600061406f81613fff851061128c5750600f9290921b9160009150613ffe1984016112cb565b60019250600160701b84106112ae5784613ffe039050600f84901b93506112cb565b60006112b985611133565b607f8190039590951b9461406d039150505b836001607f1b036113015782156112e0576001015b60006112eb82611133565b60700390508082901b915080830392505061134f565b60008361130f576000611312565b60015b60ff1690505b600160701b82101561134d5793800260ff81901c607f81019190911c94600019939093019260019290921b9082180190611318565b505b806001600160701b0316607083901b8461136a576000611370565b6001607f1b5b6001600160801b0316171760801b979650505050505050565b6000806113958361144b565b12156113b7576102dd6113a8600161049c565b6103c4600160ff1b8518611389565b60006113f96113c6600161049c565b6103236113d3600161049c565b61039761039c6113e966083ac553a55e0061049c565b610323662386f26fc1000061049c565b9050600061140782856114f2565b905061141c611416600161049c565b82610ff9565b949350505050565b60006102dd611446836f1fffb8aa3b295c17f0bbbe87fed0691d60811b6107ed565b611509565b6000617fff60f083901c166140fe81111561146557600080fd5b613fff8110156114785750600092915050565b600160701b6001600160701b03608085901c161761406f8210156114a25761406f8290031c6114b4565b61406f8211156114b45761406e1982011b5b6001607f1b608085901c106114de57600160ff1b8111156114d457600080fd5b6000039392505050565b6001600160ff1b038111156110cd57600080fd5b60006102da6115008361285e565b610392856128a6565b60006001607f1b608083901c90811190617fff60f085901c8116916001600160701b0316908214801561153b57508015155b1561154f575061ffff60ef1b949350505050565b61400d821115611574578261156957617fff60f01b6101c6565b600095945050505050565b613f7f82101561158d5750613fff60f01b949350505050565b8160000361159e57600191506115a5565b600160701b175b613fef8211156115bb57613fee1982011b6115cd565b613fef8210156115cd57613fef8290031c5b8280156115de575061203760811b81115b156115ee57506000949350505050565b8215801561160d5750713fffffffffffffffffffffffffffffffffff81115b156116215750617fff60f01b949350505050565b6001600160801b0381169060801c83801561163b57508115155b15611647579019906001015b6001607f1b8281161561166b5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b6001607e1b83161561168e577001306fe0a31b7152de8d5a46305c85edec0260801c5b6001607d1b8316156116b1577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b6001607c1b8316156116d45770010b5586cf9890f6298b92b71842a983630260801c5b6001607b1b8316156116f7577001059b0d31585743ae7c548eb68ca417fd0260801c5b6001607a1b83161561171a57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b600160791b83161561173d5770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600160781b83161561176057700100b1afa5abcbed6129ab13ec11dc95430260801c5b600160771b8316156117835770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600160761b8316156117a6577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600160751b8316156117c957700100162f3904051fa128bca9c55c31e5df0260801c5b600160741b8316156117ec577001000b175effdc76ba38e31671ca9397250260801c5b600160731b83161561180f57700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600160721b8316156118325770010002c5cc37da9491d0985c348c68e7b30260801c5b600160711b831615611855577001000162e525ee054754457d59952920260260801c5b600160701b8316156118785770010000b17255775c040618bf4a4ade83fc0260801c5b6001606f1b83161561189b577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6001606e1b8316156118be57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6001606d1b8316156118e15770010000162e43f4f831060e02d839a9d16d0260801c5b6001606c1b83161561190457700100000b1721bcfc99d9f890ea069117630260801c5b6001606b1b8316156119275770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6001606a1b83161561194a577001000002c5c863b73f016468f6bac5ca2b0260801c5b600160691b83161561196d57700100000162e430e5a18f6119e3c02282a50260801c5b600160681b831615611990577001000000b1721835514b86e6d96efd1bfe0260801c5b600160671b8316156119b357700100000058b90c0b48c6be5df846c5b2ef0260801c5b600160661b8316156119d65770010000002c5c8601cc6b9e94213c72737a0260801c5b600160651b8316156119f9577001000000162e42fff037df38aa2b219f060260801c5b600160641b831615611a1c5770010000000b17217fba9c739aa5819f44f90260801c5b600160631b831615611a3f577001000000058b90bfcdee5acd3c1cedc8230260801c5b600160621b831615611a6257700100000002c5c85fe31f35a6a30da1be500260801c5b600160611b831615611a855770010000000162e42ff0999ce3541b9fffcf0260801c5b600160601b831615611aa857700100000000b17217f80f4ef5aadda455540260801c5b6001605f1b831615611acb5770010000000058b90bfbf8479bd5a81b51ad0260801c5b6001605e1b831615611aee577001000000002c5c85fdf84bd62ae30a74cc0260801c5b6001605d1b831615611b1157700100000000162e42fefb2fed257559bdaa0260801c5b6001605c1b831615611b34577001000000000b17217f7d5a7716bba4a9ae0260801c5b6001605b1b831615611b5757700100000000058b90bfbe9ddbac5e109cce0260801c5b6001605a1b831615611b7a5770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600160591b831615611b9d577001000000000162e42fefa494f1478fde050260801c5b600160581b831615611bc05770010000000000b17217f7d20cf927c8e94c0260801c5b600160571b831615611be3577001000000000058b90bfbe8f71cb4e4b33d0260801c5b600160561b831615611c0657700100000000002c5c85fdf477b662b269450260801c5b600160551b831615611c295770010000000000162e42fefa3ae53369388c0260801c5b600160541b831615611c4c57700100000000000b17217f7d1d351a389d400260801c5b600160531b831615611c6f5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b600160521b831615611c92577001000000000002c5c85fdf4741bea6e77e0260801c5b600160511b831615611cb557700100000000000162e42fefa39fe95583c20260801c5b600160501b831615611cd8577001000000000000b17217f7d1cfb72b45e10260801c5b6980000000000000000000831615611d0157700100000000000058b90bfbe8e7cc35c3f00260801c5b6940000000000000000000831615611d2a5770010000000000002c5c85fdf473e242ea380260801c5b6920000000000000000000831615611d53577001000000000000162e42fefa39f02b772c0260801c5b6910000000000000000000831615611d7c5770010000000000000b17217f7d1cf7d83c1a0260801c5b6908000000000000000000831615611da5577001000000000000058b90bfbe8e7bdcbe2e0260801c5b6904000000000000000000831615611dce57700100000000000002c5c85fdf473dea871f0260801c5b6902000000000000000000831615611df75770010000000000000162e42fefa39ef44d910260801c5b6901000000000000000000831615611e2057700100000000000000b17217f7d1cf79e9490260801c5b68800000000000000000831615611e485770010000000000000058b90bfbe8e7bce5440260801c5b68400000000000000000831615611e70577001000000000000002c5c85fdf473de6eca0260801c5b68200000000000000000831615611e9857700100000000000000162e42fefa39ef366f0260801c5b68100000000000000000831615611ec0577001000000000000000b17217f7d1cf79afa0260801c5b68080000000000000000831615611ee857700100000000000000058b90bfbe8e7bcd6d0260801c5b68040000000000000000831615611f105770010000000000000002c5c85fdf473de6b20260801c5b68020000000000000000831615611f38577001000000000000000162e42fefa39ef3580260801c5b600160401b831615611f5b5770010000000000000000b17217f7d1cf79ab0260801c5b678000000000000000831615611f82577001000000000000000058b90bfbe8e7bcd50260801c5b674000000000000000831615611fa957700100000000000000002c5c85fdf473de6a0260801c5b672000000000000000831615611fd05770010000000000000000162e42fefa39ef340260801c5b671000000000000000831615611ff757700100000000000000000b17217f7d1cf7990260801c5b67080000000000000083161561201e5770010000000000000000058b90bfbe8e7bcc0260801c5b670400000000000000831615612045577001000000000000000002c5c85fdf473de50260801c5b67020000000000000083161561206c57700100000000000000000162e42fefa39ef20260801c5b670100000000000000831615612093577001000000000000000000b17217f7d1cf780260801c5b66800000000000008316156120b957700100000000000000000058b90bfbe8e7bb0260801c5b66400000000000008316156120df5770010000000000000000002c5c85fdf473dd0260801c5b6620000000000000831615612105577001000000000000000000162e42fefa39ee0260801c5b661000000000000083161561212b5770010000000000000000000b17217f7d1cf60260801c5b6608000000000000831615612151577001000000000000000000058b90bfbe8e7a0260801c5b660400000000000083161561217757700100000000000000000002c5c85fdf473c0260801c5b660200000000000083161561219d5770010000000000000000000162e42fefa39d0260801c5b66010000000000008316156121c357700100000000000000000000b17217f7d1ce0260801c5b658000000000008316156121e85770010000000000000000000058b90bfbe8e60260801c5b6540000000000083161561220d577001000000000000000000002c5c85fdf4720260801c5b6520000000000083161561223257700100000000000000000000162e42fefa380260801c5b65100000000000831615612257577001000000000000000000000b17217f7d1b0260801c5b6508000000000083161561227c57700100000000000000000000058b90bfbe8d0260801c5b650400000000008316156122a15770010000000000000000000002c5c85fdf460260801c5b650200000000008316156122c6577001000000000000000000000162e42fefa20260801c5b650100000000008316156122eb5770010000000000000000000000b17217f7d00260801c5b64800000000083161561230f577001000000000000000000000058b90bfbe70260801c5b64400000000083161561233357700100000000000000000000002c5c85fdf30260801c5b6420000000008316156123575770010000000000000000000000162e42fef90260801c5b64100000000083161561237b57700100000000000000000000000b17217f7c0260801c5b64080000000083161561239f5770010000000000000000000000058b90bfbd0260801c5b6404000000008316156123c3577001000000000000000000000002c5c85fde0260801c5b6402000000008316156123e757700100000000000000000000000162e42fee0260801c5b64010000000083161561240b577001000000000000000000000000b17217f60260801c5b638000000083161561242e57700100000000000000000000000058b90bfa0260801c5b63400000008316156124515770010000000000000000000000002c5c85fc0260801c5b6320000000831615612474577001000000000000000000000000162e42fd0260801c5b63100000008316156124975770010000000000000000000000000b17217e0260801c5b63080000008316156124ba577001000000000000000000000000058b90be0260801c5b63040000008316156124dd57700100000000000000000000000002c5c85e0260801c5b63020000008316156125005770010000000000000000000000000162e42e0260801c5b630100000083161561252357700100000000000000000000000000b172160260801c5b628000008316156125455770010000000000000000000000000058b90a0260801c5b62400000831615612567577001000000000000000000000000002c5c840260801c5b6220000083161561258957700100000000000000000000000000162e410260801c5b621000008316156125ab577001000000000000000000000000000b17200260801c5b620800008316156125cd57700100000000000000000000000000058b8f0260801c5b620400008316156125ef5770010000000000000000000000000002c5c70260801c5b62020000831615612611577001000000000000000000000000000162e30260801c5b620100008316156126335770010000000000000000000000000000b1710260801c5b618000831615612654577001000000000000000000000000000058b80260801c5b61400083161561267557700100000000000000000000000000002c5b0260801c5b6120008316156126965770010000000000000000000000000000162d0260801c5b6110008316156126b757700100000000000000000000000000000b160260801c5b6108008316156126d85770010000000000000000000000000000058a0260801c5b6104008316156126f9577001000000000000000000000000000002c40260801c5b61020083161561271a577001000000000000000000000000000001610260801c5b61010083161561273b577001000000000000000000000000000000b00260801c5b608083161561275b577001000000000000000000000000000000570260801c5b604083161561277b5770010000000000000000000000000000002b0260801c5b602083161561279b577001000000000000000000000000000000150260801c5b60108316156127bb5770010000000000000000000000000000000a0260801c5b60088316156127db577001000000000000000000000000000000040260801c5b60048316156127fb577001000000000000000000000000000000010260801c5b8461281c57600f81901c6001600160701b03169050613fff8201915061284b565b613ffe821161284157600f81901c6001600160701b0316905081613fff03915061284b565b600091613fee19011c5b60709190911b1760801b95945050505050565b60006102dd61287e611037600160ff1b851861039286610323600261049c565b6103236128a161288e600261049c565b6103926113e9666f9c9e651c448061049c565b610e20565b60006102dd61290a6128c16113e9660b58c2126f490061049c565b610397856103926128e76128de6113e9660caaedbfa8a70061049c565b600160ff1b1890565b610397896103926129016113e9663f4a728c19ce8061049c565b6103978d612910565b836107ed565b60006102dd8261039261292f6128de6113e96640b43a0423310061049c565b610397866103926113e9662f42c683f17c8061049c565b60006020828403121561295857600080fd5b5035919050565b600080600080600060a0868803121561297757600080fd5b8535801515811461298757600080fd5b97602087013597506040870135966060810135965060800135945092505050565b6000602082840312156129ba57600080fd5b81356001600160a01b03811681146110cd57600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156102dd576102dd6129d1565b634e487b7160e01b600052601260045260246000fd5b600082612a2d57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176102dd576102dd6129d1565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220f81f5981703b008da9498096fda12e789ced5609eafc9b644ccb0b04e306497c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getOptionPrice(bool,uint256,uint256,uint256,uint256)": {
        "params": {
          "expiry": "expiry timestamp",
          "isPut": "is put option",
          "lastPrice": "current price",
          "strike": "strike price",
          "volatility": "volatility"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMinOptionPricePercentage(uint256)": {
        "params": {
          "_minOptionPricePercentage": "the new %"
        },
        "returns": {
          "_0": "whether % was updated"
        }
      },
      "updateVolatilityCap(uint256)": {
        "params": {
          "_volatilityCap": "the new volatility cap"
        },
        "returns": {
          "_0": "whether volatility cap was updated"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getOptionPrice(bool,uint256,uint256,uint256,uint256)": {
        "notice": "computes the option price (with liquidity multiplier)"
      },
      "updateMinOptionPricePercentage(uint256)": {
        "notice": "updates % of the price of asset which is the minimum option price possible"
      },
      "updateVolatilityCap(uint256)": {
        "notice": "updates volatility cap for an option pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OptionPricing.sol:OptionPricing",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 468,
        "contract": "contracts/OptionPricing.sol:OptionPricing",
        "label": "volatilityCap",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 470,
        "contract": "contracts/OptionPricing.sol:OptionPricing",
        "label": "minOptionPricePercentage",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}